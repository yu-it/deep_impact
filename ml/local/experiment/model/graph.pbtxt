node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3599
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 3599
          }
        }
        tensor_content: "\232\231\231\231\231\231\271?\232\231\231\231\231\231\311?333333\323?\232\231\231\231\231\231\331?\000\000\000\000\000\000\340?333333\343?ffffff\346?\232\231\231\231\231\231\351?\315\314\314\314\314\314\354?\000\000\000\000\000\000\360?\232\231\231\231\231\231\361?333333\363?\315\314\314\314\314\314\364?ffffff\366?\000\000\000\000\000\000\370?\232\231\231\231\231\231\371?333333\373?\315\314\314\314\314\314\374?ffffff\376?\000\000\000\000\000\000\000@\315\314\314\314\314\314\000@\232\231\231\231\231\231\001@ffffff\002@333333\003@\000\000\000\000\000\000\004@\315\314\314\314\314\314\004@\232\231\231\231\231\231\005@ffffff\006@333333\007@\000\000\000\000\000\000\010@\315\314\314\314\314\314\010@\232\231\231\231\231\231\t@ffffff\n@333333\013@\000\000\000\000\000\000\014@\315\314\314\314\314\314\014@\232\231\231\231\231\231\r@ffffff\016@333333\017@\000\000\000\000\000\000\020@ffffff\020@\315\314\314\314\314\314\020@333333\021@\232\231\231\231\231\231\021@\000\000\000\000\000\000\022@ffffff\022@\315\314\314\314\314\314\022@333333\023@\232\231\231\231\231\231\023@\000\000\000\000\000\000\024@ffffff\024@\315\314\314\314\314\314\024@333333\025@\232\231\231\231\231\231\025@\000\000\000\000\000\000\026@ffffff\026@\315\314\314\314\314\314\026@333333\027@\232\231\231\231\231\231\027@\000\000\000\000\000\000\030@ffffff\030@\315\314\314\314\314\314\030@333333\031@\232\231\231\231\231\231\031@\000\000\000\000\000\000\032@ffffff\032@\315\314\314\314\314\314\032@333333\033@\232\231\231\231\231\231\033@\000\000\000\000\000\000\034@ffffff\034@\315\314\314\314\314\314\034@333333\035@\232\231\231\231\231\231\035@\000\000\000\000\000\000\036@ffffff\036@\315\314\314\314\314\314\036@333333\037@\232\231\231\231\231\231\037@\000\000\000\000\000\000 @333333 @ffffff @\232\231\231\231\231\231 @\315\314\314\314\314\314 @\000\000\000\000\000\000!@333333!@ffffff!@\232\231\231\231\231\231!@\315\314\314\314\314\314!@\000\000\000\000\000\000\"@333333\"@ffffff\"@\232\231\231\231\231\231\"@\315\314\314\314\314\314\"@\000\000\000\000\000\000#@333333#@ffffff#@\232\231\231\231\231\231#@\315\314\314\314\314\314#@\000\000\000\000\000\000$@333333$@ffffff$@\232\231\231\231\231\231$@\315\314\314\314\314\314$@\000\000\000\000\000\000%@333333%@ffffff%@\232\231\231\231\231\231%@\315\314\314\314\314\314%@\000\000\000\000\000\000&@333333&@ffffff&@\232\231\231\231\231\231&@\315\314\314\314\314\314&@\000\000\000\000\000\000\'@333333\'@ffffff\'@\232\231\231\231\231\231\'@\315\314\314\314\314\314\'@\000\000\000\000\000\000(@333333(@ffffff(@\232\231\231\231\231\231(@\315\314\314\314\314\314(@\000\000\000\000\000\000)@333333)@ffffff)@\232\231\231\231\231\231)@\315\314\314\314\314\314)@\000\000\000\000\000\000*@333333*@ffffff*@\232\231\231\231\231\231*@\315\314\314\314\314\314*@\000\000\000\000\000\000+@333333+@ffffff+@\232\231\231\231\231\231+@\315\314\314\314\314\314+@\000\000\000\000\000\000,@333333,@ffffff,@\232\231\231\231\231\231,@\315\314\314\314\314\314,@\000\000\000\000\000\000-@333333-@ffffff-@\232\231\231\231\231\231-@\315\314\314\314\314\314-@\000\000\000\000\000\000.@333333.@ffffff.@\232\231\231\231\231\231.@\315\314\314\314\314\314.@\000\000\000\000\000\000/@333333/@ffffff/@\232\231\231\231\231\231/@\315\314\314\314\314\314/@\000\000\000\000\000\0000@\232\231\231\231\231\0310@3333330@\315\314\314\314\314L0@ffffff0@\000\000\000\000\000\2000@\232\231\231\231\231\2310@33333\2630@\315\314\314\314\314\3140@fffff\3460@\000\000\000\000\000\0001@\232\231\231\231\231\0311@3333331@\315\314\314\314\314L1@ffffff1@\000\000\000\000\000\2001@\232\231\231\231\231\2311@33333\2631@\315\314\314\314\314\3141@fffff\3461@\000\000\000\000\000\0002@\232\231\231\231\231\0312@3333332@\315\314\314\314\314L2@ffffff2@\000\000\000\000\000\2002@\232\231\231\231\231\2312@33333\2632@\315\314\314\314\314\3142@fffff\3462@\000\000\000\000\000\0003@\232\231\231\231\231\0313@3333333@\315\314\314\314\314L3@ffffff3@\000\000\000\000\000\2003@\232\231\231\231\231\2313@33333\2633@\315\314\314\314\314\3143@fffff\3463@\000\000\000\000\000\0004@\232\231\231\231\231\0314@3333334@\315\314\314\314\314L4@ffffff4@\000\000\000\000\000\2004@\232\231\231\231\231\2314@33333\2634@\315\314\314\314\314\3144@fffff\3464@\000\000\000\000\000\0005@\232\231\231\231\231\0315@3333335@\315\314\314\314\314L5@ffffff5@\000\000\000\000\000\2005@\232\231\231\231\231\2315@33333\2635@\315\314\314\314\314\3145@fffff\3465@\000\000\000\000\000\0006@\232\231\231\231\231\0316@3333336@\315\314\314\314\314L6@ffffff6@\000\000\000\000\000\2006@\232\231\231\231\231\2316@33333\2636@\315\314\314\314\314\3146@fffff\3466@\000\000\000\000\000\0007@\232\231\231\231\231\0317@3333337@\315\314\314\314\314L7@ffffff7@\000\000\000\000\000\2007@\232\231\231\231\231\2317@33333\2637@\315\314\314\314\314\3147@fffff\3467@\000\000\000\000\000\0008@\232\231\231\231\231\0318@3333338@\315\314\314\314\314L8@ffffff8@\000\000\000\000\000\2008@\232\231\231\231\231\2318@33333\2638@\315\314\314\314\314\3148@fffff\3468@\000\000\000\000\000\0009@\232\231\231\231\231\0319@3333339@\315\314\314\314\314L9@ffffff9@\000\000\000\000\000\2009@\232\231\231\231\231\2319@33333\2639@\315\314\314\314\314\3149@fffff\3469@\000\000\000\000\000\000:@\232\231\231\231\231\031:@333333:@\315\314\314\314\314L:@ffffff:@\000\000\000\000\000\200:@\232\231\231\231\231\231:@33333\263:@\315\314\314\314\314\314:@fffff\346:@\000\000\000\000\000\000;@\232\231\231\231\231\031;@333333;@\315\314\314\314\314L;@ffffff;@\000\000\000\000\000\200;@\232\231\231\231\231\231;@33333\263;@\315\314\314\314\314\314;@fffff\346;@\000\000\000\000\000\000<@\232\231\231\231\231\031<@333333<@\315\314\314\314\314L<@ffffff<@\000\000\000\000\000\200<@\232\231\231\231\231\231<@33333\263<@\315\314\314\314\314\314<@fffff\346<@\000\000\000\000\000\000=@\232\231\231\231\231\031=@333333=@\315\314\314\314\314L=@ffffff=@\000\000\000\000\000\200=@\232\231\231\231\231\231=@33333\263=@\315\314\314\314\314\314=@fffff\346=@\000\000\000\000\000\000>@\232\231\231\231\231\031>@333333>@\315\314\314\314\314L>@ffffff>@\000\000\000\000\000\200>@\232\231\231\231\231\231>@33333\263>@\315\314\314\314\314\314>@fffff\346>@\000\000\000\000\000\000?@\232\231\231\231\231\031?@333333?@\315\314\314\314\314L?@ffffff?@\000\000\000\000\000\200?@\232\231\231\231\231\231?@33333\263?@\315\314\314\314\314\314?@fffff\346?@\000\000\000\000\000\000@@\315\314\314\314\314\014@@\232\231\231\231\231\031@@fffff&@@333333@@\000\000\000\000\000@@@\315\314\314\314\314L@@\232\231\231\231\231Y@@ffffff@@33333s@@\000\000\000\000\000\200@@\315\314\314\314\314\214@@\232\231\231\231\231\231@@fffff\246@@33333\263@@\000\000\000\000\000\300@@\315\314\314\314\314\314@@\232\231\231\231\231\331@@fffff\346@@33333\363@@\000\000\000\000\000\000A@\315\314\314\314\314\014A@\232\231\231\231\231\031A@fffff&A@333333A@\000\000\000\000\000@A@\315\314\314\314\314LA@\232\231\231\231\231YA@ffffffA@33333sA@\000\000\000\000\000\200A@\315\314\314\314\314\214A@\232\231\231\231\231\231A@fffff\246A@33333\263A@\000\000\000\000\000\300A@\315\314\314\314\314\314A@\232\231\231\231\231\331A@fffff\346A@33333\363A@\000\000\000\000\000\000B@\315\314\314\314\314\014B@\232\231\231\231\231\031B@fffff&B@333333B@\000\000\000\000\000@B@\315\314\314\314\314LB@\232\231\231\231\231YB@ffffffB@33333sB@\000\000\000\000\000\200B@\315\314\314\314\314\214B@\232\231\231\231\231\231B@fffff\246B@33333\263B@\000\000\000\000\000\300B@\315\314\314\314\314\314B@\232\231\231\231\231\331B@fffff\346B@33333\363B@\000\000\000\000\000\000C@\315\314\314\314\314\014C@\232\231\231\231\231\031C@fffff&C@333333C@\000\000\000\000\000@C@\315\314\314\314\314LC@\232\231\231\231\231YC@ffffffC@33333sC@\000\000\000\000\000\200C@\315\314\314\314\314\214C@\232\231\231\231\231\231C@fffff\246C@33333\263C@\000\000\000\000\000\300C@\315\314\314\314\314\314C@\232\231\231\231\231\331C@fffff\346C@33333\363C@\000\000\000\000\000\000D@\315\314\314\314\314\014D@\232\231\231\231\231\031D@fffff&D@333333D@\000\000\000\000\000@D@\315\314\314\314\314LD@\232\231\231\231\231YD@ffffffD@33333sD@\000\000\000\000\000\200D@\315\314\314\314\314\214D@\232\231\231\231\231\231D@fffff\246D@33333\263D@\000\000\000\000\000\300D@\315\314\314\314\314\314D@\232\231\231\231\231\331D@fffff\346D@33333\363D@\000\000\000\000\000\000E@\315\314\314\314\314\014E@\232\231\231\231\231\031E@fffff&E@333333E@\000\000\000\000\000@E@\315\314\314\314\314LE@\232\231\231\231\231YE@ffffffE@33333sE@\000\000\000\000\000\200E@\315\314\314\314\314\214E@\232\231\231\231\231\231E@fffff\246E@33333\263E@\000\000\000\000\000\300E@\315\314\314\314\314\314E@\232\231\231\231\231\331E@fffff\346E@33333\363E@\000\000\000\000\000\000F@\315\314\314\314\314\014F@\232\231\231\231\231\031F@fffff&F@333333F@\000\000\000\000\000@F@\315\314\314\314\314LF@\232\231\231\231\231YF@ffffffF@33333sF@\000\000\000\000\000\200F@\315\314\314\314\314\214F@\232\231\231\231\231\231F@fffff\246F@33333\263F@\000\000\000\000\000\300F@\315\314\314\314\314\314F@\232\231\231\231\231\331F@fffff\346F@33333\363F@\000\000\000\000\000\000G@\315\314\314\314\314\014G@\232\231\231\231\231\031G@fffff&G@333333G@\000\000\000\000\000@G@\315\314\314\314\314LG@\232\231\231\231\231YG@ffffffG@33333sG@\000\000\000\000\000\200G@\315\314\314\314\314\214G@\232\231\231\231\231\231G@fffff\246G@33333\263G@\000\000\000\000\000\300G@\315\314\314\314\314\314G@\232\231\231\231\231\331G@fffff\346G@33333\363G@\000\000\000\000\000\000H@\315\314\314\314\314\014H@\232\231\231\231\231\031H@fffff&H@333333H@\000\000\000\000\000@H@\315\314\314\314\314LH@\232\231\231\231\231YH@ffffffH@33333sH@\000\000\000\000\000\200H@\315\314\314\314\314\214H@\232\231\231\231\231\231H@fffff\246H@33333\263H@\000\000\000\000\000\300H@\315\314\314\314\314\314H@\232\231\231\231\231\331H@fffff\346H@33333\363H@\000\000\000\000\000\000I@\315\314\314\314\314\014I@\232\231\231\231\231\031I@fffff&I@333333I@\000\000\000\000\000@I@\315\314\314\314\314LI@\232\231\231\231\231YI@ffffffI@33333sI@\000\000\000\000\000\200I@\315\314\314\314\314\214I@\232\231\231\231\231\231I@fffff\246I@33333\263I@\000\000\000\000\000\300I@\315\314\314\314\314\314I@\232\231\231\231\231\331I@fffff\346I@33333\363I@\000\000\000\000\000\000J@\315\314\314\314\314\014J@\232\231\231\231\231\031J@fffff&J@333333J@\000\000\000\000\000@J@\315\314\314\314\314LJ@\232\231\231\231\231YJ@ffffffJ@33333sJ@\000\000\000\000\000\200J@\315\314\314\314\314\214J@\232\231\231\231\231\231J@fffff\246J@33333\263J@\000\000\000\000\000\300J@\315\314\314\314\314\314J@\232\231\231\231\231\331J@fffff\346J@33333\363J@\000\000\000\000\000\000K@\315\314\314\314\314\014K@\232\231\231\231\231\031K@fffff&K@333333K@\000\000\000\000\000@K@\315\314\314\314\314LK@\232\231\231\231\231YK@ffffffK@33333sK@\000\000\000\000\000\200K@\315\314\314\314\314\214K@\232\231\231\231\231\231K@fffff\246K@33333\263K@\000\000\000\000\000\300K@\315\314\314\314\314\314K@\232\231\231\231\231\331K@fffff\346K@33333\363K@\000\000\000\000\000\000L@\315\314\314\314\314\014L@\232\231\231\231\231\031L@fffff&L@333333L@\000\000\000\000\000@L@\315\314\314\314\314LL@\232\231\231\231\231YL@ffffffL@33333sL@\000\000\000\000\000\200L@\315\314\314\314\314\214L@\232\231\231\231\231\231L@fffff\246L@33333\263L@\000\000\000\000\000\300L@\315\314\314\314\314\314L@\232\231\231\231\231\331L@fffff\346L@33333\363L@\000\000\000\000\000\000M@\315\314\314\314\314\014M@\232\231\231\231\231\031M@fffff&M@333333M@\000\000\000\000\000@M@\315\314\314\314\314LM@\232\231\231\231\231YM@ffffffM@33333sM@\000\000\000\000\000\200M@\315\314\314\314\314\214M@\232\231\231\231\231\231M@fffff\246M@33333\263M@\000\000\000\000\000\300M@\315\314\314\314\314\314M@\232\231\231\231\231\331M@fffff\346M@33333\363M@\000\000\000\000\000\000N@\315\314\314\314\314\014N@\232\231\231\231\231\031N@fffff&N@333333N@\000\000\000\000\000@N@\315\314\314\314\314LN@\232\231\231\231\231YN@ffffffN@33333sN@\000\000\000\000\000\200N@\315\314\314\314\314\214N@\232\231\231\231\231\231N@fffff\246N@33333\263N@\000\000\000\000\000\300N@\315\314\314\314\314\314N@\232\231\231\231\231\331N@fffff\346N@33333\363N@\000\000\000\000\000\000O@\315\314\314\314\314\014O@\232\231\231\231\231\031O@fffff&O@333333O@\000\000\000\000\000@O@\315\314\314\314\314LO@\232\231\231\231\231YO@ffffffO@33333sO@\000\000\000\000\000\200O@\315\314\314\314\314\214O@\232\231\231\231\231\231O@fffff\246O@33333\263O@\000\000\000\000\000\300O@\315\314\314\314\314\314O@\232\231\231\231\231\331O@fffff\346O@33333\363O@\000\000\000\000\000\000P@fffff\006P@\315\314\314\314\314\014P@33333\023P@\232\231\231\231\231\031P@\000\000\000\000\000 P@fffff&P@\315\314\314\314\314,P@333333P@\232\231\231\231\2319P@\000\000\000\000\000@P@fffffFP@\315\314\314\314\314LP@33333SP@\232\231\231\231\231YP@\000\000\000\000\000`P@ffffffP@\315\314\314\314\314lP@33333sP@\232\231\231\231\231yP@\000\000\000\000\000\200P@fffff\206P@\315\314\314\314\314\214P@33333\223P@\232\231\231\231\231\231P@\000\000\000\000\000\240P@fffff\246P@\315\314\314\314\314\254P@33333\263P@\232\231\231\231\231\271P@\000\000\000\000\000\300P@fffff\306P@\315\314\314\314\314\314P@33333\323P@\232\231\231\231\231\331P@\000\000\000\000\000\340P@fffff\346P@\315\314\314\314\314\354P@33333\363P@\232\231\231\231\231\371P@\000\000\000\000\000\000Q@fffff\006Q@\315\314\314\314\314\014Q@33333\023Q@\232\231\231\231\231\031Q@\000\000\000\000\000 Q@fffff&Q@\315\314\314\314\314,Q@333333Q@\232\231\231\231\2319Q@\000\000\000\000\000@Q@fffffFQ@\315\314\314\314\314LQ@33333SQ@\232\231\231\231\231YQ@\000\000\000\000\000`Q@ffffffQ@\315\314\314\314\314lQ@33333sQ@\232\231\231\231\231yQ@\000\000\000\000\000\200Q@fffff\206Q@\315\314\314\314\314\214Q@33333\223Q@\232\231\231\231\231\231Q@\000\000\000\000\000\240Q@fffff\246Q@\315\314\314\314\314\254Q@33333\263Q@\232\231\231\231\231\271Q@\000\000\000\000\000\300Q@fffff\306Q@\315\314\314\314\314\314Q@33333\323Q@\232\231\231\231\231\331Q@\000\000\000\000\000\340Q@fffff\346Q@\315\314\314\314\314\354Q@33333\363Q@\232\231\231\231\231\371Q@\000\000\000\000\000\000R@fffff\006R@\315\314\314\314\314\014R@33333\023R@\232\231\231\231\231\031R@\000\000\000\000\000 R@fffff&R@\315\314\314\314\314,R@333333R@\232\231\231\231\2319R@\000\000\000\000\000@R@fffffFR@\315\314\314\314\314LR@33333SR@\232\231\231\231\231YR@\000\000\000\000\000`R@ffffffR@\315\314\314\314\314lR@33333sR@\232\231\231\231\231yR@\000\000\000\000\000\200R@fffff\206R@\315\314\314\314\314\214R@33333\223R@\232\231\231\231\231\231R@\000\000\000\000\000\240R@fffff\246R@\315\314\314\314\314\254R@33333\263R@\232\231\231\231\231\271R@\000\000\000\000\000\300R@fffff\306R@\315\314\314\314\314\314R@33333\323R@\232\231\231\231\231\331R@\000\000\000\000\000\340R@fffff\346R@\315\314\314\314\314\354R@33333\363R@\232\231\231\231\231\371R@\000\000\000\000\000\000S@fffff\006S@\315\314\314\314\314\014S@33333\023S@\232\231\231\231\231\031S@\000\000\000\000\000 S@fffff&S@\315\314\314\314\314,S@333333S@\232\231\231\231\2319S@\000\000\000\000\000@S@fffffFS@\315\314\314\314\314LS@33333SS@\232\231\231\231\231YS@\000\000\000\000\000`S@ffffffS@\315\314\314\314\314lS@33333sS@\232\231\231\231\231yS@\000\000\000\000\000\200S@fffff\206S@\315\314\314\314\314\214S@33333\223S@\232\231\231\231\231\231S@\000\000\000\000\000\240S@fffff\246S@\315\314\314\314\314\254S@33333\263S@\232\231\231\231\231\271S@\000\000\000\000\000\300S@fffff\306S@\315\314\314\314\314\314S@33333\323S@\232\231\231\231\231\331S@\000\000\000\000\000\340S@fffff\346S@\315\314\314\314\314\354S@33333\363S@\232\231\231\231\231\371S@\000\000\000\000\000\000T@fffff\006T@\315\314\314\314\314\014T@33333\023T@\232\231\231\231\231\031T@\000\000\000\000\000 T@fffff&T@\315\314\314\314\314,T@333333T@\232\231\231\231\2319T@\000\000\000\000\000@T@fffffFT@\315\314\314\314\314LT@33333ST@\232\231\231\231\231YT@\000\000\000\000\000`T@ffffffT@\315\314\314\314\314lT@33333sT@\232\231\231\231\231yT@\000\000\000\000\000\200T@fffff\206T@\315\314\314\314\314\214T@33333\223T@\232\231\231\231\231\231T@\000\000\000\000\000\240T@fffff\246T@\315\314\314\314\314\254T@33333\263T@\232\231\231\231\231\271T@\000\000\000\000\000\300T@fffff\306T@\315\314\314\314\314\314T@33333\323T@\232\231\231\231\231\331T@\000\000\000\000\000\340T@fffff\346T@\315\314\314\314\314\354T@33333\363T@\232\231\231\231\231\371T@\000\000\000\000\000\000U@fffff\006U@\315\314\314\314\314\014U@33333\023U@\232\231\231\231\231\031U@\000\000\000\000\000 U@fffff&U@\315\314\314\314\314,U@333333U@\232\231\231\231\2319U@\000\000\000\000\000@U@fffffFU@\315\314\314\314\314LU@33333SU@\232\231\231\231\231YU@\000\000\000\000\000`U@ffffffU@\315\314\314\314\314lU@33333sU@\232\231\231\231\231yU@\000\000\000\000\000\200U@fffff\206U@\315\314\314\314\314\214U@33333\223U@\232\231\231\231\231\231U@\000\000\000\000\000\240U@fffff\246U@\315\314\314\314\314\254U@33333\263U@\232\231\231\231\231\271U@\000\000\000\000\000\300U@fffff\306U@\315\314\314\314\314\314U@33333\323U@\232\231\231\231\231\331U@\000\000\000\000\000\340U@fffff\346U@\315\314\314\314\314\354U@33333\363U@\232\231\231\231\231\371U@\000\000\000\000\000\000V@fffff\006V@\315\314\314\314\314\014V@33333\023V@\232\231\231\231\231\031V@\000\000\000\000\000 V@fffff&V@\315\314\314\314\314,V@333333V@\232\231\231\231\2319V@\000\000\000\000\000@V@fffffFV@\315\314\314\314\314LV@33333SV@\232\231\231\231\231YV@\000\000\000\000\000`V@ffffffV@\315\314\314\314\314lV@33333sV@\232\231\231\231\231yV@\000\000\000\000\000\200V@fffff\206V@\315\314\314\314\314\214V@33333\223V@\232\231\231\231\231\231V@\000\000\000\000\000\240V@fffff\246V@\315\314\314\314\314\254V@33333\263V@\232\231\231\231\231\271V@\000\000\000\000\000\300V@fffff\306V@\315\314\314\314\314\314V@33333\323V@\232\231\231\231\231\331V@\000\000\000\000\000\340V@fffff\346V@\315\314\314\314\314\354V@33333\363V@\232\231\231\231\231\371V@\000\000\000\000\000\000W@fffff\006W@\315\314\314\314\314\014W@33333\023W@\232\231\231\231\231\031W@\000\000\000\000\000 W@fffff&W@\315\314\314\314\314,W@333333W@\232\231\231\231\2319W@\000\000\000\000\000@W@fffffFW@\315\314\314\314\314LW@33333SW@\232\231\231\231\231YW@\000\000\000\000\000`W@ffffffW@\315\314\314\314\314lW@33333sW@\232\231\231\231\231yW@\000\000\000\000\000\200W@fffff\206W@\315\314\314\314\314\214W@33333\223W@\232\231\231\231\231\231W@\000\000\000\000\000\240W@fffff\246W@\315\314\314\314\314\254W@33333\263W@\232\231\231\231\231\271W@\000\000\000\000\000\300W@fffff\306W@\315\314\314\314\314\314W@33333\323W@\232\231\231\231\231\331W@\000\000\000\000\000\340W@fffff\346W@\315\314\314\314\314\354W@33333\363W@\232\231\231\231\231\371W@\000\000\000\000\000\000X@fffff\006X@\315\314\314\314\314\014X@33333\023X@\232\231\231\231\231\031X@\000\000\000\000\000 X@fffff&X@\315\314\314\314\314,X@333333X@\232\231\231\231\2319X@\000\000\000\000\000@X@fffffFX@\315\314\314\314\314LX@33333SX@\232\231\231\231\231YX@\000\000\000\000\000`X@ffffffX@\315\314\314\314\314lX@33333sX@\232\231\231\231\231yX@\000\000\000\000\000\200X@fffff\206X@\315\314\314\314\314\214X@33333\223X@\232\231\231\231\231\231X@\000\000\000\000\000\240X@fffff\246X@\315\314\314\314\314\254X@33333\263X@\232\231\231\231\231\271X@\000\000\000\000\000\300X@fffff\306X@\315\314\314\314\314\314X@33333\323X@\232\231\231\231\231\331X@\000\000\000\000\000\340X@fffff\346X@\315\314\314\314\314\354X@33333\363X@\232\231\231\231\231\371X@\000\000\000\000\000\000Y@fffff\006Y@\315\314\314\314\314\014Y@33333\023Y@\232\231\231\231\231\031Y@\000\000\000\000\000 Y@fffff&Y@\315\314\314\314\314,Y@333333Y@\232\231\231\231\2319Y@\000\000\000\000\000@Y@fffffFY@\315\314\314\314\314LY@33333SY@\232\231\231\231\231YY@\000\000\000\000\000`Y@ffffffY@\315\314\314\314\314lY@33333sY@\232\231\231\231\231yY@\000\000\000\000\000\200Y@fffff\206Y@\315\314\314\314\314\214Y@33333\223Y@\232\231\231\231\231\231Y@\000\000\000\000\000\240Y@fffff\246Y@\315\314\314\314\314\254Y@33333\263Y@\232\231\231\231\231\271Y@\000\000\000\000\000\300Y@fffff\306Y@\315\314\314\314\314\314Y@33333\323Y@\232\231\231\231\231\331Y@\000\000\000\000\000\340Y@fffff\346Y@\315\314\314\314\314\354Y@33333\363Y@\232\231\231\231\231\371Y@\000\000\000\000\000\000Z@fffff\006Z@\315\314\314\314\314\014Z@33333\023Z@\232\231\231\231\231\031Z@\000\000\000\000\000 Z@fffff&Z@\315\314\314\314\314,Z@333333Z@\232\231\231\231\2319Z@\000\000\000\000\000@Z@fffffFZ@\315\314\314\314\314LZ@33333SZ@\232\231\231\231\231YZ@\000\000\000\000\000`Z@ffffffZ@\315\314\314\314\314lZ@33333sZ@\232\231\231\231\231yZ@\000\000\000\000\000\200Z@fffff\206Z@\315\314\314\314\314\214Z@33333\223Z@\232\231\231\231\231\231Z@\000\000\000\000\000\240Z@fffff\246Z@\315\314\314\314\314\254Z@33333\263Z@\232\231\231\231\231\271Z@\000\000\000\000\000\300Z@fffff\306Z@\315\314\314\314\314\314Z@33333\323Z@\232\231\231\231\231\331Z@\000\000\000\000\000\340Z@fffff\346Z@\315\314\314\314\314\354Z@33333\363Z@\232\231\231\231\231\371Z@\000\000\000\000\000\000[@fffff\006[@\315\314\314\314\314\014[@33333\023[@\232\231\231\231\231\031[@\000\000\000\000\000 [@fffff&[@\315\314\314\314\314,[@333333[@\232\231\231\231\2319[@\000\000\000\000\000@[@fffffF[@\315\314\314\314\314L[@33333S[@\232\231\231\231\231Y[@\000\000\000\000\000`[@ffffff[@\315\314\314\314\314l[@33333s[@\232\231\231\231\231y[@\000\000\000\000\000\200[@fffff\206[@\315\314\314\314\314\214[@33333\223[@\232\231\231\231\231\231[@\000\000\000\000\000\240[@fffff\246[@\315\314\314\314\314\254[@33333\263[@\232\231\231\231\231\271[@\000\000\000\000\000\300[@fffff\306[@\315\314\314\314\314\314[@33333\323[@\232\231\231\231\231\331[@\000\000\000\000\000\340[@fffff\346[@\315\314\314\314\314\354[@33333\363[@\232\231\231\231\231\371[@\000\000\000\000\000\000\\@fffff\006\\@\315\314\314\314\314\014\\@33333\023\\@\232\231\231\231\231\031\\@\000\000\000\000\000 \\@fffff&\\@\315\314\314\314\314,\\@333333\\@\232\231\231\231\2319\\@\000\000\000\000\000@\\@fffffF\\@\315\314\314\314\314L\\@33333S\\@\232\231\231\231\231Y\\@\000\000\000\000\000`\\@ffffff\\@\315\314\314\314\314l\\@33333s\\@\232\231\231\231\231y\\@\000\000\000\000\000\200\\@fffff\206\\@\315\314\314\314\314\214\\@33333\223\\@\232\231\231\231\231\231\\@\000\000\000\000\000\240\\@fffff\246\\@\315\314\314\314\314\254\\@33333\263\\@\232\231\231\231\231\271\\@\000\000\000\000\000\300\\@fffff\306\\@\315\314\314\314\314\314\\@33333\323\\@\232\231\231\231\231\331\\@\000\000\000\000\000\340\\@fffff\346\\@\315\314\314\314\314\354\\@33333\363\\@\232\231\231\231\231\371\\@\000\000\000\000\000\000]@fffff\006]@\315\314\314\314\314\014]@33333\023]@\232\231\231\231\231\031]@\000\000\000\000\000 ]@fffff&]@\315\314\314\314\314,]@333333]@\232\231\231\231\2319]@\000\000\000\000\000@]@fffffF]@\315\314\314\314\314L]@33333S]@\232\231\231\231\231Y]@\000\000\000\000\000`]@ffffff]@\315\314\314\314\314l]@33333s]@\232\231\231\231\231y]@\000\000\000\000\000\200]@fffff\206]@\315\314\314\314\314\214]@33333\223]@\232\231\231\231\231\231]@\000\000\000\000\000\240]@fffff\246]@\315\314\314\314\314\254]@33333\263]@\232\231\231\231\231\271]@\000\000\000\000\000\300]@fffff\306]@\315\314\314\314\314\314]@33333\323]@\232\231\231\231\231\331]@\000\000\000\000\000\340]@fffff\346]@\315\314\314\314\314\354]@33333\363]@\232\231\231\231\231\371]@\000\000\000\000\000\000^@fffff\006^@\315\314\314\314\314\014^@33333\023^@\232\231\231\231\231\031^@\000\000\000\000\000 ^@fffff&^@\315\314\314\314\314,^@333333^@\232\231\231\231\2319^@\000\000\000\000\000@^@fffffF^@\315\314\314\314\314L^@33333S^@\232\231\231\231\231Y^@\000\000\000\000\000`^@ffffff^@\315\314\314\314\314l^@33333s^@\232\231\231\231\231y^@\000\000\000\000\000\200^@fffff\206^@\315\314\314\314\314\214^@33333\223^@\232\231\231\231\231\231^@\000\000\000\000\000\240^@fffff\246^@\315\314\314\314\314\254^@33333\263^@\232\231\231\231\231\271^@\000\000\000\000\000\300^@fffff\306^@\315\314\314\314\314\314^@33333\323^@\232\231\231\231\231\331^@\000\000\000\000\000\340^@fffff\346^@\315\314\314\314\314\354^@33333\363^@\232\231\231\231\231\371^@\000\000\000\000\000\000_@fffff\006_@\315\314\314\314\314\014_@33333\023_@\232\231\231\231\231\031_@\000\000\000\000\000 _@fffff&_@\315\314\314\314\314,_@333333_@\232\231\231\231\2319_@\000\000\000\000\000@_@fffffF_@\315\314\314\314\314L_@33333S_@\232\231\231\231\231Y_@\000\000\000\000\000`_@ffffff_@\315\314\314\314\314l_@33333s_@\232\231\231\231\231y_@\000\000\000\000\000\200_@fffff\206_@\315\314\314\314\314\214_@33333\223_@\232\231\231\231\231\231_@\000\000\000\000\000\240_@fffff\246_@\315\314\314\314\314\254_@33333\263_@\232\231\231\231\231\271_@\000\000\000\000\000\300_@fffff\306_@\315\314\314\314\314\314_@33333\323_@\232\231\231\231\231\331_@\000\000\000\000\000\340_@fffff\346_@\315\314\314\314\314\354_@33333\363_@\232\231\231\231\231\371_@\000\000\000\000\000\000`@33333\003`@fffff\006`@\232\231\231\231\231\t`@\315\314\314\314\314\014`@\000\000\000\000\000\020`@33333\023`@fffff\026`@\232\231\231\231\231\031`@\315\314\314\314\314\034`@\000\000\000\000\000 `@33333#`@fffff&`@\232\231\231\231\231)`@\315\314\314\314\314,`@\000\000\000\000\0000`@333333`@fffff6`@\232\231\231\231\2319`@\315\314\314\314\314<`@\000\000\000\000\000@`@33333C`@fffffF`@\232\231\231\231\231I`@\315\314\314\314\314L`@\000\000\000\000\000P`@33333S`@fffffV`@\232\231\231\231\231Y`@\315\314\314\314\314\\`@\000\000\000\000\000``@33333c`@ffffff`@\232\231\231\231\231i`@\315\314\314\314\314l`@\000\000\000\000\000p`@33333s`@fffffv`@\232\231\231\231\231y`@\315\314\314\314\314|`@\000\000\000\000\000\200`@33333\203`@fffff\206`@\232\231\231\231\231\211`@\315\314\314\314\314\214`@\000\000\000\000\000\220`@33333\223`@fffff\226`@\232\231\231\231\231\231`@\315\314\314\314\314\234`@\000\000\000\000\000\240`@33333\243`@fffff\246`@\232\231\231\231\231\251`@\315\314\314\314\314\254`@\000\000\000\000\000\260`@33333\263`@fffff\266`@\232\231\231\231\231\271`@\315\314\314\314\314\274`@\000\000\000\000\000\300`@33333\303`@fffff\306`@\232\231\231\231\231\311`@\315\314\314\314\314\314`@\000\000\000\000\000\320`@33333\323`@fffff\326`@\232\231\231\231\231\331`@\315\314\314\314\314\334`@\000\000\000\000\000\340`@33333\343`@fffff\346`@\232\231\231\231\231\351`@\315\314\314\314\314\354`@\000\000\000\000\000\360`@33333\363`@fffff\366`@\232\231\231\231\231\371`@\315\314\314\314\314\374`@\000\000\000\000\000\000a@33333\003a@fffff\006a@\232\231\231\231\231\ta@\315\314\314\314\314\014a@\000\000\000\000\000\020a@33333\023a@fffff\026a@\232\231\231\231\231\031a@\315\314\314\314\314\034a@\000\000\000\000\000 a@33333#a@fffff&a@\232\231\231\231\231)a@\315\314\314\314\314,a@\000\000\000\000\0000a@333333a@fffff6a@\232\231\231\231\2319a@\315\314\314\314\314<a@\000\000\000\000\000@a@33333Ca@fffffFa@\232\231\231\231\231Ia@\315\314\314\314\314La@\000\000\000\000\000Pa@33333Sa@fffffVa@\232\231\231\231\231Ya@\315\314\314\314\314\\a@\000\000\000\000\000`a@33333ca@ffffffa@\232\231\231\231\231ia@\315\314\314\314\314la@\000\000\000\000\000pa@33333sa@fffffva@\232\231\231\231\231ya@\315\314\314\314\314|a@\000\000\000\000\000\200a@33333\203a@fffff\206a@\232\231\231\231\231\211a@\315\314\314\314\314\214a@\000\000\000\000\000\220a@33333\223a@fffff\226a@\232\231\231\231\231\231a@\315\314\314\314\314\234a@\000\000\000\000\000\240a@33333\243a@fffff\246a@\232\231\231\231\231\251a@\315\314\314\314\314\254a@\000\000\000\000\000\260a@33333\263a@fffff\266a@\232\231\231\231\231\271a@\315\314\314\314\314\274a@\000\000\000\000\000\300a@33333\303a@fffff\306a@\232\231\231\231\231\311a@\315\314\314\314\314\314a@\000\000\000\000\000\320a@33333\323a@fffff\326a@\232\231\231\231\231\331a@\315\314\314\314\314\334a@\000\000\000\000\000\340a@33333\343a@fffff\346a@\232\231\231\231\231\351a@\315\314\314\314\314\354a@\000\000\000\000\000\360a@33333\363a@fffff\366a@\232\231\231\231\231\371a@\315\314\314\314\314\374a@\000\000\000\000\000\000b@33333\003b@fffff\006b@\232\231\231\231\231\tb@\315\314\314\314\314\014b@\000\000\000\000\000\020b@33333\023b@fffff\026b@\232\231\231\231\231\031b@\315\314\314\314\314\034b@\000\000\000\000\000 b@33333#b@fffff&b@\232\231\231\231\231)b@\315\314\314\314\314,b@\000\000\000\000\0000b@333333b@fffff6b@\232\231\231\231\2319b@\315\314\314\314\314<b@\000\000\000\000\000@b@33333Cb@fffffFb@\232\231\231\231\231Ib@\315\314\314\314\314Lb@\000\000\000\000\000Pb@33333Sb@fffffVb@\232\231\231\231\231Yb@\315\314\314\314\314\\b@\000\000\000\000\000`b@33333cb@ffffffb@\232\231\231\231\231ib@\315\314\314\314\314lb@\000\000\000\000\000pb@33333sb@fffffvb@\232\231\231\231\231yb@\315\314\314\314\314|b@\000\000\000\000\000\200b@33333\203b@fffff\206b@\232\231\231\231\231\211b@\315\314\314\314\314\214b@\000\000\000\000\000\220b@33333\223b@fffff\226b@\232\231\231\231\231\231b@\315\314\314\314\314\234b@\000\000\000\000\000\240b@33333\243b@fffff\246b@\232\231\231\231\231\251b@\315\314\314\314\314\254b@\000\000\000\000\000\260b@33333\263b@fffff\266b@\232\231\231\231\231\271b@\315\314\314\314\314\274b@\000\000\000\000\000\300b@33333\303b@fffff\306b@\232\231\231\231\231\311b@\315\314\314\314\314\314b@\000\000\000\000\000\320b@33333\323b@fffff\326b@\232\231\231\231\231\331b@\315\314\314\314\314\334b@\000\000\000\000\000\340b@33333\343b@fffff\346b@\232\231\231\231\231\351b@\315\314\314\314\314\354b@\000\000\000\000\000\360b@33333\363b@fffff\366b@\232\231\231\231\231\371b@\315\314\314\314\314\374b@\000\000\000\000\000\000c@33333\003c@fffff\006c@\232\231\231\231\231\tc@\315\314\314\314\314\014c@\000\000\000\000\000\020c@33333\023c@fffff\026c@\232\231\231\231\231\031c@\315\314\314\314\314\034c@\000\000\000\000\000 c@33333#c@fffff&c@\232\231\231\231\231)c@\315\314\314\314\314,c@\000\000\000\000\0000c@333333c@fffff6c@\232\231\231\231\2319c@\315\314\314\314\314<c@\000\000\000\000\000@c@33333Cc@fffffFc@\232\231\231\231\231Ic@\315\314\314\314\314Lc@\000\000\000\000\000Pc@33333Sc@fffffVc@\232\231\231\231\231Yc@\315\314\314\314\314\\c@\000\000\000\000\000`c@33333cc@ffffffc@\232\231\231\231\231ic@\315\314\314\314\314lc@\000\000\000\000\000pc@33333sc@fffffvc@\232\231\231\231\231yc@\315\314\314\314\314|c@\000\000\000\000\000\200c@33333\203c@fffff\206c@\232\231\231\231\231\211c@\315\314\314\314\314\214c@\000\000\000\000\000\220c@33333\223c@fffff\226c@\232\231\231\231\231\231c@\315\314\314\314\314\234c@\000\000\000\000\000\240c@33333\243c@fffff\246c@\232\231\231\231\231\251c@\315\314\314\314\314\254c@\000\000\000\000\000\260c@33333\263c@fffff\266c@\232\231\231\231\231\271c@\315\314\314\314\314\274c@\000\000\000\000\000\300c@33333\303c@fffff\306c@\232\231\231\231\231\311c@\315\314\314\314\314\314c@\000\000\000\000\000\320c@33333\323c@fffff\326c@\232\231\231\231\231\331c@\315\314\314\314\314\334c@\000\000\000\000\000\340c@33333\343c@fffff\346c@\232\231\231\231\231\351c@\315\314\314\314\314\354c@\000\000\000\000\000\360c@33333\363c@fffff\366c@\232\231\231\231\231\371c@\315\314\314\314\314\374c@\000\000\000\000\000\000d@33333\003d@fffff\006d@\232\231\231\231\231\td@\315\314\314\314\314\014d@\000\000\000\000\000\020d@33333\023d@fffff\026d@\232\231\231\231\231\031d@\315\314\314\314\314\034d@\000\000\000\000\000 d@33333#d@fffff&d@\232\231\231\231\231)d@\315\314\314\314\314,d@\000\000\000\000\0000d@333333d@fffff6d@\232\231\231\231\2319d@\315\314\314\314\314<d@\000\000\000\000\000@d@33333Cd@fffffFd@\232\231\231\231\231Id@\315\314\314\314\314Ld@\000\000\000\000\000Pd@33333Sd@fffffVd@\232\231\231\231\231Yd@\315\314\314\314\314\\d@\000\000\000\000\000`d@33333cd@ffffffd@\232\231\231\231\231id@\315\314\314\314\314ld@\000\000\000\000\000pd@33333sd@fffffvd@\232\231\231\231\231yd@\315\314\314\314\314|d@\000\000\000\000\000\200d@33333\203d@fffff\206d@\232\231\231\231\231\211d@\315\314\314\314\314\214d@\000\000\000\000\000\220d@33333\223d@fffff\226d@\232\231\231\231\231\231d@\315\314\314\314\314\234d@\000\000\000\000\000\240d@33333\243d@fffff\246d@\232\231\231\231\231\251d@\315\314\314\314\314\254d@\000\000\000\000\000\260d@33333\263d@fffff\266d@\232\231\231\231\231\271d@\315\314\314\314\314\274d@\000\000\000\000\000\300d@33333\303d@fffff\306d@\232\231\231\231\231\311d@\315\314\314\314\314\314d@\000\000\000\000\000\320d@33333\323d@fffff\326d@\232\231\231\231\231\331d@\315\314\314\314\314\334d@\000\000\000\000\000\340d@33333\343d@fffff\346d@\232\231\231\231\231\351d@\315\314\314\314\314\354d@\000\000\000\000\000\360d@33333\363d@fffff\366d@\232\231\231\231\231\371d@\315\314\314\314\314\374d@\000\000\000\000\000\000e@33333\003e@fffff\006e@\232\231\231\231\231\te@\315\314\314\314\314\014e@\000\000\000\000\000\020e@33333\023e@fffff\026e@\232\231\231\231\231\031e@\315\314\314\314\314\034e@\000\000\000\000\000 e@33333#e@fffff&e@\232\231\231\231\231)e@\315\314\314\314\314,e@\000\000\000\000\0000e@333333e@fffff6e@\232\231\231\231\2319e@\315\314\314\314\314<e@\000\000\000\000\000@e@33333Ce@fffffFe@\232\231\231\231\231Ie@\315\314\314\314\314Le@\000\000\000\000\000Pe@33333Se@fffffVe@\232\231\231\231\231Ye@\315\314\314\314\314\\e@\000\000\000\000\000`e@33333ce@ffffffe@\232\231\231\231\231ie@\315\314\314\314\314le@\000\000\000\000\000pe@33333se@fffffve@\232\231\231\231\231ye@\315\314\314\314\314|e@\000\000\000\000\000\200e@33333\203e@fffff\206e@\232\231\231\231\231\211e@\315\314\314\314\314\214e@\000\000\000\000\000\220e@33333\223e@fffff\226e@\232\231\231\231\231\231e@\315\314\314\314\314\234e@\000\000\000\000\000\240e@33333\243e@fffff\246e@\232\231\231\231\231\251e@\315\314\314\314\314\254e@\000\000\000\000\000\260e@33333\263e@fffff\266e@\232\231\231\231\231\271e@\315\314\314\314\314\274e@\000\000\000\000\000\300e@33333\303e@fffff\306e@\232\231\231\231\231\311e@\315\314\314\314\314\314e@\000\000\000\000\000\320e@33333\323e@fffff\326e@\232\231\231\231\231\331e@\315\314\314\314\314\334e@\000\000\000\000\000\340e@33333\343e@fffff\346e@\232\231\231\231\231\351e@\315\314\314\314\314\354e@\000\000\000\000\000\360e@33333\363e@fffff\366e@\232\231\231\231\231\371e@\315\314\314\314\314\374e@\000\000\000\000\000\000f@33333\003f@fffff\006f@\232\231\231\231\231\tf@\315\314\314\314\314\014f@\000\000\000\000\000\020f@33333\023f@fffff\026f@\232\231\231\231\231\031f@\315\314\314\314\314\034f@\000\000\000\000\000 f@33333#f@fffff&f@\232\231\231\231\231)f@\315\314\314\314\314,f@\000\000\000\000\0000f@333333f@fffff6f@\232\231\231\231\2319f@\315\314\314\314\314<f@\000\000\000\000\000@f@33333Cf@fffffFf@\232\231\231\231\231If@\315\314\314\314\314Lf@\000\000\000\000\000Pf@33333Sf@fffffVf@\232\231\231\231\231Yf@\315\314\314\314\314\\f@\000\000\000\000\000`f@33333cf@fffffff@\232\231\231\231\231if@\315\314\314\314\314lf@\000\000\000\000\000pf@33333sf@fffffvf@\232\231\231\231\231yf@\315\314\314\314\314|f@\000\000\000\000\000\200f@33333\203f@fffff\206f@\232\231\231\231\231\211f@\315\314\314\314\314\214f@\000\000\000\000\000\220f@33333\223f@fffff\226f@\232\231\231\231\231\231f@\315\314\314\314\314\234f@\000\000\000\000\000\240f@33333\243f@fffff\246f@\232\231\231\231\231\251f@\315\314\314\314\314\254f@\000\000\000\000\000\260f@33333\263f@fffff\266f@\232\231\231\231\231\271f@\315\314\314\314\314\274f@\000\000\000\000\000\300f@33333\303f@fffff\306f@\232\231\231\231\231\311f@\315\314\314\314\314\314f@\000\000\000\000\000\320f@33333\323f@fffff\326f@\232\231\231\231\231\331f@\315\314\314\314\314\334f@\000\000\000\000\000\340f@33333\343f@fffff\346f@\232\231\231\231\231\351f@\315\314\314\314\314\354f@\000\000\000\000\000\360f@33333\363f@fffff\366f@\232\231\231\231\231\371f@\315\314\314\314\314\374f@\000\000\000\000\000\000g@33333\003g@fffff\006g@\232\231\231\231\231\tg@\315\314\314\314\314\014g@\000\000\000\000\000\020g@33333\023g@fffff\026g@\232\231\231\231\231\031g@\315\314\314\314\314\034g@\000\000\000\000\000 g@33333#g@fffff&g@\232\231\231\231\231)g@\315\314\314\314\314,g@\000\000\000\000\0000g@333333g@fffff6g@\232\231\231\231\2319g@\315\314\314\314\314<g@\000\000\000\000\000@g@33333Cg@fffffFg@\232\231\231\231\231Ig@\315\314\314\314\314Lg@\000\000\000\000\000Pg@33333Sg@fffffVg@\232\231\231\231\231Yg@\315\314\314\314\314\\g@\000\000\000\000\000`g@33333cg@ffffffg@\232\231\231\231\231ig@\315\314\314\314\314lg@\000\000\000\000\000pg@33333sg@fffffvg@\232\231\231\231\231yg@\315\314\314\314\314|g@\000\000\000\000\000\200g@33333\203g@fffff\206g@\232\231\231\231\231\211g@\315\314\314\314\314\214g@\000\000\000\000\000\220g@33333\223g@fffff\226g@\232\231\231\231\231\231g@\315\314\314\314\314\234g@\000\000\000\000\000\240g@33333\243g@fffff\246g@\232\231\231\231\231\251g@\315\314\314\314\314\254g@\000\000\000\000\000\260g@33333\263g@fffff\266g@\232\231\231\231\231\271g@\315\314\314\314\314\274g@\000\000\000\000\000\300g@33333\303g@fffff\306g@\232\231\231\231\231\311g@\315\314\314\314\314\314g@\000\000\000\000\000\320g@33333\323g@fffff\326g@\232\231\231\231\231\331g@\315\314\314\314\314\334g@\000\000\000\000\000\340g@33333\343g@fffff\346g@\232\231\231\231\231\351g@\315\314\314\314\314\354g@\000\000\000\000\000\360g@33333\363g@fffff\366g@\232\231\231\231\231\371g@\315\314\314\314\314\374g@\000\000\000\000\000\000h@33333\003h@fffff\006h@\232\231\231\231\231\th@\315\314\314\314\314\014h@\000\000\000\000\000\020h@33333\023h@fffff\026h@\232\231\231\231\231\031h@\315\314\314\314\314\034h@\000\000\000\000\000 h@33333#h@fffff&h@\232\231\231\231\231)h@\315\314\314\314\314,h@\000\000\000\000\0000h@333333h@fffff6h@\232\231\231\231\2319h@\315\314\314\314\314<h@\000\000\000\000\000@h@33333Ch@fffffFh@\232\231\231\231\231Ih@\315\314\314\314\314Lh@\000\000\000\000\000Ph@33333Sh@fffffVh@\232\231\231\231\231Yh@\315\314\314\314\314\\h@\000\000\000\000\000`h@33333ch@ffffffh@\232\231\231\231\231ih@\315\314\314\314\314lh@\000\000\000\000\000ph@33333sh@fffffvh@\232\231\231\231\231yh@\315\314\314\314\314|h@\000\000\000\000\000\200h@33333\203h@fffff\206h@\232\231\231\231\231\211h@\315\314\314\314\314\214h@\000\000\000\000\000\220h@33333\223h@fffff\226h@\232\231\231\231\231\231h@\315\314\314\314\314\234h@\000\000\000\000\000\240h@33333\243h@fffff\246h@\232\231\231\231\231\251h@\315\314\314\314\314\254h@\000\000\000\000\000\260h@33333\263h@fffff\266h@\232\231\231\231\231\271h@\315\314\314\314\314\274h@\000\000\000\000\000\300h@33333\303h@fffff\306h@\232\231\231\231\231\311h@\315\314\314\314\314\314h@\000\000\000\000\000\320h@33333\323h@fffff\326h@\232\231\231\231\231\331h@\315\314\314\314\314\334h@\000\000\000\000\000\340h@33333\343h@fffff\346h@\232\231\231\231\231\351h@\315\314\314\314\314\354h@\000\000\000\000\000\360h@33333\363h@fffff\366h@\232\231\231\231\231\371h@\315\314\314\314\314\374h@\000\000\000\000\000\000i@33333\003i@fffff\006i@\232\231\231\231\231\ti@\315\314\314\314\314\014i@\000\000\000\000\000\020i@33333\023i@fffff\026i@\232\231\231\231\231\031i@\315\314\314\314\314\034i@\000\000\000\000\000 i@33333#i@fffff&i@\232\231\231\231\231)i@\315\314\314\314\314,i@\000\000\000\000\0000i@333333i@fffff6i@\232\231\231\231\2319i@\315\314\314\314\314<i@\000\000\000\000\000@i@33333Ci@fffffFi@\232\231\231\231\231Ii@\315\314\314\314\314Li@\000\000\000\000\000Pi@33333Si@fffffVi@\232\231\231\231\231Yi@\315\314\314\314\314\\i@\000\000\000\000\000`i@33333ci@ffffffi@\232\231\231\231\231ii@\315\314\314\314\314li@\000\000\000\000\000pi@33333si@fffffvi@\232\231\231\231\231yi@\315\314\314\314\314|i@\000\000\000\000\000\200i@33333\203i@fffff\206i@\232\231\231\231\231\211i@\315\314\314\314\314\214i@\000\000\000\000\000\220i@33333\223i@fffff\226i@\232\231\231\231\231\231i@\315\314\314\314\314\234i@\000\000\000\000\000\240i@33333\243i@fffff\246i@\232\231\231\231\231\251i@\315\314\314\314\314\254i@\000\000\000\000\000\260i@33333\263i@fffff\266i@\232\231\231\231\231\271i@\315\314\314\314\314\274i@\000\000\000\000\000\300i@33333\303i@fffff\306i@\232\231\231\231\231\311i@\315\314\314\314\314\314i@\000\000\000\000\000\320i@33333\323i@fffff\326i@\232\231\231\231\231\331i@\315\314\314\314\314\334i@\000\000\000\000\000\340i@33333\343i@fffff\346i@\232\231\231\231\231\351i@\315\314\314\314\314\354i@\000\000\000\000\000\360i@33333\363i@fffff\366i@\232\231\231\231\231\371i@\315\314\314\314\314\374i@\000\000\000\000\000\000j@33333\003j@fffff\006j@\232\231\231\231\231\tj@\315\314\314\314\314\014j@\000\000\000\000\000\020j@33333\023j@fffff\026j@\232\231\231\231\231\031j@\315\314\314\314\314\034j@\000\000\000\000\000 j@33333#j@fffff&j@\232\231\231\231\231)j@\315\314\314\314\314,j@\000\000\000\000\0000j@333333j@fffff6j@\232\231\231\231\2319j@\315\314\314\314\314<j@\000\000\000\000\000@j@33333Cj@fffffFj@\232\231\231\231\231Ij@\315\314\314\314\314Lj@\000\000\000\000\000Pj@33333Sj@fffffVj@\232\231\231\231\231Yj@\315\314\314\314\314\\j@\000\000\000\000\000`j@33333cj@ffffffj@\232\231\231\231\231ij@\315\314\314\314\314lj@\000\000\000\000\000pj@33333sj@fffffvj@\232\231\231\231\231yj@\315\314\314\314\314|j@\000\000\000\000\000\200j@33333\203j@fffff\206j@\232\231\231\231\231\211j@\315\314\314\314\314\214j@\000\000\000\000\000\220j@33333\223j@fffff\226j@\232\231\231\231\231\231j@\315\314\314\314\314\234j@\000\000\000\000\000\240j@33333\243j@fffff\246j@\232\231\231\231\231\251j@\315\314\314\314\314\254j@\000\000\000\000\000\260j@33333\263j@fffff\266j@\232\231\231\231\231\271j@\315\314\314\314\314\274j@\000\000\000\000\000\300j@33333\303j@fffff\306j@\232\231\231\231\231\311j@\315\314\314\314\314\314j@\000\000\000\000\000\320j@33333\323j@fffff\326j@\232\231\231\231\231\331j@\315\314\314\314\314\334j@\000\000\000\000\000\340j@33333\343j@fffff\346j@\232\231\231\231\231\351j@\315\314\314\314\314\354j@\000\000\000\000\000\360j@33333\363j@fffff\366j@\232\231\231\231\231\371j@\315\314\314\314\314\374j@\000\000\000\000\000\000k@33333\003k@fffff\006k@\232\231\231\231\231\tk@\315\314\314\314\314\014k@\000\000\000\000\000\020k@33333\023k@fffff\026k@\232\231\231\231\231\031k@\315\314\314\314\314\034k@\000\000\000\000\000 k@33333#k@fffff&k@\232\231\231\231\231)k@\315\314\314\314\314,k@\000\000\000\000\0000k@333333k@fffff6k@\232\231\231\231\2319k@\315\314\314\314\314<k@\000\000\000\000\000@k@33333Ck@fffffFk@\232\231\231\231\231Ik@\315\314\314\314\314Lk@\000\000\000\000\000Pk@33333Sk@fffffVk@\232\231\231\231\231Yk@\315\314\314\314\314\\k@\000\000\000\000\000`k@33333ck@ffffffk@\232\231\231\231\231ik@\315\314\314\314\314lk@\000\000\000\000\000pk@33333sk@fffffvk@\232\231\231\231\231yk@\315\314\314\314\314|k@\000\000\000\000\000\200k@33333\203k@fffff\206k@\232\231\231\231\231\211k@\315\314\314\314\314\214k@\000\000\000\000\000\220k@33333\223k@fffff\226k@\232\231\231\231\231\231k@\315\314\314\314\314\234k@\000\000\000\000\000\240k@33333\243k@fffff\246k@\232\231\231\231\231\251k@\315\314\314\314\314\254k@\000\000\000\000\000\260k@33333\263k@fffff\266k@\232\231\231\231\231\271k@\315\314\314\314\314\274k@\000\000\000\000\000\300k@33333\303k@fffff\306k@\232\231\231\231\231\311k@\315\314\314\314\314\314k@\000\000\000\000\000\320k@33333\323k@fffff\326k@\232\231\231\231\231\331k@\315\314\314\314\314\334k@\000\000\000\000\000\340k@33333\343k@fffff\346k@\232\231\231\231\231\351k@\315\314\314\314\314\354k@\000\000\000\000\000\360k@33333\363k@fffff\366k@\232\231\231\231\231\371k@\315\314\314\314\314\374k@\000\000\000\000\000\000l@33333\003l@fffff\006l@\232\231\231\231\231\tl@\315\314\314\314\314\014l@\000\000\000\000\000\020l@33333\023l@fffff\026l@\232\231\231\231\231\031l@\315\314\314\314\314\034l@\000\000\000\000\000 l@33333#l@fffff&l@\232\231\231\231\231)l@\315\314\314\314\314,l@\000\000\000\000\0000l@333333l@fffff6l@\232\231\231\231\2319l@\315\314\314\314\314<l@\000\000\000\000\000@l@33333Cl@fffffFl@\232\231\231\231\231Il@\315\314\314\314\314Ll@\000\000\000\000\000Pl@33333Sl@fffffVl@\232\231\231\231\231Yl@\315\314\314\314\314\\l@\000\000\000\000\000`l@33333cl@ffffffl@\232\231\231\231\231il@\315\314\314\314\314ll@\000\000\000\000\000pl@33333sl@fffffvl@\232\231\231\231\231yl@\315\314\314\314\314|l@\000\000\000\000\000\200l@33333\203l@fffff\206l@\232\231\231\231\231\211l@\315\314\314\314\314\214l@\000\000\000\000\000\220l@33333\223l@fffff\226l@\232\231\231\231\231\231l@\315\314\314\314\314\234l@\000\000\000\000\000\240l@33333\243l@fffff\246l@\232\231\231\231\231\251l@\315\314\314\314\314\254l@\000\000\000\000\000\260l@33333\263l@fffff\266l@\232\231\231\231\231\271l@\315\314\314\314\314\274l@\000\000\000\000\000\300l@33333\303l@fffff\306l@\232\231\231\231\231\311l@\315\314\314\314\314\314l@\000\000\000\000\000\320l@33333\323l@fffff\326l@\232\231\231\231\231\331l@\315\314\314\314\314\334l@\000\000\000\000\000\340l@33333\343l@fffff\346l@\232\231\231\231\231\351l@\315\314\314\314\314\354l@\000\000\000\000\000\360l@33333\363l@fffff\366l@\232\231\231\231\231\371l@\315\314\314\314\314\374l@\000\000\000\000\000\000m@33333\003m@fffff\006m@\232\231\231\231\231\tm@\315\314\314\314\314\014m@\000\000\000\000\000\020m@33333\023m@fffff\026m@\232\231\231\231\231\031m@\315\314\314\314\314\034m@\000\000\000\000\000 m@33333#m@fffff&m@\232\231\231\231\231)m@\315\314\314\314\314,m@\000\000\000\000\0000m@333333m@fffff6m@\232\231\231\231\2319m@\315\314\314\314\314<m@\000\000\000\000\000@m@33333Cm@fffffFm@\232\231\231\231\231Im@\315\314\314\314\314Lm@\000\000\000\000\000Pm@33333Sm@fffffVm@\232\231\231\231\231Ym@\315\314\314\314\314\\m@\000\000\000\000\000`m@33333cm@ffffffm@\232\231\231\231\231im@\315\314\314\314\314lm@\000\000\000\000\000pm@33333sm@fffffvm@\232\231\231\231\231ym@\315\314\314\314\314|m@\000\000\000\000\000\200m@33333\203m@fffff\206m@\232\231\231\231\231\211m@\315\314\314\314\314\214m@\000\000\000\000\000\220m@33333\223m@fffff\226m@\232\231\231\231\231\231m@\315\314\314\314\314\234m@\000\000\000\000\000\240m@33333\243m@fffff\246m@\232\231\231\231\231\251m@\315\314\314\314\314\254m@\000\000\000\000\000\260m@33333\263m@fffff\266m@\232\231\231\231\231\271m@\315\314\314\314\314\274m@\000\000\000\000\000\300m@33333\303m@fffff\306m@\232\231\231\231\231\311m@\315\314\314\314\314\314m@\000\000\000\000\000\320m@33333\323m@fffff\326m@\232\231\231\231\231\331m@\315\314\314\314\314\334m@\000\000\000\000\000\340m@33333\343m@fffff\346m@\232\231\231\231\231\351m@\315\314\314\314\314\354m@\000\000\000\000\000\360m@33333\363m@fffff\366m@\232\231\231\231\231\371m@\315\314\314\314\314\374m@\000\000\000\000\000\000n@33333\003n@fffff\006n@\232\231\231\231\231\tn@\315\314\314\314\314\014n@\000\000\000\000\000\020n@33333\023n@fffff\026n@\232\231\231\231\231\031n@\315\314\314\314\314\034n@\000\000\000\000\000 n@33333#n@fffff&n@\232\231\231\231\231)n@\315\314\314\314\314,n@\000\000\000\000\0000n@333333n@fffff6n@\232\231\231\231\2319n@\315\314\314\314\314<n@\000\000\000\000\000@n@33333Cn@fffffFn@\232\231\231\231\231In@\315\314\314\314\314Ln@\000\000\000\000\000Pn@33333Sn@fffffVn@\232\231\231\231\231Yn@\315\314\314\314\314\\n@\000\000\000\000\000`n@33333cn@ffffffn@\232\231\231\231\231in@\315\314\314\314\314ln@\000\000\000\000\000pn@33333sn@fffffvn@\232\231\231\231\231yn@\315\314\314\314\314|n@\000\000\000\000\000\200n@33333\203n@fffff\206n@\232\231\231\231\231\211n@\315\314\314\314\314\214n@\000\000\000\000\000\220n@33333\223n@fffff\226n@\232\231\231\231\231\231n@\315\314\314\314\314\234n@\000\000\000\000\000\240n@33333\243n@fffff\246n@\232\231\231\231\231\251n@\315\314\314\314\314\254n@\000\000\000\000\000\260n@33333\263n@fffff\266n@\232\231\231\231\231\271n@\315\314\314\314\314\274n@\000\000\000\000\000\300n@33333\303n@fffff\306n@\232\231\231\231\231\311n@\315\314\314\314\314\314n@\000\000\000\000\000\320n@33333\323n@fffff\326n@\232\231\231\231\231\331n@\315\314\314\314\314\334n@\000\000\000\000\000\340n@33333\343n@fffff\346n@\232\231\231\231\231\351n@\315\314\314\314\314\354n@\000\000\000\000\000\360n@33333\363n@fffff\366n@\232\231\231\231\231\371n@\315\314\314\314\314\374n@\000\000\000\000\000\000o@33333\003o@fffff\006o@\232\231\231\231\231\to@\315\314\314\314\314\014o@\000\000\000\000\000\020o@33333\023o@fffff\026o@\232\231\231\231\231\031o@\315\314\314\314\314\034o@\000\000\000\000\000 o@33333#o@fffff&o@\232\231\231\231\231)o@\315\314\314\314\314,o@\000\000\000\000\0000o@333333o@fffff6o@\232\231\231\231\2319o@\315\314\314\314\314<o@\000\000\000\000\000@o@33333Co@fffffFo@\232\231\231\231\231Io@\315\314\314\314\314Lo@\000\000\000\000\000Po@33333So@fffffVo@\232\231\231\231\231Yo@\315\314\314\314\314\\o@\000\000\000\000\000`o@33333co@ffffffo@\232\231\231\231\231io@\315\314\314\314\314lo@\000\000\000\000\000po@33333so@fffffvo@\232\231\231\231\231yo@\315\314\314\314\314|o@\000\000\000\000\000\200o@33333\203o@fffff\206o@\232\231\231\231\231\211o@\315\314\314\314\314\214o@\000\000\000\000\000\220o@33333\223o@fffff\226o@\232\231\231\231\231\231o@\315\314\314\314\314\234o@\000\000\000\000\000\240o@33333\243o@fffff\246o@\232\231\231\231\231\251o@\315\314\314\314\314\254o@\000\000\000\000\000\260o@33333\263o@fffff\266o@\232\231\231\231\231\271o@\315\314\314\314\314\274o@\000\000\000\000\000\300o@33333\303o@fffff\306o@\232\231\231\231\231\311o@\315\314\314\314\314\314o@\000\000\000\000\000\320o@33333\323o@fffff\326o@\232\231\231\231\231\331o@\315\314\314\314\314\334o@\000\000\000\000\000\340o@33333\343o@fffff\346o@\232\231\231\231\231\351o@\315\314\314\314\314\354o@\000\000\000\000\000\360o@33333\363o@fffff\366o@\232\231\231\231\231\371o@\315\314\314\314\314\374o@\000\000\000\000\000\000p@\232\231\231\231\231\001p@33333\003p@\315\314\314\314\314\004p@fffff\006p@\000\000\000\000\000\010p@\232\231\231\231\231\tp@33333\013p@\315\314\314\314\314\014p@fffff\016p@\000\000\000\000\000\020p@\232\231\231\231\231\021p@33333\023p@\315\314\314\314\314\024p@fffff\026p@\000\000\000\000\000\030p@\232\231\231\231\231\031p@33333\033p@\315\314\314\314\314\034p@fffff\036p@\000\000\000\000\000 p@\232\231\231\231\231!p@33333#p@\315\314\314\314\314$p@fffff&p@\000\000\000\000\000(p@\232\231\231\231\231)p@33333+p@\315\314\314\314\314,p@fffff.p@\000\000\000\000\0000p@\232\231\231\231\2311p@333333p@\315\314\314\314\3144p@fffff6p@\000\000\000\000\0008p@\232\231\231\231\2319p@33333;p@\315\314\314\314\314<p@fffff>p@\000\000\000\000\000@p@\232\231\231\231\231Ap@33333Cp@\315\314\314\314\314Dp@fffffFp@\000\000\000\000\000Hp@\232\231\231\231\231Ip@33333Kp@\315\314\314\314\314Lp@fffffNp@\000\000\000\000\000Pp@\232\231\231\231\231Qp@33333Sp@\315\314\314\314\314Tp@fffffVp@\000\000\000\000\000Xp@\232\231\231\231\231Yp@33333[p@\315\314\314\314\314\\p@fffff^p@\000\000\000\000\000`p@\232\231\231\231\231ap@33333cp@\315\314\314\314\314dp@ffffffp@\000\000\000\000\000hp@\232\231\231\231\231ip@33333kp@\315\314\314\314\314lp@fffffnp@\000\000\000\000\000pp@\232\231\231\231\231qp@33333sp@\315\314\314\314\314tp@fffffvp@\000\000\000\000\000xp@\232\231\231\231\231yp@33333{p@\315\314\314\314\314|p@fffff~p@\000\000\000\000\000\200p@\232\231\231\231\231\201p@33333\203p@\315\314\314\314\314\204p@fffff\206p@\000\000\000\000\000\210p@\232\231\231\231\231\211p@33333\213p@\315\314\314\314\314\214p@fffff\216p@\000\000\000\000\000\220p@\232\231\231\231\231\221p@33333\223p@\315\314\314\314\314\224p@fffff\226p@\000\000\000\000\000\230p@\232\231\231\231\231\231p@33333\233p@\315\314\314\314\314\234p@fffff\236p@\000\000\000\000\000\240p@\232\231\231\231\231\241p@33333\243p@\315\314\314\314\314\244p@fffff\246p@\000\000\000\000\000\250p@\232\231\231\231\231\251p@33333\253p@\315\314\314\314\314\254p@fffff\256p@\000\000\000\000\000\260p@\232\231\231\231\231\261p@33333\263p@\315\314\314\314\314\264p@fffff\266p@\000\000\000\000\000\270p@\232\231\231\231\231\271p@33333\273p@\315\314\314\314\314\274p@fffff\276p@\000\000\000\000\000\300p@\232\231\231\231\231\301p@33333\303p@\315\314\314\314\314\304p@fffff\306p@\000\000\000\000\000\310p@\232\231\231\231\231\311p@33333\313p@\315\314\314\314\314\314p@fffff\316p@\000\000\000\000\000\320p@\232\231\231\231\231\321p@33333\323p@\315\314\314\314\314\324p@fffff\326p@\000\000\000\000\000\330p@\232\231\231\231\231\331p@33333\333p@\315\314\314\314\314\334p@fffff\336p@\000\000\000\000\000\340p@\232\231\231\231\231\341p@33333\343p@\315\314\314\314\314\344p@fffff\346p@\000\000\000\000\000\350p@\232\231\231\231\231\351p@33333\353p@\315\314\314\314\314\354p@fffff\356p@\000\000\000\000\000\360p@\232\231\231\231\231\361p@33333\363p@\315\314\314\314\314\364p@fffff\366p@\000\000\000\000\000\370p@\232\231\231\231\231\371p@33333\373p@\315\314\314\314\314\374p@fffff\376p@\000\000\000\000\000\000q@\232\231\231\231\231\001q@33333\003q@\315\314\314\314\314\004q@fffff\006q@\000\000\000\000\000\010q@\232\231\231\231\231\tq@33333\013q@\315\314\314\314\314\014q@fffff\016q@\000\000\000\000\000\020q@\232\231\231\231\231\021q@33333\023q@\315\314\314\314\314\024q@fffff\026q@\000\000\000\000\000\030q@\232\231\231\231\231\031q@33333\033q@\315\314\314\314\314\034q@fffff\036q@\000\000\000\000\000 q@\232\231\231\231\231!q@33333#q@\315\314\314\314\314$q@fffff&q@\000\000\000\000\000(q@\232\231\231\231\231)q@33333+q@\315\314\314\314\314,q@fffff.q@\000\000\000\000\0000q@\232\231\231\231\2311q@333333q@\315\314\314\314\3144q@fffff6q@\000\000\000\000\0008q@\232\231\231\231\2319q@33333;q@\315\314\314\314\314<q@fffff>q@\000\000\000\000\000@q@\232\231\231\231\231Aq@33333Cq@\315\314\314\314\314Dq@fffffFq@\000\000\000\000\000Hq@\232\231\231\231\231Iq@33333Kq@\315\314\314\314\314Lq@fffffNq@\000\000\000\000\000Pq@\232\231\231\231\231Qq@33333Sq@\315\314\314\314\314Tq@fffffVq@\000\000\000\000\000Xq@\232\231\231\231\231Yq@33333[q@\315\314\314\314\314\\q@fffff^q@\000\000\000\000\000`q@\232\231\231\231\231aq@33333cq@\315\314\314\314\314dq@ffffffq@\000\000\000\000\000hq@\232\231\231\231\231iq@33333kq@\315\314\314\314\314lq@fffffnq@\000\000\000\000\000pq@\232\231\231\231\231qq@33333sq@\315\314\314\314\314tq@fffffvq@\000\000\000\000\000xq@\232\231\231\231\231yq@33333{q@\315\314\314\314\314|q@fffff~q@\000\000\000\000\000\200q@\232\231\231\231\231\201q@33333\203q@\315\314\314\314\314\204q@fffff\206q@\000\000\000\000\000\210q@\232\231\231\231\231\211q@33333\213q@\315\314\314\314\314\214q@fffff\216q@\000\000\000\000\000\220q@\232\231\231\231\231\221q@33333\223q@\315\314\314\314\314\224q@fffff\226q@\000\000\000\000\000\230q@\232\231\231\231\231\231q@33333\233q@\315\314\314\314\314\234q@fffff\236q@\000\000\000\000\000\240q@\232\231\231\231\231\241q@33333\243q@\315\314\314\314\314\244q@fffff\246q@\000\000\000\000\000\250q@\232\231\231\231\231\251q@33333\253q@\315\314\314\314\314\254q@fffff\256q@\000\000\000\000\000\260q@\232\231\231\231\231\261q@33333\263q@\315\314\314\314\314\264q@fffff\266q@\000\000\000\000\000\270q@\232\231\231\231\231\271q@33333\273q@\315\314\314\314\314\274q@fffff\276q@\000\000\000\000\000\300q@\232\231\231\231\231\301q@33333\303q@\315\314\314\314\314\304q@fffff\306q@\000\000\000\000\000\310q@\232\231\231\231\231\311q@33333\313q@\315\314\314\314\314\314q@fffff\316q@\000\000\000\000\000\320q@\232\231\231\231\231\321q@33333\323q@\315\314\314\314\314\324q@fffff\326q@\000\000\000\000\000\330q@\232\231\231\231\231\331q@33333\333q@\315\314\314\314\314\334q@fffff\336q@\000\000\000\000\000\340q@\232\231\231\231\231\341q@33333\343q@\315\314\314\314\314\344q@fffff\346q@\000\000\000\000\000\350q@\232\231\231\231\231\351q@33333\353q@\315\314\314\314\314\354q@fffff\356q@\000\000\000\000\000\360q@\232\231\231\231\231\361q@33333\363q@\315\314\314\314\314\364q@fffff\366q@\000\000\000\000\000\370q@\232\231\231\231\231\371q@33333\373q@\315\314\314\314\314\374q@fffff\376q@\000\000\000\000\000\000r@\232\231\231\231\231\001r@33333\003r@\315\314\314\314\314\004r@fffff\006r@\000\000\000\000\000\010r@\232\231\231\231\231\tr@33333\013r@\315\314\314\314\314\014r@fffff\016r@\000\000\000\000\000\020r@\232\231\231\231\231\021r@33333\023r@\315\314\314\314\314\024r@fffff\026r@\000\000\000\000\000\030r@\232\231\231\231\231\031r@33333\033r@\315\314\314\314\314\034r@fffff\036r@\000\000\000\000\000 r@\232\231\231\231\231!r@33333#r@\315\314\314\314\314$r@fffff&r@\000\000\000\000\000(r@\232\231\231\231\231)r@33333+r@\315\314\314\314\314,r@fffff.r@\000\000\000\000\0000r@\232\231\231\231\2311r@333333r@\315\314\314\314\3144r@fffff6r@\000\000\000\000\0008r@\232\231\231\231\2319r@33333;r@\315\314\314\314\314<r@fffff>r@\000\000\000\000\000@r@\232\231\231\231\231Ar@33333Cr@\315\314\314\314\314Dr@fffffFr@\000\000\000\000\000Hr@\232\231\231\231\231Ir@33333Kr@\315\314\314\314\314Lr@fffffNr@\000\000\000\000\000Pr@\232\231\231\231\231Qr@33333Sr@\315\314\314\314\314Tr@fffffVr@\000\000\000\000\000Xr@\232\231\231\231\231Yr@33333[r@\315\314\314\314\314\\r@fffff^r@\000\000\000\000\000`r@\232\231\231\231\231ar@33333cr@\315\314\314\314\314dr@ffffffr@\000\000\000\000\000hr@\232\231\231\231\231ir@33333kr@\315\314\314\314\314lr@fffffnr@\000\000\000\000\000pr@\232\231\231\231\231qr@33333sr@\315\314\314\314\314tr@fffffvr@\000\000\000\000\000xr@\232\231\231\231\231yr@33333{r@\315\314\314\314\314|r@fffff~r@\000\000\000\000\000\200r@\232\231\231\231\231\201r@33333\203r@\315\314\314\314\314\204r@fffff\206r@\000\000\000\000\000\210r@\232\231\231\231\231\211r@33333\213r@\315\314\314\314\314\214r@fffff\216r@\000\000\000\000\000\220r@\232\231\231\231\231\221r@33333\223r@\315\314\314\314\314\224r@fffff\226r@\000\000\000\000\000\230r@\232\231\231\231\231\231r@33333\233r@\315\314\314\314\314\234r@fffff\236r@\000\000\000\000\000\240r@\232\231\231\231\231\241r@33333\243r@\315\314\314\314\314\244r@fffff\246r@\000\000\000\000\000\250r@\232\231\231\231\231\251r@33333\253r@\315\314\314\314\314\254r@fffff\256r@\000\000\000\000\000\260r@\232\231\231\231\231\261r@33333\263r@\315\314\314\314\314\264r@fffff\266r@\000\000\000\000\000\270r@\232\231\231\231\231\271r@33333\273r@\315\314\314\314\314\274r@fffff\276r@\000\000\000\000\000\300r@\232\231\231\231\231\301r@33333\303r@\315\314\314\314\314\304r@fffff\306r@\000\000\000\000\000\310r@\232\231\231\231\231\311r@33333\313r@\315\314\314\314\314\314r@fffff\316r@\000\000\000\000\000\320r@\232\231\231\231\231\321r@33333\323r@\315\314\314\314\314\324r@fffff\326r@\000\000\000\000\000\330r@\232\231\231\231\231\331r@33333\333r@\315\314\314\314\314\334r@fffff\336r@\000\000\000\000\000\340r@\232\231\231\231\231\341r@33333\343r@\315\314\314\314\314\344r@fffff\346r@\000\000\000\000\000\350r@\232\231\231\231\231\351r@33333\353r@\315\314\314\314\314\354r@fffff\356r@\000\000\000\000\000\360r@\232\231\231\231\231\361r@33333\363r@\315\314\314\314\314\364r@fffff\366r@\000\000\000\000\000\370r@\232\231\231\231\231\371r@33333\373r@\315\314\314\314\314\374r@fffff\376r@\000\000\000\000\000\000s@\232\231\231\231\231\001s@33333\003s@\315\314\314\314\314\004s@fffff\006s@\000\000\000\000\000\010s@\232\231\231\231\231\ts@33333\013s@\315\314\314\314\314\014s@fffff\016s@\000\000\000\000\000\020s@\232\231\231\231\231\021s@33333\023s@\315\314\314\314\314\024s@fffff\026s@\000\000\000\000\000\030s@\232\231\231\231\231\031s@33333\033s@\315\314\314\314\314\034s@fffff\036s@\000\000\000\000\000 s@\232\231\231\231\231!s@33333#s@\315\314\314\314\314$s@fffff&s@\000\000\000\000\000(s@\232\231\231\231\231)s@33333+s@\315\314\314\314\314,s@fffff.s@\000\000\000\000\0000s@\232\231\231\231\2311s@333333s@\315\314\314\314\3144s@fffff6s@\000\000\000\000\0008s@\232\231\231\231\2319s@33333;s@\315\314\314\314\314<s@fffff>s@\000\000\000\000\000@s@\232\231\231\231\231As@33333Cs@\315\314\314\314\314Ds@fffffFs@\000\000\000\000\000Hs@\232\231\231\231\231Is@33333Ks@\315\314\314\314\314Ls@fffffNs@\000\000\000\000\000Ps@\232\231\231\231\231Qs@33333Ss@\315\314\314\314\314Ts@fffffVs@\000\000\000\000\000Xs@\232\231\231\231\231Ys@33333[s@\315\314\314\314\314\\s@fffff^s@\000\000\000\000\000`s@\232\231\231\231\231as@33333cs@\315\314\314\314\314ds@ffffffs@\000\000\000\000\000hs@\232\231\231\231\231is@33333ks@\315\314\314\314\314ls@fffffns@\000\000\000\000\000ps@\232\231\231\231\231qs@33333ss@\315\314\314\314\314ts@fffffvs@\000\000\000\000\000xs@\232\231\231\231\231ys@33333{s@\315\314\314\314\314|s@fffff~s@\000\000\000\000\000\200s@\232\231\231\231\231\201s@33333\203s@\315\314\314\314\314\204s@fffff\206s@\000\000\000\000\000\210s@\232\231\231\231\231\211s@33333\213s@\315\314\314\314\314\214s@fffff\216s@\000\000\000\000\000\220s@\232\231\231\231\231\221s@33333\223s@\315\314\314\314\314\224s@fffff\226s@\000\000\000\000\000\230s@\232\231\231\231\231\231s@33333\233s@\315\314\314\314\314\234s@fffff\236s@\000\000\000\000\000\240s@\232\231\231\231\231\241s@33333\243s@\315\314\314\314\314\244s@fffff\246s@\000\000\000\000\000\250s@\232\231\231\231\231\251s@33333\253s@\315\314\314\314\314\254s@fffff\256s@\000\000\000\000\000\260s@\232\231\231\231\231\261s@33333\263s@\315\314\314\314\314\264s@fffff\266s@\000\000\000\000\000\270s@\232\231\231\231\231\271s@33333\273s@\315\314\314\314\314\274s@fffff\276s@\000\000\000\000\000\300s@\232\231\231\231\231\301s@33333\303s@\315\314\314\314\314\304s@fffff\306s@\000\000\000\000\000\310s@\232\231\231\231\231\311s@33333\313s@\315\314\314\314\314\314s@fffff\316s@\000\000\000\000\000\320s@\232\231\231\231\231\321s@33333\323s@\315\314\314\314\314\324s@fffff\326s@\000\000\000\000\000\330s@\232\231\231\231\231\331s@33333\333s@\315\314\314\314\314\334s@fffff\336s@\000\000\000\000\000\340s@\232\231\231\231\231\341s@33333\343s@\315\314\314\314\314\344s@fffff\346s@\000\000\000\000\000\350s@\232\231\231\231\231\351s@33333\353s@\315\314\314\314\314\354s@fffff\356s@\000\000\000\000\000\360s@\232\231\231\231\231\361s@33333\363s@\315\314\314\314\314\364s@fffff\366s@\000\000\000\000\000\370s@\232\231\231\231\231\371s@33333\373s@\315\314\314\314\314\374s@fffff\376s@\000\000\000\000\000\000t@\232\231\231\231\231\001t@33333\003t@\315\314\314\314\314\004t@fffff\006t@\000\000\000\000\000\010t@\232\231\231\231\231\tt@33333\013t@\315\314\314\314\314\014t@fffff\016t@\000\000\000\000\000\020t@\232\231\231\231\231\021t@33333\023t@\315\314\314\314\314\024t@fffff\026t@\000\000\000\000\000\030t@\232\231\231\231\231\031t@33333\033t@\315\314\314\314\314\034t@fffff\036t@\000\000\000\000\000 t@\232\231\231\231\231!t@33333#t@\315\314\314\314\314$t@fffff&t@\000\000\000\000\000(t@\232\231\231\231\231)t@33333+t@\315\314\314\314\314,t@fffff.t@\000\000\000\000\0000t@\232\231\231\231\2311t@333333t@\315\314\314\314\3144t@fffff6t@\000\000\000\000\0008t@\232\231\231\231\2319t@33333;t@\315\314\314\314\314<t@fffff>t@\000\000\000\000\000@t@\232\231\231\231\231At@33333Ct@\315\314\314\314\314Dt@fffffFt@\000\000\000\000\000Ht@\232\231\231\231\231It@33333Kt@\315\314\314\314\314Lt@fffffNt@\000\000\000\000\000Pt@\232\231\231\231\231Qt@33333St@\315\314\314\314\314Tt@fffffVt@\000\000\000\000\000Xt@\232\231\231\231\231Yt@33333[t@\315\314\314\314\314\\t@fffff^t@\000\000\000\000\000`t@\232\231\231\231\231at@33333ct@\315\314\314\314\314dt@fffffft@\000\000\000\000\000ht@\232\231\231\231\231it@33333kt@\315\314\314\314\314lt@fffffnt@\000\000\000\000\000pt@\232\231\231\231\231qt@33333st@\315\314\314\314\314tt@fffffvt@\000\000\000\000\000xt@\232\231\231\231\231yt@33333{t@\315\314\314\314\314|t@fffff~t@\000\000\000\000\000\200t@\232\231\231\231\231\201t@33333\203t@\315\314\314\314\314\204t@fffff\206t@\000\000\000\000\000\210t@\232\231\231\231\231\211t@33333\213t@\315\314\314\314\314\214t@fffff\216t@\000\000\000\000\000\220t@\232\231\231\231\231\221t@33333\223t@\315\314\314\314\314\224t@fffff\226t@\000\000\000\000\000\230t@\232\231\231\231\231\231t@33333\233t@\315\314\314\314\314\234t@fffff\236t@\000\000\000\000\000\240t@\232\231\231\231\231\241t@33333\243t@\315\314\314\314\314\244t@fffff\246t@\000\000\000\000\000\250t@\232\231\231\231\231\251t@33333\253t@\315\314\314\314\314\254t@fffff\256t@\000\000\000\000\000\260t@\232\231\231\231\231\261t@33333\263t@\315\314\314\314\314\264t@fffff\266t@\000\000\000\000\000\270t@\232\231\231\231\231\271t@33333\273t@\315\314\314\314\314\274t@fffff\276t@\000\000\000\000\000\300t@\232\231\231\231\231\301t@33333\303t@\315\314\314\314\314\304t@fffff\306t@\000\000\000\000\000\310t@\232\231\231\231\231\311t@33333\313t@\315\314\314\314\314\314t@fffff\316t@\000\000\000\000\000\320t@\232\231\231\231\231\321t@33333\323t@\315\314\314\314\314\324t@fffff\326t@\000\000\000\000\000\330t@\232\231\231\231\231\331t@33333\333t@\315\314\314\314\314\334t@fffff\336t@\000\000\000\000\000\340t@\232\231\231\231\231\341t@33333\343t@\315\314\314\314\314\344t@fffff\346t@\000\000\000\000\000\350t@\232\231\231\231\231\351t@33333\353t@\315\314\314\314\314\354t@fffff\356t@\000\000\000\000\000\360t@\232\231\231\231\231\361t@33333\363t@\315\314\314\314\314\364t@fffff\366t@\000\000\000\000\000\370t@\232\231\231\231\231\371t@33333\373t@\315\314\314\314\314\374t@fffff\376t@\000\000\000\000\000\000u@\232\231\231\231\231\001u@33333\003u@\315\314\314\314\314\004u@fffff\006u@\000\000\000\000\000\010u@\232\231\231\231\231\tu@33333\013u@\315\314\314\314\314\014u@fffff\016u@\000\000\000\000\000\020u@\232\231\231\231\231\021u@33333\023u@\315\314\314\314\314\024u@fffff\026u@\000\000\000\000\000\030u@\232\231\231\231\231\031u@33333\033u@\315\314\314\314\314\034u@fffff\036u@\000\000\000\000\000 u@\232\231\231\231\231!u@33333#u@\315\314\314\314\314$u@fffff&u@\000\000\000\000\000(u@\232\231\231\231\231)u@33333+u@\315\314\314\314\314,u@fffff.u@\000\000\000\000\0000u@\232\231\231\231\2311u@333333u@\315\314\314\314\3144u@fffff6u@\000\000\000\000\0008u@\232\231\231\231\2319u@33333;u@\315\314\314\314\314<u@fffff>u@\000\000\000\000\000@u@\232\231\231\231\231Au@33333Cu@\315\314\314\314\314Du@fffffFu@\000\000\000\000\000Hu@\232\231\231\231\231Iu@33333Ku@\315\314\314\314\314Lu@fffffNu@\000\000\000\000\000Pu@\232\231\231\231\231Qu@33333Su@\315\314\314\314\314Tu@fffffVu@\000\000\000\000\000Xu@\232\231\231\231\231Yu@33333[u@\315\314\314\314\314\\u@fffff^u@\000\000\000\000\000`u@\232\231\231\231\231au@33333cu@\315\314\314\314\314du@ffffffu@\000\000\000\000\000hu@\232\231\231\231\231iu@33333ku@\315\314\314\314\314lu@fffffnu@\000\000\000\000\000pu@\232\231\231\231\231qu@33333su@\315\314\314\314\314tu@fffffvu@\000\000\000\000\000xu@\232\231\231\231\231yu@33333{u@\315\314\314\314\314|u@fffff~u@\000\000\000\000\000\200u@\232\231\231\231\231\201u@33333\203u@\315\314\314\314\314\204u@fffff\206u@\000\000\000\000\000\210u@\232\231\231\231\231\211u@33333\213u@\315\314\314\314\314\214u@fffff\216u@\000\000\000\000\000\220u@\232\231\231\231\231\221u@33333\223u@\315\314\314\314\314\224u@fffff\226u@\000\000\000\000\000\230u@\232\231\231\231\231\231u@33333\233u@\315\314\314\314\314\234u@fffff\236u@\000\000\000\000\000\240u@\232\231\231\231\231\241u@33333\243u@\315\314\314\314\314\244u@fffff\246u@\000\000\000\000\000\250u@\232\231\231\231\231\251u@33333\253u@\315\314\314\314\314\254u@fffff\256u@\000\000\000\000\000\260u@\232\231\231\231\231\261u@33333\263u@\315\314\314\314\314\264u@fffff\266u@\000\000\000\000\000\270u@\232\231\231\231\231\271u@33333\273u@\315\314\314\314\314\274u@fffff\276u@\000\000\000\000\000\300u@\232\231\231\231\231\301u@33333\303u@\315\314\314\314\314\304u@fffff\306u@\000\000\000\000\000\310u@\232\231\231\231\231\311u@33333\313u@\315\314\314\314\314\314u@fffff\316u@\000\000\000\000\000\320u@\232\231\231\231\231\321u@33333\323u@\315\314\314\314\314\324u@fffff\326u@\000\000\000\000\000\330u@\232\231\231\231\231\331u@33333\333u@\315\314\314\314\314\334u@fffff\336u@\000\000\000\000\000\340u@\232\231\231\231\231\341u@33333\343u@\315\314\314\314\314\344u@fffff\346u@\000\000\000\000\000\350u@\232\231\231\231\231\351u@33333\353u@\315\314\314\314\314\354u@fffff\356u@\000\000\000\000\000\360u@\232\231\231\231\231\361u@33333\363u@\315\314\314\314\314\364u@fffff\366u@\000\000\000\000\000\370u@\232\231\231\231\231\371u@33333\373u@\315\314\314\314\314\374u@fffff\376u@\000\000\000\000\000\000v@\232\231\231\231\231\001v@33333\003v@\315\314\314\314\314\004v@fffff\006v@\000\000\000\000\000\010v@\232\231\231\231\231\tv@33333\013v@\315\314\314\314\314\014v@fffff\016v@\000\000\000\000\000\020v@\232\231\231\231\231\021v@33333\023v@\315\314\314\314\314\024v@fffff\026v@\000\000\000\000\000\030v@\232\231\231\231\231\031v@33333\033v@\315\314\314\314\314\034v@fffff\036v@\000\000\000\000\000 v@\232\231\231\231\231!v@33333#v@\315\314\314\314\314$v@fffff&v@\000\000\000\000\000(v@\232\231\231\231\231)v@33333+v@\315\314\314\314\314,v@fffff.v@\000\000\000\000\0000v@\232\231\231\231\2311v@333333v@\315\314\314\314\3144v@fffff6v@\000\000\000\000\0008v@\232\231\231\231\2319v@33333;v@\315\314\314\314\314<v@fffff>v@\000\000\000\000\000@v@\232\231\231\231\231Av@33333Cv@\315\314\314\314\314Dv@fffffFv@\000\000\000\000\000Hv@\232\231\231\231\231Iv@33333Kv@\315\314\314\314\314Lv@fffffNv@\000\000\000\000\000Pv@\232\231\231\231\231Qv@33333Sv@\315\314\314\314\314Tv@fffffVv@\000\000\000\000\000Xv@\232\231\231\231\231Yv@33333[v@\315\314\314\314\314\\v@fffff^v@\000\000\000\000\000`v@\232\231\231\231\231av@33333cv@\315\314\314\314\314dv@ffffffv@\000\000\000\000\000hv@\232\231\231\231\231iv@33333kv@\315\314\314\314\314lv@fffffnv@\000\000\000\000\000pv@\232\231\231\231\231qv@33333sv@\315\314\314\314\314tv@fffffvv@\000\000\000\000\000xv@\232\231\231\231\231yv@33333{v@\315\314\314\314\314|v@fffff~v@"
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3599
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3599
          }
        }
        tensor_content: "}\303\344:h\303d;s\222\253;\016\303\344;\276\371\016<\330\221+<\321)H<\241\301d<\242\254\200<Y\370\216<\364C\235<p\217\253<\312\332\271<\376%\310<\nq\326<\354\273\344<\237\006\363<\221\250\000=\271\315\007=\306\362\016=\267\027\026=\211<\035=<a$=\316\205+=>\2522=\212\3169=\262\362@=\262\026H=\213:O=:^V=\277\201]=\027\245d=B\310k=>\353r=\t\016z=Q\230\200=\204)\204=\234\272\207=\232K\213={\334\216=@m\222=\350\375\225=r\216\231=\336\036\235=*\257\240=U?\244=a\317\247=J_\253=\021\357\256=\266~\262=7\016\266=\223\235\271=\312,\275=\334\273\300=\307J\304=\213\331\307=\'h\313=\233\366\316=\345\204\322=\005\023\326=\372\240\331=\304.\335=b\274\340=\323I\344=\026\327\347=+d\353=\021\361\356=\310}\362=N\n\366=\242\226\371=\305\"\375=[W\000>:\035\002>\376\342\003>\250\250\005>8n\007>\2553\t>\006\371\n>C\276\014>e\203\016>jH\020>R\r\022>\035\322\023>\312\226\025>Z[\027>\313\037\031>\036\344\032>R\250\034>fl\036>[0 >0\364!>\345\267#>y{%>\354>\'>=\002)>m\305*>{\210,>fK.>/\0160>\324\3201>V\2233>\264U5>\356\0277>\003\3328>\363\233:>\276]<>d\037>>\343\340?><\242A>ocC>{$E>_\345F>\033\246H>\260fJ>\034\'L>_\347M>y\247O>jgQ>1\'S>\315\346T>@\246V>\207eX>\243$Z>\224\343[>Y\242]>\361`_>]\037a>\234\335b>\256\233d>\222Yf>H\027h>\317\324i>)\222k>SOm>M\014o>\030\311p>\263\205r>\035Bt>W\376u>`\272w>7vy>\3341{>O\355|>\220\250~>\3171\200><\017\201>\220\354\201>\311\311\202>\351\246\203>\356\203\204>\331`\205>\251=\206>^\032\207>\371\366\207>x\323\210>\334\257\211>$\214\212>Qh\213>bD\214>W \215>0\374\215>\354\327\216>\214\263\217>\017\217\220>vj\221>\277E\222>\353 \223>\372\373\223>\353\326\224>\276\261\225>t\214\226>\014g\227>\205A\230>\340\033\231>\034\366\231>:\320\232>9\252\233>\030\204\234>\331]\235>z7\236>\373\020\237>]\352\237>\237\303\240>\300\234\241>\302u\242>\242N\243>c\'\244>\002\000\245>\201\330\245>\336\260\246>\033\211\247>6a\250>/9\251>\006\021\252>\274\350\252>O\300\253>\300\227\254>\017o\255>:F\256>D\035\257>*\364\257>\355\312\260>\215\241\261>\tx\262>bN\263>\227$\264>\250\372\264>\224\320\265>]\246\266>\001|\267>\200Q\270>\333&\271>\021\374\271>!\321\272>\014\246\273>\322z\274>rO\275>\355#\276>A\370\276>o\314\277>w\240\300>Yt\301>\024H\302>\250\033\303>\025\357\303>[\302\304>z\225\305>qh\306>A;\307>\351\r\310>i\340\310>\301\262\311>\361\204\312>\370V\313>\327(\314>\214\372\314>\031\314\315>}\235\316>\270n\317>\311?\320>\261\020\321>o\341\321>\003\262\322>m\202\323>\254R\324>\302\"\325>\254\362\325>l\302\326>\002\222\327>la\330>\2530\331>\276\377\331>\246\316\332>c\235\333>\363k\334>X:\335>\220\010\336>\234\326\336>|\244\337>/r\340>\265?\341>\016\r\342>:\332\342>9\247\343>\nt\344>\256@\345>$\r\346>l\331\346>\206\245\347>qq\350>/=\351>\275\010\352>\035\324\352>N\237\353>Pj\354>#5\355>\307\377\355>;\312\356>\177\224\357>\224^\360>x(\361>-\362\361>\261\273\362>\004\205\363>\'N\364>\031\027\365>\333\337\365>k\250\366>\312p\367>\3678\370>\363\000\371>\276\310\371>V\220\372>\275W\373>\361\036\374>\363\345\374>\302\254\375>_s\376>\3119\377>\000\000\000?\002c\000?\352\305\000?\271(\001?n\213\001?\t\356\001?\212P\002?\361\262\002?>\025\003?qw\003?\211\331\003?\207;\004?k\235\004?4\377\004?\343`\005?w\302\005?\361#\006?O\205\006?\223\346\006?\274G\007?\312\250\007?\275\t\010?\224j\010?Q\313\010?\362+\t?x\214\t?\342\354\t?1M\n?d\255\n?{\r\013?wm\013?W\315\013?\032-\014?\302\214\014?N\354\014?\276K\r?\022\253\r?I\n\016?di\016?b\310\016?D\'\017?\n\206\017?\262\344\017?>C\020?\255\241\020?\000\000\021?5^\021?N\274\021?I\032\022?\'x\022?\350\325\022?\2133\023?\021\221\023?z\356\023?\305K\024?\363\250\024?\003\006\025?\365b\025?\311\277\025?\200\034\026?\030y\026?\223\325\026?\3571\027?-\216\027?M\352\027?NF\030?2\242\030?\366\375\030?\234Y\031?$\265\031?\215\020\032?\327k\032?\002\307\032?\016\"\033?\374|\033?\312\327\033?y2\034?\t\215\034?z\347\034?\313A\035?\376\233\035?\020\366\035?\003P\036?\327\251\036?\212\003\037?\037]\037?\223\266\037?\347\017 ?\033i ?0\302 ?$\033!?\370s!?\254\314!?@%\"?\263}\"?\006\326\"?8.#?J\206#?;\336#?\0136$?\273\215$?I\345$?\267<%?\004\224%?0\353%?:B&?$\231&?\354\357&?\223F\'?\030\235\'?|\363\'?\276I(?\337\237(?\337\365(?\274K)?x\241)?\021\367)?\211L*?\337\241*?\023\367*?%L+?\024\241+?\341\365+?\214J,?\025\237,?{\363,?\276G-?\337\233-?\336\357-?\271C.?r\227.?\010\353.?{>/?\313\221/?\370\344/?\00180?\350\2120?\253\3350?L01?\310\2021?\"\3251?W\'2?jy2?X\3132?#\0353?\312n3?M\3003?\255\0214?\350b4?\000\2644?\363\0045?\302U5?n\2465?\364\3665?WG6?\225\2276?\256\3476?\24477?t\2077? \3277?\247&8?\nv8?G\3058?`\0249?Tc9?#\2629?\314\000:?QO:?\260\235:?\352\353:?\3779;?\356\207;?\270\325;?]#<?\334p<?5\276<?i\013=?wX=?_\245=?!\362=?\275>>?4\213>?\204\327>?\256#??\262o??\220\273??G\007@?\331R@?C\236@?\210\351@?\2464A?\235\177A?n\312A?\030\025B?\233_B?\367\251B?-\364B?;>C?#\210C?\344\321C?}\033D?\357dD?;\256D?_\367D?[@E?0\211E?\336\321E?d\032F?\303bF?\372\252F?\n\363F?\361:G?\261\202G?J\312G?\272\021H?\002YH?\"\240H?\033\347H?\353-I?\223tI?\023\273I?j\001J?\231GJ?\240\215J?~\323J?4\031K?\302^K?&\244K?b\351K?v.L?`sL?\"\270L?\273\374L?+AM?r\205M?\220\311M?\205\rN?QQN?\363\224N?m\330N?\275\033O?\344^O?\341\241O?\265\344O?_\'P?\340iP?7\254P?e\356P?h0Q?CrQ?\363\263Q?y\365Q?\3266R?\010xR?\021\271R?\357\371R?\243:S?.{S?\215\273S?\303\373S?\316;T?\257{T?f\273T?\362\372T?T:U?\213yU?\227\270U?y\367U?06V?\274tV?\035\263V?T\361V?_/W?@mW?\366\252W?\200\350W?\340%X?\024cX?\036\240X?\373\334X?\256\031Y?5VY?\221\222Y?\302\316Y?\307\nZ?\240FZ?N\202Z?\320\275Z?\'\371Z?R4[?Qo[?$\252[?\314\344[?G\037\\?\227Y\\?\273\223\\?\262\315\\?~\007]?\035A]?\220z]?\327\263]?\362\354]?\340%^?\243^^?8\227^?\242\317^?\336\007_?\357?_?\322w_?\211\257_?\024\347_?q\036`?\242U`?\247\214`?~\303`?)\372`?\2460a?\367fa?\032\235a?\021\323a?\332\010b?w>b?\346sb?(\251b?=\336b?$\023c?\336Gc?k|c?\313\260c?\375\344c?\001\031d?\330Ld?\201\200d?\375\263d?K\347d?k\032e?^Me?\"\200e?\271\262e?#\345e?^\027f?kIf?J{f?\374\254f?\177\336f?\324\017g?\373@g?\364qg?\277\242g?[\323g?\312\003h?\t4h?\033dh?\376\223h?\263\303h?9\363h?\220\"i?\272Qi?\264\200i?\200\257i?\035\336i?\214\014j?\314:j?\335hj?\277\226j?s\304j?\370\361j?M\037k?tLk?lyk?5\246k?\317\322k?9\377k?u+l?\201Wl?^\203l?\r\257l?\213\332l?\333\005m?\3730m?\354[m?\255\206m??\261m?\242\333m?\325\005n?\331/n?\255Yn?Q\203n?\306\254n?\013\326n? \377n?\006(o?\274Po?Cyo?\231\241o?\300\311o?\266\361o?}\031p?\024Ap?{hp?\262\217p?\271\266p?\220\335p?7\004q?\255*q?\364Pq?\nwq?\360\234q?\246\302q?,\350q?\201\rr?\2462r?\233Wr?_|r?\363\240r?W\305r?\212\351r?\214\rs?^1s?\000Us?qxs?\261\233s?\300\276s?\237\341s?N\004t?\313&t?\030It?4kt?\037\215t?\332\256t?c\320t?\274\361t?\344\022u?\3333u?\241Tu?6uu?\232\225u?\315\265u?\317\325u?\237\365u??\025v?\2564v?\353Sv?\367rv?\322\221v?|\260v?\365\316v?<\355v?R\013w?7)w?\352Fw?ldw?\275\201w?\334\236w?\312\273w?\206\330w?\021\365w?j\021x?\222-x?\210Ix?Mex?\340\200x?B\234x?q\267x?p\322x?<\355x?\327\007y?@\"y?x<y?}Vy?Qpy?\363\211y?c\243y?\242\274y?\256\325y?\211\356y?2\007z?\251\037z?\3567z?\001Pz?\342gz?\221\177z?\016\227z?Y\256z?r\305z?X\334z?\r\363z?\220\t{?\341\037{?\3775{?\353K{?\245a{?-w{?\203\214{?\247\241{?\230\266{?W\313{?\344\337{?>\364{?g\010|?\\\034|? 0|?\261C|?\020W|?<j|?7}|?\376\217|?\224\242|?\366\264|?\'\307|?%\331|?\360\352|?\211\374|?\357\r}?#\037}?%0}?\364@}?\220Q}?\372a}?1r}?5\202}?\007\222}?\247\241}?\023\261}?M\300}?U\317}?)\336}?\313\354}?;\373}?w\t~?\201\027~?X%~?\3752~?o@~?\255M~?\272Z~?\223g~?:t~?\255\200~?\356\214~?\375\230~?\330\244~?\201\260~?\366\273~?9\307~?I\322~?&\335~?\320\347~?H\362~?\214\374~?\236\006\177?|\020\177?(\032\177?\241#\177?\347,\177?\3715\177?\331>\177?\206G\177?\000P\177?GX\177?\\`\177?=h\177?\353o\177?fw\177?\256~\177?\303\205\177?\245\214\177?T\223\177?\320\231\177?\031\240\177?/\246\177?\022\254\177?\302\261\177??\267\177?\211\274\177?\240\301\177?\204\306\177?4\313\177?\262\317\177?\374\323\177?\024\330\177?\370\333\177?\251\337\177?(\343\177?s\346\177?\213\351\177?p\354\177?\"\357\177?\240\361\177?\354\363\177?\005\366\177?\352\367\177?\235\371\177?\034\373\177?h\374\177?\201\375\177?g\376\177?\032\377\177?\232\377\177?\346\377\177?\000\000\200?\346\377\177?\232\377\177?\032\377\177?g\376\177?\201\375\177?h\374\177?\034\373\177?\235\371\177?\352\367\177?\005\366\177?\354\363\177?\240\361\177?\"\357\177?p\354\177?\213\351\177?s\346\177?(\343\177?\251\337\177?\370\333\177?\024\330\177?\374\323\177?\262\317\177?4\313\177?\204\306\177?\240\301\177?\211\274\177??\267\177?\302\261\177?\022\254\177?/\246\177?\031\240\177?\320\231\177?T\223\177?\245\214\177?\303\205\177?\256~\177?fw\177?\353o\177?=h\177?\\`\177?GX\177?\000P\177?\206G\177?\331>\177?\3715\177?\347,\177?\241#\177?(\032\177?|\020\177?\236\006\177?\214\374~?H\362~?\320\347~?&\335~?I\322~?9\307~?\366\273~?\201\260~?\330\244~?\375\230~?\356\214~?\255\200~?:t~?\223g~?\272Z~?\255M~?o@~?\3752~?X%~?\201\027~?w\t~?;\373}?\313\354}?)\336}?U\317}?M\300}?\023\261}?\247\241}?\007\222}?5\202}?1r}?\372a}?\220Q}?\364@}?%0}?#\037}?\357\r}?\211\374|?\360\352|?%\331|?\'\307|?\366\264|?\224\242|?\376\217|?7}|?<j|?\020W|?\261C|? 0|?\\\034|?g\010|?>\364{?\344\337{?W\313{?\230\266{?\247\241{?\203\214{?-w{?\245a{?\353K{?\3775{?\341\037{?\220\t{?\r\363z?X\334z?r\305z?Y\256z?\016\227z?\221\177z?\342gz?\001Pz?\3567z?\251\037z?2\007z?\211\356y?\256\325y?\242\274y?c\243y?\363\211y?Qpy?}Vy?x<y?@\"y?\327\007y?<\355x?p\322x?q\267x?B\234x?\340\200x?Mex?\210Ix?\222-x?j\021x?\021\365w?\206\330w?\312\273w?\334\236w?\275\201w?ldw?\352Fw?7)w?R\013w?<\355v?\365\316v?|\260v?\322\221v?\367rv?\353Sv?\2564v??\025v?\237\365u?\317\325u?\315\265u?\232\225u?6uu?\241Tu?\3333u?\344\022u?\274\361t?c\320t?\332\256t?\037\215t?4kt?\030It?\313&t?N\004t?\237\341s?\300\276s?\261\233s?qxs?\000Us?^1s?\214\rs?\212\351r?W\305r?\363\240r?_|r?\233Wr?\2462r?\201\rr?,\350q?\246\302q?\360\234q?\nwq?\364Pq?\255*q?7\004q?\220\335p?\271\266p?\262\217p?{hp?\024Ap?}\031p?\266\361o?\300\311o?\231\241o?Cyo?\274Po?\006(o? \377n?\013\326n?\306\254n?Q\203n?\255Yn?\331/n?\325\005n?\242\333m??\261m?\255\206m?\354[m?\3730m?\333\005m?\213\332l?\r\257l?^\203l?\201Wl?u+l?9\377k?\317\322k?5\246k?lyk?tLk?M\037k?\370\361j?s\304j?\277\226j?\335hj?\314:j?\214\014j?\035\336i?\200\257i?\264\200i?\272Qi?\220\"i?9\363h?\263\303h?\376\223h?\033dh?\t4h?\312\003h?[\323g?\277\242g?\364qg?\373@g?\324\017g?\177\336f?\374\254f?J{f?kIf?^\027f?#\345e?\271\262e?\"\200e?^Me?k\032e?K\347d?\375\263d?\201\200d?\330Ld?\001\031d?\375\344c?\313\260c?k|c?\336Gc?$\023c?=\336b?(\251b?\346sb?w>b?\332\010b?\021\323a?\032\235a?\367fa?\2460a?)\372`?~\303`?\247\214`?\242U`?q\036`?\024\347_?\211\257_?\322w_?\357?_?\336\007_?\242\317^?8\227^?\243^^?\340%^?\362\354]?\327\263]?\220z]?\035A]?~\007]?\262\315\\?\273\223\\?\227Y\\?G\037\\?\314\344[?$\252[?Qo[?R4[?\'\371Z?\320\275Z?N\202Z?\240FZ?\307\nZ?\302\316Y?\221\222Y?5VY?\256\031Y?\373\334X?\036\240X?\024cX?\340%X?\200\350W?\366\252W?@mW?_/W?T\361V?\035\263V?\274tV?06V?y\367U?\227\270U?\213yU?T:U?\362\372T?f\273T?\257{T?\316;T?\303\373S?\215\273S?.{S?\243:S?\357\371R?\021\271R?\010xR?\3266R?y\365Q?\363\263Q?CrQ?h0Q?e\356P?7\254P?\340iP?_\'P?\265\344O?\341\241O?\344^O?\275\033O?m\330N?\363\224N?QQN?\205\rN?\220\311M?r\205M?+AM?\273\374L?\"\270L?`sL?v.L?b\351K?&\244K?\302^K?4\031K?~\323J?\240\215J?\231GJ?j\001J?\023\273I?\223tI?\353-I?\033\347H?\"\240H?\002YH?\272\021H?J\312G?\261\202G?\361:G?\n\363F?\372\252F?\303bF?d\032F?\336\321E?0\211E?[@E?_\367D?;\256D?\357dD?}\033D?\344\321C?#\210C?;>C?-\364B?\367\251B?\233_B?\030\025B?n\312A?\235\177A?\2464A?\210\351@?C\236@?\331R@?G\007@?\220\273??\262o??\256#??\204\327>?4\213>?\275>>?!\362=?_\245=?wX=?i\013=?5\276<?\334p<?]#<?\270\325;?\356\207;?\3779;?\352\353:?\260\235:?QO:?\314\000:?#\2629?Tc9?`\0249?G\3058?\nv8?\247&8? \3277?t\2077?\24477?\256\3476?\225\2276?WG6?\364\3665?n\2465?\302U5?\363\0045?\000\2644?\350b4?\255\0214?M\3003?\312n3?#\0353?X\3132?jy2?W\'2?\"\3251?\310\2021?L01?\253\3350?\350\2120?\00180?\370\344/?\313\221/?{>/?\010\353.?r\227.?\271C.?\336\357-?\337\233-?\276G-?{\363,?\025\237,?\214J,?\341\365+?\024\241+?%L+?\023\367*?\337\241*?\211L*?\021\367)?x\241)?\274K)?\337\365(?\337\237(?\276I(?|\363\'?\030\235\'?\223F\'?\354\357&?$\231&?:B&?0\353%?\004\224%?\267<%?I\345$?\273\215$?\0136$?;\336#?J\206#?8.#?\006\326\"?\263}\"?@%\"?\254\314!?\370s!?$\033!?0\302 ?\033i ?\347\017 ?\223\266\037?\037]\037?\212\003\037?\327\251\036?\003P\036?\020\366\035?\376\233\035?\313A\035?z\347\034?\t\215\034?y2\034?\312\327\033?\374|\033?\016\"\033?\002\307\032?\327k\032?\215\020\032?$\265\031?\234Y\031?\366\375\030?2\242\030?NF\030?M\352\027?-\216\027?\3571\027?\223\325\026?\030y\026?\200\034\026?\311\277\025?\365b\025?\003\006\025?\363\250\024?\305K\024?z\356\023?\021\221\023?\2133\023?\350\325\022?\'x\022?I\032\022?N\274\021?5^\021?\000\000\021?\255\241\020?>C\020?\262\344\017?\n\206\017?D\'\017?b\310\016?di\016?I\n\016?\022\253\r?\276K\r?N\354\014?\302\214\014?\032-\014?W\315\013?wm\013?{\r\013?d\255\n?1M\n?\342\354\t?x\214\t?\362+\t?Q\313\010?\224j\010?\275\t\010?\312\250\007?\274G\007?\223\346\006?O\205\006?\361#\006?w\302\005?\343`\005?4\377\004?k\235\004?\207;\004?\211\331\003?qw\003?>\025\003?\361\262\002?\212P\002?\t\356\001?n\213\001?\271(\001?\352\305\000?\002c\000?\000\000\000?\3119\377>_s\376>\302\254\375>\363\345\374>\361\036\374>\275W\373>V\220\372>\276\310\371>\363\000\371>\3678\370>\312p\367>k\250\366>\333\337\365>\031\027\365>\'N\364>\004\205\363>\261\273\362>-\362\361>x(\361>\224^\360>\177\224\357>;\312\356>\307\377\355>#5\355>Pj\354>N\237\353>\035\324\352>\275\010\352>/=\351>qq\350>\206\245\347>l\331\346>$\r\346>\256@\345>\nt\344>9\247\343>:\332\342>\016\r\342>\265?\341>/r\340>|\244\337>\234\326\336>\220\010\336>X:\335>\363k\334>c\235\333>\246\316\332>\276\377\331>\2530\331>la\330>\002\222\327>l\302\326>\254\362\325>\302\"\325>\254R\324>m\202\323>\003\262\322>o\341\321>\261\020\321>\311?\320>\270n\317>}\235\316>\031\314\315>\214\372\314>\327(\314>\370V\313>\361\204\312>\301\262\311>i\340\310>\351\r\310>A;\307>qh\306>z\225\305>[\302\304>\025\357\303>\250\033\303>\024H\302>Yt\301>w\240\300>o\314\277>A\370\276>\355#\276>rO\275>\322z\274>\014\246\273>!\321\272>\021\374\271>\333&\271>\200Q\270>\001|\267>]\246\266>\224\320\265>\250\372\264>\227$\264>bN\263>\tx\262>\215\241\261>\355\312\260>*\364\257>D\035\257>:F\256>\017o\255>\300\227\254>O\300\253>\274\350\252>\006\021\252>/9\251>6a\250>\033\211\247>\336\260\246>\201\330\245>\002\000\245>c\'\244>\242N\243>\302u\242>\300\234\241>\237\303\240>]\352\237>\373\020\237>z7\236>\331]\235>\030\204\234>9\252\233>:\320\232>\034\366\231>\340\033\231>\205A\230>\014g\227>t\214\226>\276\261\225>\353\326\224>\372\373\223>\353 \223>\277E\222>vj\221>\017\217\220>\214\263\217>\354\327\216>0\374\215>W \215>bD\214>Qh\213>$\214\212>\334\257\211>x\323\210>\371\366\207>^\032\207>\251=\206>\331`\205>\356\203\204>\351\246\203>\311\311\202>\220\354\201><\017\201>\3171\200>\220\250~>O\355|>\3341{>7vy>`\272w>W\376u>\035Bt>\263\205r>\030\311p>M\014o>SOm>)\222k>\317\324i>H\027h>\222Yf>\256\233d>\234\335b>]\037a>\361`_>Y\242]>\224\343[>\243$Z>\207eX>@\246V>\315\346T>1\'S>jgQ>y\247O>_\347M>\034\'L>\260fJ>\033\246H>_\345F>{$E>ocC><\242A>\343\340?>d\037>>\276]<>\363\233:>\003\3328>\356\0277>\264U5>V\2233>\324\3201>/\0160>fK.>{\210,>m\305*>=\002)>\354>\'>y{%>\345\267#>0\364!>[0 >fl\036>R\250\034>\036\344\032>\313\037\031>Z[\027>\312\226\025>\035\322\023>R\r\022>jH\020>e\203\016>C\276\014>\006\371\n>\2553\t>8n\007>\250\250\005>\376\342\003>:\035\002>[W\000>\305\"\375=\242\226\371=N\n\366=\310}\362=\021\361\356=+d\353=\026\327\347=\323I\344=b\274\340=\304.\335=\372\240\331=\005\023\326=\345\204\322=\233\366\316=\'h\313=\213\331\307=\307J\304=\334\273\300=\312,\275=\223\235\271=7\016\266=\266~\262=\021\357\256=J_\253=a\317\247=U?\244=*\257\240=\336\036\235=r\216\231=\350\375\225=@m\222={\334\216=\232K\213=\234\272\207=\204)\204=Q\230\200=\t\016z=>\353r=B\310k=\027\245d=\277\201]=:^V=\213:O=\262\026H=\262\362@=\212\3169=>\2522=\316\205+=<a$=\211<\035=\267\027\026=\306\362\016=\271\315\007=\221\250\000=\237\006\363<\354\273\344<\nq\326<\376%\310<\312\332\271<p\217\253<\364C\235<Y\370\216<\242\254\200<\241\301d<\321)H<\330\221+<\276\371\016<\016\303\344;s\222\253;h\303d;}\303\344:tF\351)}\303\344\272h\303d\273s\222\253\273\016\303\344\273\276\371\016\274\330\221+\274\321)H\274\241\301d\274\242\254\200\274Y\370\216\274\364C\235\274p\217\253\274\312\332\271\274\376%\310\274\nq\326\274\354\273\344\274\237\006\363\274\221\250\000\275\271\315\007\275\306\362\016\275\267\027\026\275\211<\035\275<a$\275\316\205+\275>\2522\275\212\3169\275\262\362@\275\262\026H\275\213:O\275:^V\275\277\201]\275\027\245d\275B\310k\275>\353r\275\t\016z\275Q\230\200\275\204)\204\275\234\272\207\275\232K\213\275{\334\216\275@m\222\275\350\375\225\275r\216\231\275\336\036\235\275*\257\240\275U?\244\275a\317\247\275J_\253\275\021\357\256\275\266~\262\2757\016\266\275\223\235\271\275\312,\275\275\334\273\300\275\307J\304\275\213\331\307\275\'h\313\275\233\366\316\275\345\204\322\275\005\023\326\275\372\240\331\275\304.\335\275b\274\340\275\323I\344\275\026\327\347\275+d\353\275\021\361\356\275\310}\362\275N\n\366\275\242\226\371\275\305\"\375\275[W\000\276:\035\002\276\376\342\003\276\250\250\005\2768n\007\276\2553\t\276\006\371\n\276C\276\014\276e\203\016\276jH\020\276R\r\022\276\035\322\023\276\312\226\025\276Z[\027\276\313\037\031\276\036\344\032\276R\250\034\276fl\036\276[0 \2760\364!\276\345\267#\276y{%\276\354>\'\276=\002)\276m\305*\276{\210,\276fK.\276/\0160\276\324\3201\276V\2233\276\264U5\276\356\0277\276\003\3328\276\363\233:\276\276]<\276d\037>\276\343\340?\276<\242A\276ocC\276{$E\276_\345F\276\033\246H\276\260fJ\276\034\'L\276_\347M\276y\247O\276jgQ\2761\'S\276\315\346T\276@\246V\276\207eX\276\243$Z\276\224\343[\276Y\242]\276\361`_\276]\037a\276\234\335b\276\256\233d\276\222Yf\276H\027h\276\317\324i\276)\222k\276SOm\276M\014o\276\030\311p\276\263\205r\276\035Bt\276W\376u\276`\272w\2767vy\276\3341{\276O\355|\276\220\250~\276\3171\200\276<\017\201\276\220\354\201\276\311\311\202\276\351\246\203\276\356\203\204\276\331`\205\276\251=\206\276^\032\207\276\371\366\207\276x\323\210\276\334\257\211\276$\214\212\276Qh\213\276bD\214\276W \215\2760\374\215\276\354\327\216\276\214\263\217\276\017\217\220\276vj\221\276\277E\222\276\353 \223\276\372\373\223\276\353\326\224\276\276\261\225\276t\214\226\276\014g\227\276\205A\230\276\340\033\231\276\034\366\231\276:\320\232\2769\252\233\276\030\204\234\276\331]\235\276z7\236\276\373\020\237\276]\352\237\276\237\303\240\276\300\234\241\276\302u\242\276\242N\243\276c\'\244\276\002\000\245\276\201\330\245\276\336\260\246\276\033\211\247\2766a\250\276/9\251\276\006\021\252\276\274\350\252\276O\300\253\276\300\227\254\276\017o\255\276:F\256\276D\035\257\276*\364\257\276\355\312\260\276\215\241\261\276\tx\262\276bN\263\276\227$\264\276\250\372\264\276\224\320\265\276]\246\266\276\001|\267\276\200Q\270\276\333&\271\276\021\374\271\276!\321\272\276\014\246\273\276\322z\274\276rO\275\276\355#\276\276A\370\276\276o\314\277\276w\240\300\276Yt\301\276\024H\302\276\250\033\303\276\025\357\303\276[\302\304\276z\225\305\276qh\306\276A;\307\276\351\r\310\276i\340\310\276\301\262\311\276\361\204\312\276\370V\313\276\327(\314\276\214\372\314\276\031\314\315\276}\235\316\276\270n\317\276\311?\320\276\261\020\321\276o\341\321\276\003\262\322\276m\202\323\276\254R\324\276\302\"\325\276\254\362\325\276l\302\326\276\002\222\327\276la\330\276\2530\331\276\276\377\331\276\246\316\332\276c\235\333\276\363k\334\276X:\335\276\220\010\336\276\234\326\336\276|\244\337\276/r\340\276\265?\341\276\016\r\342\276:\332\342\2769\247\343\276\nt\344\276\256@\345\276$\r\346\276l\331\346\276\206\245\347\276qq\350\276/=\351\276\275\010\352\276\035\324\352\276N\237\353\276Pj\354\276#5\355\276\307\377\355\276;\312\356\276\177\224\357\276\224^\360\276x(\361\276-\362\361\276\261\273\362\276\004\205\363\276\'N\364\276\031\027\365\276\333\337\365\276k\250\366\276\312p\367\276\3678\370\276\363\000\371\276\276\310\371\276V\220\372\276\275W\373\276\361\036\374\276\363\345\374\276\302\254\375\276_s\376\276\3119\377\276\000\000\000\277\002c\000\277\352\305\000\277\271(\001\277n\213\001\277\t\356\001\277\212P\002\277\361\262\002\277>\025\003\277qw\003\277\211\331\003\277\207;\004\277k\235\004\2774\377\004\277\343`\005\277w\302\005\277\361#\006\277O\205\006\277\223\346\006\277\274G\007\277\312\250\007\277\275\t\010\277\224j\010\277Q\313\010\277\362+\t\277x\214\t\277\342\354\t\2771M\n\277d\255\n\277{\r\013\277wm\013\277W\315\013\277\032-\014\277\302\214\014\277N\354\014\277\276K\r\277\022\253\r\277I\n\016\277di\016\277b\310\016\277D\'\017\277\n\206\017\277\262\344\017\277>C\020\277\255\241\020\277\000\000\021\2775^\021\277N\274\021\277I\032\022\277\'x\022\277\350\325\022\277\2133\023\277\021\221\023\277z\356\023\277\305K\024\277\363\250\024\277\003\006\025\277\365b\025\277\311\277\025\277\200\034\026\277\030y\026\277\223\325\026\277\3571\027\277-\216\027\277M\352\027\277NF\030\2772\242\030\277\366\375\030\277\234Y\031\277$\265\031\277\215\020\032\277\327k\032\277\002\307\032\277\016\"\033\277\374|\033\277\312\327\033\277y2\034\277\t\215\034\277z\347\034\277\313A\035\277\376\233\035\277\020\366\035\277\003P\036\277\327\251\036\277\212\003\037\277\037]\037\277\223\266\037\277\347\017 \277\033i \2770\302 \277$\033!\277\370s!\277\254\314!\277@%\"\277\263}\"\277\006\326\"\2778.#\277J\206#\277;\336#\277\0136$\277\273\215$\277I\345$\277\267<%\277\004\224%\2770\353%\277:B&\277$\231&\277\354\357&\277\223F\'\277\030\235\'\277|\363\'\277\276I(\277\337\237(\277\337\365(\277\274K)\277x\241)\277\021\367)\277\211L*\277\337\241*\277\023\367*\277%L+\277\024\241+\277\341\365+\277\214J,\277\025\237,\277{\363,\277\276G-\277\337\233-\277\336\357-\277\271C.\277r\227.\277\010\353.\277{>/\277\313\221/\277\370\344/\277\00180\277\350\2120\277\253\3350\277L01\277\310\2021\277\"\3251\277W\'2\277jy2\277X\3132\277#\0353\277\312n3\277M\3003\277\255\0214\277\350b4\277\000\2644\277\363\0045\277\302U5\277n\2465\277\364\3665\277WG6\277\225\2276\277\256\3476\277\24477\277t\2077\277 \3277\277\247&8\277\nv8\277G\3058\277`\0249\277Tc9\277#\2629\277\314\000:\277QO:\277\260\235:\277\352\353:\277\3779;\277\356\207;\277\270\325;\277]#<\277\334p<\2775\276<\277i\013=\277wX=\277_\245=\277!\362=\277\275>>\2774\213>\277\204\327>\277\256#?\277\262o?\277\220\273?\277G\007@\277\331R@\277C\236@\277\210\351@\277\2464A\277\235\177A\277n\312A\277\030\025B\277\233_B\277\367\251B\277-\364B\277;>C\277#\210C\277\344\321C\277}\033D\277\357dD\277;\256D\277_\367D\277[@E\2770\211E\277\336\321E\277d\032F\277\303bF\277\372\252F\277\n\363F\277\361:G\277\261\202G\277J\312G\277\272\021H\277\002YH\277\"\240H\277\033\347H\277\353-I\277\223tI\277\023\273I\277j\001J\277\231GJ\277\240\215J\277~\323J\2774\031K\277\302^K\277&\244K\277b\351K\277v.L\277`sL\277\"\270L\277\273\374L\277+AM\277r\205M\277\220\311M\277\205\rN\277QQN\277\363\224N\277m\330N\277\275\033O\277\344^O\277\341\241O\277\265\344O\277_\'P\277\340iP\2777\254P\277e\356P\277h0Q\277CrQ\277\363\263Q\277y\365Q\277\3266R\277\010xR\277\021\271R\277\357\371R\277\243:S\277.{S\277\215\273S\277\303\373S\277\316;T\277\257{T\277f\273T\277\362\372T\277T:U\277\213yU\277\227\270U\277y\367U\27706V\277\274tV\277\035\263V\277T\361V\277_/W\277@mW\277\366\252W\277\200\350W\277\340%X\277\024cX\277\036\240X\277\373\334X\277\256\031Y\2775VY\277\221\222Y\277\302\316Y\277\307\nZ\277\240FZ\277N\202Z\277\320\275Z\277\'\371Z\277R4[\277Qo[\277$\252[\277\314\344[\277G\037\\\277\227Y\\\277\273\223\\\277\262\315\\\277~\007]\277\035A]\277\220z]\277\327\263]\277\362\354]\277\340%^\277\243^^\2778\227^\277\242\317^\277\336\007_\277\357?_\277\322w_\277\211\257_\277\024\347_\277q\036`\277\242U`\277\247\214`\277~\303`\277)\372`\277\2460a\277\367fa\277\032\235a\277\021\323a\277\332\010b\277w>b\277\346sb\277(\251b\277=\336b\277$\023c\277\336Gc\277k|c\277\313\260c\277\375\344c\277\001\031d\277\330Ld\277\201\200d\277\375\263d\277K\347d\277k\032e\277^Me\277\"\200e\277\271\262e\277#\345e\277^\027f\277kIf\277J{f\277\374\254f\277\177\336f\277\324\017g\277\373@g\277\364qg\277\277\242g\277[\323g\277\312\003h\277\t4h\277\033dh\277\376\223h\277\263\303h\2779\363h\277\220\"i\277\272Qi\277\264\200i\277\200\257i\277\035\336i\277\214\014j\277\314:j\277\335hj\277\277\226j\277s\304j\277\370\361j\277M\037k\277tLk\277lyk\2775\246k\277\317\322k\2779\377k\277u+l\277\201Wl\277^\203l\277\r\257l\277\213\332l\277\333\005m\277\3730m\277\354[m\277\255\206m\277?\261m\277\242\333m\277\325\005n\277\331/n\277\255Yn\277Q\203n\277\306\254n\277\013\326n\277 \377n\277\006(o\277\274Po\277Cyo\277\231\241o\277\300\311o\277\266\361o\277}\031p\277\024Ap\277{hp\277\262\217p\277\271\266p\277\220\335p\2777\004q\277\255*q\277\364Pq\277\nwq\277\360\234q\277\246\302q\277,\350q\277\201\rr\277\2462r\277\233Wr\277_|r\277\363\240r\277W\305r\277\212\351r\277\214\rs\277^1s\277\000Us\277qxs\277\261\233s\277\300\276s\277\237\341s\277N\004t\277\313&t\277\030It\2774kt\277\037\215t\277\332\256t\277c\320t\277\274\361t\277\344\022u\277\3333u\277\241Tu\2776uu\277\232\225u\277\315\265u\277\317\325u\277\237\365u\277?\025v\277\2564v\277\353Sv\277\367rv\277\322\221v\277|\260v\277\365\316v\277<\355v\277R\013w\2777)w\277\352Fw\277ldw\277\275\201w\277\334\236w\277\312\273w\277\206\330w\277\021\365w\277j\021x\277\222-x\277\210Ix\277Mex\277\340\200x\277B\234x\277q\267x\277p\322x\277<\355x\277\327\007y\277@\"y\277x<y\277}Vy\277Qpy\277\363\211y\277c\243y\277\242\274y\277\256\325y\277\211\356y\2772\007z\277\251\037z\277\3567z\277\001Pz\277\342gz\277\221\177z\277\016\227z\277Y\256z\277r\305z\277X\334z\277\r\363z\277\220\t{\277\341\037{\277\3775{\277\353K{\277\245a{\277-w{\277\203\214{\277\247\241{\277\230\266{\277W\313{\277\344\337{\277>\364{\277g\010|\277\\\034|\277 0|\277\261C|\277\020W|\277<j|\2777}|\277\376\217|\277\224\242|\277\366\264|\277\'\307|\277%\331|\277\360\352|\277\211\374|\277\357\r}\277#\037}\277%0}\277\364@}\277\220Q}\277\372a}\2771r}\2775\202}\277\007\222}\277\247\241}\277\023\261}\277M\300}\277U\317}\277)\336}\277\313\354}\277;\373}\277w\t~\277\201\027~\277X%~\277\3752~\277o@~\277\255M~\277\272Z~\277\223g~\277:t~\277\255\200~\277\356\214~\277\375\230~\277\330\244~\277\201\260~\277\366\273~\2779\307~\277I\322~\277&\335~\277\320\347~\277H\362~\277\214\374~\277\236\006\177\277|\020\177\277(\032\177\277\241#\177\277\347,\177\277\3715\177\277\331>\177\277\206G\177\277\000P\177\277GX\177\277\\`\177\277=h\177\277\353o\177\277fw\177\277\256~\177\277\303\205\177\277\245\214\177\277T\223\177\277\320\231\177\277\031\240\177\277/\246\177\277\022\254\177\277\302\261\177\277?\267\177\277\211\274\177\277\240\301\177\277\204\306\177\2774\313\177\277\262\317\177\277\374\323\177\277\024\330\177\277\370\333\177\277\251\337\177\277(\343\177\277s\346\177\277\213\351\177\277p\354\177\277\"\357\177\277\240\361\177\277\354\363\177\277\005\366\177\277\352\367\177\277\235\371\177\277\034\373\177\277h\374\177\277\201\375\177\277g\376\177\277\032\377\177\277\232\377\177\277\346\377\177\277\000\000\200\277\346\377\177\277\232\377\177\277\032\377\177\277g\376\177\277\201\375\177\277h\374\177\277\034\373\177\277\235\371\177\277\352\367\177\277\005\366\177\277\354\363\177\277\240\361\177\277\"\357\177\277p\354\177\277\213\351\177\277s\346\177\277(\343\177\277\251\337\177\277\370\333\177\277\024\330\177\277\374\323\177\277\262\317\177\2774\313\177\277\204\306\177\277\240\301\177\277\211\274\177\277?\267\177\277\302\261\177\277\022\254\177\277/\246\177\277\031\240\177\277\320\231\177\277T\223\177\277\245\214\177\277\303\205\177\277\256~\177\277fw\177\277\353o\177\277=h\177\277\\`\177\277GX\177\277\000P\177\277\206G\177\277\331>\177\277\3715\177\277\347,\177\277\241#\177\277(\032\177\277|\020\177\277\236\006\177\277\214\374~\277H\362~\277\320\347~\277&\335~\277I\322~\2779\307~\277\366\273~\277\201\260~\277\330\244~\277\375\230~\277\356\214~\277\255\200~\277:t~\277\223g~\277\272Z~\277\255M~\277o@~\277\3752~\277X%~\277\201\027~\277w\t~\277;\373}\277\313\354}\277)\336}\277U\317}\277M\300}\277\023\261}\277\247\241}\277\007\222}\2775\202}\2771r}\277\372a}\277\220Q}\277\364@}\277%0}\277#\037}\277\357\r}\277\211\374|\277\360\352|\277%\331|\277\'\307|\277\366\264|\277\224\242|\277\376\217|\2777}|\277<j|\277\020W|\277\261C|\277 0|\277\\\034|\277g\010|\277>\364{\277\344\337{\277W\313{\277\230\266{\277\247\241{\277\203\214{\277-w{\277\245a{\277\353K{\277\3775{\277\341\037{\277\220\t{\277\r\363z\277X\334z\277r\305z\277Y\256z\277\016\227z\277\221\177z\277\342gz\277\001Pz\277\3567z\277\251\037z\2772\007z\277\211\356y\277\256\325y\277\242\274y\277c\243y\277\363\211y\277Qpy\277}Vy\277x<y\277@\"y\277\327\007y\277<\355x\277p\322x\277q\267x\277B\234x\277\340\200x\277Mex\277\210Ix\277\222-x\277j\021x\277\021\365w\277\206\330w\277\312\273w\277\334\236w\277\275\201w\277ldw\277\352Fw\2777)w\277R\013w\277<\355v\277\365\316v\277|\260v\277\322\221v\277\367rv\277\353Sv\277\2564v\277?\025v\277\237\365u\277\317\325u\277\315\265u\277\232\225u\2776uu\277\241Tu\277\3333u\277\344\022u\277\274\361t\277c\320t\277\332\256t\277\037\215t\2774kt\277\030It\277\313&t\277N\004t\277\237\341s\277\300\276s\277\261\233s\277qxs\277\000Us\277^1s\277\214\rs\277\212\351r\277W\305r\277\363\240r\277_|r\277\233Wr\277\2462r\277\201\rr\277,\350q\277\246\302q\277\360\234q\277\nwq\277\364Pq\277\255*q\2777\004q\277\220\335p\277\271\266p\277\262\217p\277{hp\277\024Ap\277}\031p\277\266\361o\277\300\311o\277\231\241o\277Cyo\277\274Po\277\006(o\277 \377n\277\013\326n\277\306\254n\277Q\203n\277\255Yn\277\331/n\277\325\005n\277\242\333m\277?\261m\277\255\206m\277\354[m\277\3730m\277\333\005m\277\213\332l\277\r\257l\277^\203l\277\201Wl\277u+l\2779\377k\277\317\322k\2775\246k\277lyk\277tLk\277M\037k\277\370\361j\277s\304j\277\277\226j\277\335hj\277\314:j\277\214\014j\277\035\336i\277\200\257i\277\264\200i\277\272Qi\277\220\"i\2779\363h\277\263\303h\277\376\223h\277\033dh\277\t4h\277\312\003h\277[\323g\277\277\242g\277\364qg\277\373@g\277\324\017g\277\177\336f\277\374\254f\277J{f\277kIf\277^\027f\277#\345e\277\271\262e\277\"\200e\277^Me\277k\032e\277K\347d\277\375\263d\277\201\200d\277\330Ld\277\001\031d\277\375\344c\277\313\260c\277k|c\277\336Gc\277$\023c\277=\336b\277(\251b\277\346sb\277w>b\277\332\010b\277\021\323a\277\032\235a\277\367fa\277\2460a\277)\372`\277~\303`\277\247\214`\277\242U`\277q\036`\277\024\347_\277\211\257_\277\322w_\277\357?_\277\336\007_\277\242\317^\2778\227^\277\243^^\277\340%^\277\362\354]\277\327\263]\277\220z]\277\035A]\277~\007]\277\262\315\\\277\273\223\\\277\227Y\\\277G\037\\\277\314\344[\277$\252[\277Qo[\277R4[\277\'\371Z\277\320\275Z\277N\202Z\277\240FZ\277\307\nZ\277\302\316Y\277\221\222Y\2775VY\277\256\031Y\277\373\334X\277\036\240X\277\024cX\277\340%X\277\200\350W\277\366\252W\277@mW\277_/W\277T\361V\277\035\263V\277\274tV\27706V\277y\367U\277\227\270U\277\213yU\277T:U\277\362\372T\277f\273T\277\257{T\277\316;T\277\303\373S\277\215\273S\277.{S\277\243:S\277\357\371R\277\021\271R\277\010xR\277\3266R\277y\365Q\277\363\263Q\277CrQ\277h0Q\277e\356P\2777\254P\277\340iP\277_\'P\277\265\344O\277\341\241O\277\344^O\277\275\033O\277m\330N\277\363\224N\277QQN\277\205\rN\277\220\311M\277r\205M\277+AM\277\273\374L\277\"\270L\277`sL\277v.L\277b\351K\277&\244K\277\302^K\2774\031K\277~\323J\277\240\215J\277\231GJ\277j\001J\277\023\273I\277\223tI\277\353-I\277\033\347H\277\"\240H\277\002YH\277\272\021H\277J\312G\277\261\202G\277\361:G\277\n\363F\277\372\252F\277\303bF\277d\032F\277\336\321E\2770\211E\277[@E\277_\367D\277;\256D\277\357dD\277}\033D\277\344\321C\277#\210C\277;>C\277-\364B\277\367\251B\277\233_B\277\030\025B\277n\312A\277\235\177A\277\2464A\277\210\351@\277C\236@\277\331R@\277G\007@\277\220\273?\277\262o?\277\256#?\277\204\327>\2774\213>\277\275>>\277!\362=\277_\245=\277wX=\277i\013=\2775\276<\277\334p<\277]#<\277\270\325;\277\356\207;\277\3779;\277\352\353:\277\260\235:\277QO:\277\314\000:\277#\2629\277Tc9\277`\0249\277G\3058\277\nv8\277\247&8\277 \3277\277t\2077\277\24477\277\256\3476\277\225\2276\277WG6\277\364\3665\277n\2465\277\302U5\277\363\0045\277\000\2644\277\350b4\277\255\0214\277M\3003\277\312n3\277#\0353\277X\3132\277jy2\277W\'2\277\"\3251\277\310\2021\277L01\277\253\3350\277\350\2120\277\00180\277\370\344/\277\313\221/\277{>/\277\010\353.\277r\227.\277\271C.\277\336\357-\277\337\233-\277\276G-\277{\363,\277\025\237,\277\214J,\277\341\365+\277\024\241+\277%L+\277\023\367*\277\337\241*\277\211L*\277\021\367)\277x\241)\277\274K)\277\337\365(\277\337\237(\277\276I(\277|\363\'\277\030\235\'\277\223F\'\277\354\357&\277$\231&\277:B&\2770\353%\277\004\224%\277\267<%\277I\345$\277\273\215$\277\0136$\277;\336#\277J\206#\2778.#\277\006\326\"\277\263}\"\277@%\"\277\254\314!\277\370s!\277$\033!\2770\302 \277\033i \277\347\017 \277\223\266\037\277\037]\037\277\212\003\037\277\327\251\036\277\003P\036\277\020\366\035\277\376\233\035\277\313A\035\277z\347\034\277\t\215\034\277y2\034\277\312\327\033\277\374|\033\277\016\"\033\277\002\307\032\277\327k\032\277\215\020\032\277$\265\031\277\234Y\031\277\366\375\030\2772\242\030\277NF\030\277M\352\027\277-\216\027\277\3571\027\277\223\325\026\277\030y\026\277\200\034\026\277\311\277\025\277\365b\025\277\003\006\025\277\363\250\024\277\305K\024\277z\356\023\277\021\221\023\277\2133\023\277\350\325\022\277\'x\022\277I\032\022\277N\274\021\2775^\021\277\000\000\021\277\255\241\020\277>C\020\277\262\344\017\277\n\206\017\277D\'\017\277b\310\016\277di\016\277I\n\016\277\022\253\r\277\276K\r\277N\354\014\277\302\214\014\277\032-\014\277W\315\013\277wm\013\277{\r\013\277d\255\n\2771M\n\277\342\354\t\277x\214\t\277\362+\t\277Q\313\010\277\224j\010\277\275\t\010\277\312\250\007\277\274G\007\277\223\346\006\277O\205\006\277\361#\006\277w\302\005\277\343`\005\2774\377\004\277k\235\004\277\207;\004\277\211\331\003\277qw\003\277>\025\003\277\361\262\002\277\212P\002\277\t\356\001\277n\213\001\277\271(\001\277\352\305\000\277\002c\000\277\000\000\000\277\3119\377\276_s\376\276\302\254\375\276\363\345\374\276\361\036\374\276\275W\373\276V\220\372\276\276\310\371\276\363\000\371\276\3678\370\276\312p\367\276k\250\366\276\333\337\365\276\031\027\365\276\'N\364\276\004\205\363\276\261\273\362\276-\362\361\276x(\361\276\224^\360\276\177\224\357\276;\312\356\276\307\377\355\276#5\355\276Pj\354\276N\237\353\276\035\324\352\276\275\010\352\276/=\351\276qq\350\276\206\245\347\276l\331\346\276$\r\346\276\256@\345\276\nt\344\2769\247\343\276:\332\342\276\016\r\342\276\265?\341\276/r\340\276|\244\337\276\234\326\336\276\220\010\336\276X:\335\276\363k\334\276c\235\333\276\246\316\332\276\276\377\331\276\2530\331\276la\330\276\002\222\327\276l\302\326\276\254\362\325\276\302\"\325\276\254R\324\276m\202\323\276\003\262\322\276o\341\321\276\261\020\321\276\311?\320\276\270n\317\276}\235\316\276\031\314\315\276\214\372\314\276\327(\314\276\370V\313\276\361\204\312\276\301\262\311\276i\340\310\276\351\r\310\276A;\307\276qh\306\276z\225\305\276[\302\304\276\025\357\303\276\250\033\303\276\024H\302\276Yt\301\276w\240\300\276o\314\277\276A\370\276\276\355#\276\276rO\275\276\322z\274\276\014\246\273\276!\321\272\276\021\374\271\276\333&\271\276\200Q\270\276\001|\267\276]\246\266\276\224\320\265\276\250\372\264\276\227$\264\276bN\263\276\tx\262\276\215\241\261\276\355\312\260\276*\364\257\276D\035\257\276:F\256\276\017o\255\276\300\227\254\276O\300\253\276\274\350\252\276\006\021\252\276/9\251\2766a\250\276\033\211\247\276\336\260\246\276\201\330\245\276\002\000\245\276c\'\244\276\242N\243\276\302u\242\276\300\234\241\276\237\303\240\276]\352\237\276\373\020\237\276z7\236\276\331]\235\276\030\204\234\2769\252\233\276:\320\232\276\034\366\231\276\340\033\231\276\205A\230\276\014g\227\276t\214\226\276\276\261\225\276\353\326\224\276\372\373\223\276\353 \223\276\277E\222\276vj\221\276\017\217\220\276\214\263\217\276\354\327\216\2760\374\215\276W \215\276bD\214\276Qh\213\276$\214\212\276\334\257\211\276x\323\210\276\371\366\207\276^\032\207\276\251=\206\276\331`\205\276\356\203\204\276\351\246\203\276\311\311\202\276\220\354\201\276<\017\201\276\3171\200\276\220\250~\276O\355|\276\3341{\2767vy\276`\272w\276W\376u\276\035Bt\276\263\205r\276\030\311p\276M\014o\276SOm\276)\222k\276\317\324i\276H\027h\276\222Yf\276\256\233d\276\234\335b\276]\037a\276\361`_\276Y\242]\276\224\343[\276\243$Z\276\207eX\276@\246V\276\315\346T\2761\'S\276jgQ\276y\247O\276_\347M\276\034\'L\276\260fJ\276\033\246H\276_\345F\276{$E\276ocC\276<\242A\276\343\340?\276d\037>\276\276]<\276\363\233:\276\003\3328\276\356\0277\276\264U5\276V\2233\276\324\3201\276/\0160\276fK.\276{\210,\276m\305*\276=\002)\276\354>\'\276y{%\276\345\267#\2760\364!\276[0 \276fl\036\276R\250\034\276\036\344\032\276\313\037\031\276Z[\027\276\312\226\025\276\035\322\023\276R\r\022\276jH\020\276e\203\016\276C\276\014\276\006\371\n\276\2553\t\2768n\007\276\250\250\005\276\376\342\003\276:\035\002\276[W\000\276\305\"\375\275\242\226\371\275N\n\366\275\310}\362\275\021\361\356\275+d\353\275\026\327\347\275\323I\344\275b\274\340\275\304.\335\275\372\240\331\275\005\023\326\275\345\204\322\275\233\366\316\275\'h\313\275\213\331\307\275\307J\304\275\334\273\300\275\312,\275\275\223\235\271\2757\016\266\275\266~\262\275\021\357\256\275J_\253\275a\317\247\275U?\244\275*\257\240\275\336\036\235\275r\216\231\275\350\375\225\275@m\222\275{\334\216\275\232K\213\275\234\272\207\275\204)\204\275Q\230\200\275\t\016z\275>\353r\275B\310k\275\027\245d\275\277\201]\275:^V\275\213:O\275\262\026H\275\262\362@\275\212\3169\275>\2522\275\316\205+\275<a$\275\211<\035\275\267\027\026\275\306\362\016\275\271\315\007\275\221\250\000\275\237\006\363\274\354\273\344\274\nq\326\274\376%\310\274\312\332\271\274p\217\253\274\364C\235\274Y\370\216\274\242\254\200\274\241\301d\274\321)H\274\330\221+\274\276\371\016\274\016\303\344\273s\222\253\273h\303d\273}\303\344\272"
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 5000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 100
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_AnWwC66abRo"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/x/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/x/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/x/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/x/Shape"
  input: "dnn/input_from_feature_columns/input_layer/x/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/x/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/x/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/x/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/x/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/x/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/x/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/x/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/concat_dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "Identity"
  input: "dnn/input_from_feature_columns/input_layer/x/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5345224738121033
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5345224738121033
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Sigmoid"
  op: "Sigmoid"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_0/Sigmoid"
  input: "dnn/zero_fraction/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Mean"
  op: "Mean"
  input: "dnn/zero_fraction/Cast"
  input: "dnn/zero_fraction/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/read"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Sigmoid"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Sigmoid"
  op: "Sigmoid"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Equal"
  op: "Equal"
  input: "dnn/hiddenlayer_1/Sigmoid"
  input: "dnn/zero_fraction_1/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_1/Cast"
  input: "dnn/zero_fraction_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5345224738121033
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5345224738121033
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/read"
  op: "Identity"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/read"
  op: "Identity"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Sigmoid"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/part_0/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/zero"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Equal"
  op: "Equal"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/zero"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Mean"
  op: "Mean"
  input: "dnn/zero_fraction_2/Cast"
  input: "dnn/zero_fraction_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "dnn/head/labels/ExpandDims"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/SquaredDifference"
  op: "SquaredDifference"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/labels"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/mean_squared_error/ToFloat_3/x"
  op: "Const"
  input: "^dnn/head/mean_squared_error/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mean_squared_error/Mul"
  op: "Mul"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  input: "dnn/head/mean_squared_error/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat_1/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/mean_squared_error/Mul"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/mean_squared_error/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/mean_squared_error/ToFloat_3/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/mean_squared_error/SquaredDifference"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/labels"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/scalar"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/sub"
  op: "Sub"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/labels"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/Mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/mul_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Neg"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/tuple/control_dependency"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/mean_squared_error/SquaredDifference_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Sigmoid"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "dnn/hiddenlayer_1/Sigmoid"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/Sigmoid_grad/SigmoidGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Sigmoid_grad/SigmoidGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Sigmoid"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "dnn/hiddenlayer_0/Sigmoid"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Sigmoid_grad/SigmoidGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Sigmoid_grad/SigmoidGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad"
  input: "dnn/head/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad"
  input: "dnn/head/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const_3"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad"
  input: "dnn/head/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad/read"
  op: "Identity"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const_4"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad"
  input: "dnn/head/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const_5"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/ProximalAdagrad"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/ProximalAdagrad/Assign"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/ProximalAdagrad"
  input: "dnn/head/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/ProximalAdagrad/read"
  op: "Identity"
  input: "dnn/dnn/logits/bias/part_0/ProximalAdagrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/l1_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/l2_regularization_strength"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyProximalAdagrad"
  op: "ApplyProximalAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad"
  input: "dnn/head/ProximalAdagrad/learning_rate"
  input: "dnn/head/ProximalAdagrad/l1_regularization_strength"
  input: "dnn/head/ProximalAdagrad/l2_regularization_strength"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyProximalAdagrad"
  op: "ApplyProximalAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad"
  input: "dnn/head/ProximalAdagrad/learning_rate"
  input: "dnn/head/ProximalAdagrad/l1_regularization_strength"
  input: "dnn/head/ProximalAdagrad/l2_regularization_strength"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/update_dnn/hiddenlayer_1/kernel/part_0/ApplyProximalAdagrad"
  op: "ApplyProximalAdagrad"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad"
  input: "dnn/head/ProximalAdagrad/learning_rate"
  input: "dnn/head/ProximalAdagrad/l1_regularization_strength"
  input: "dnn/head/ProximalAdagrad/l2_regularization_strength"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/update_dnn/hiddenlayer_1/bias/part_0/ApplyProximalAdagrad"
  op: "ApplyProximalAdagrad"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad"
  input: "dnn/head/ProximalAdagrad/learning_rate"
  input: "dnn/head/ProximalAdagrad/l1_regularization_strength"
  input: "dnn/head/ProximalAdagrad/l2_regularization_strength"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/update_dnn/logits/kernel/part_0/ApplyProximalAdagrad"
  op: "ApplyProximalAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad"
  input: "dnn/head/ProximalAdagrad/learning_rate"
  input: "dnn/head/ProximalAdagrad/l1_regularization_strength"
  input: "dnn/head/ProximalAdagrad/l2_regularization_strength"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/update_dnn/logits/bias/part_0/ApplyProximalAdagrad"
  op: "ApplyProximalAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/ProximalAdagrad"
  input: "dnn/head/ProximalAdagrad/learning_rate"
  input: "dnn/head/ProximalAdagrad/l1_regularization_strength"
  input: "dnn/head/ProximalAdagrad/l2_regularization_strength"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad/update"
  op: "NoOp"
  input: "^dnn/head/ProximalAdagrad/update_dnn/hiddenlayer_0/bias/part_0/ApplyProximalAdagrad"
  input: "^dnn/head/ProximalAdagrad/update_dnn/hiddenlayer_0/kernel/part_0/ApplyProximalAdagrad"
  input: "^dnn/head/ProximalAdagrad/update_dnn/hiddenlayer_1/bias/part_0/ApplyProximalAdagrad"
  input: "^dnn/head/ProximalAdagrad/update_dnn/hiddenlayer_1/kernel/part_0/ApplyProximalAdagrad"
  input: "^dnn/head/ProximalAdagrad/update_dnn/logits/bias/part_0/ApplyProximalAdagrad"
  input: "^dnn/head/ProximalAdagrad/update_dnn/logits/kernel/part_0/ApplyProximalAdagrad"
}
node {
  name: "dnn/head/ProximalAdagrad/value"
  op: "Const"
  input: "^dnn/head/ProximalAdagrad/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/ProximalAdagrad"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/ProximalAdagrad/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/mean_squared_error/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad/Assign"
  input: "^dnn/dnn/logits/bias/part_0/ProximalAdagrad/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/ProximalAdagrad/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/logits/bias/part_0/ProximalAdagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "dnn/dnn/logits/bias/part_0/ProximalAdagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad"
        string_val: "dnn/dnn/logits/bias/part_0/ProximalAdagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_5c988af413374968ae262e997520523f/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/ProximalAdagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/ProximalAdagrad"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/t_0/ProximalAdagrad"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/ProximalAdagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/ProximalAdagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/ProximalAdagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "20 0,20"
        string_val: "20 0,20"
        string_val: "1 20 0,1:0,20"
        string_val: "1 20 0,1:0,20"
        string_val: "20 0,20"
        string_val: "20 0,20"
        string_val: "20 20 0,20:0,20"
        string_val: "20 20 0,20:0,20"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "20 1 0,20:0,1"
        string_val: "20 1 0,20:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad/read"
  input: "dnn/hiddenlayer_0/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad/read"
  input: "dnn/hiddenlayer_1/bias/part_0/read"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad/read"
  input: "dnn/hiddenlayer_1/kernel/part_0/read"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad/read"
  input: "dnn/logits/bias/part_0/read"
  input: "dnn/dnn/logits/bias/part_0/ProximalAdagrad/read"
  input: "dnn/logits/kernel/part_0/read"
  input: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad/read"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/ProximalAdagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/ProximalAdagrad"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/t_0/ProximalAdagrad"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/ProximalAdagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/ProximalAdagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/ProximalAdagrad"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "20 0,20"
        string_val: "20 0,20"
        string_val: "1 20 0,1:0,20"
        string_val: "1 20 0,1:0,20"
        string_val: "20 0,20"
        string_val: "20 0,20"
        string_val: "20 20 0,20:0,20"
        string_val: "20 20 0,20:0,20"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "20 1 0,20:0,1"
        string_val: "20 1 0,20:0,1"
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/ProximalAdagrad"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/ProximalAdagrad"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/ProximalAdagrad"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/ProximalAdagrad"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 20
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "dnn/logits/bias/part_0"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "dnn/dnn/logits/bias/part_0/ProximalAdagrad"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "dnn/logits/kernel/part_0"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "dnn/dnn/logits/kernel/part_0/ProximalAdagrad"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 20
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "_make_dataset_AnWwC66abRo"
      output_arg {
        name: "repeatdataset"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_DOUBLE
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_DOUBLE
            tensor_shape {
              dim {
                size: 3599
              }
            }
            tensor_content: "\232\231\231\231\231\231\271?\232\231\231\231\231\231\311?333333\323?\232\231\231\231\231\231\331?\000\000\000\000\000\000\340?333333\343?ffffff\346?\232\231\231\231\231\231\351?\315\314\314\314\314\314\354?\000\000\000\000\000\000\360?\232\231\231\231\231\231\361?333333\363?\315\314\314\314\314\314\364?ffffff\366?\000\000\000\000\000\000\370?\232\231\231\231\231\231\371?333333\373?\315\314\314\314\314\314\374?ffffff\376?\000\000\000\000\000\000\000@\315\314\314\314\314\314\000@\232\231\231\231\231\231\001@ffffff\002@333333\003@\000\000\000\000\000\000\004@\315\314\314\314\314\314\004@\232\231\231\231\231\231\005@ffffff\006@333333\007@\000\000\000\000\000\000\010@\315\314\314\314\314\314\010@\232\231\231\231\231\231\t@ffffff\n@333333\013@\000\000\000\000\000\000\014@\315\314\314\314\314\314\014@\232\231\231\231\231\231\r@ffffff\016@333333\017@\000\000\000\000\000\000\020@ffffff\020@\315\314\314\314\314\314\020@333333\021@\232\231\231\231\231\231\021@\000\000\000\000\000\000\022@ffffff\022@\315\314\314\314\314\314\022@333333\023@\232\231\231\231\231\231\023@\000\000\000\000\000\000\024@ffffff\024@\315\314\314\314\314\314\024@333333\025@\232\231\231\231\231\231\025@\000\000\000\000\000\000\026@ffffff\026@\315\314\314\314\314\314\026@333333\027@\232\231\231\231\231\231\027@\000\000\000\000\000\000\030@ffffff\030@\315\314\314\314\314\314\030@333333\031@\232\231\231\231\231\231\031@\000\000\000\000\000\000\032@ffffff\032@\315\314\314\314\314\314\032@333333\033@\232\231\231\231\231\231\033@\000\000\000\000\000\000\034@ffffff\034@\315\314\314\314\314\314\034@333333\035@\232\231\231\231\231\231\035@\000\000\000\000\000\000\036@ffffff\036@\315\314\314\314\314\314\036@333333\037@\232\231\231\231\231\231\037@\000\000\000\000\000\000 @333333 @ffffff @\232\231\231\231\231\231 @\315\314\314\314\314\314 @\000\000\000\000\000\000!@333333!@ffffff!@\232\231\231\231\231\231!@\315\314\314\314\314\314!@\000\000\000\000\000\000\"@333333\"@ffffff\"@\232\231\231\231\231\231\"@\315\314\314\314\314\314\"@\000\000\000\000\000\000#@333333#@ffffff#@\232\231\231\231\231\231#@\315\314\314\314\314\314#@\000\000\000\000\000\000$@333333$@ffffff$@\232\231\231\231\231\231$@\315\314\314\314\314\314$@\000\000\000\000\000\000%@333333%@ffffff%@\232\231\231\231\231\231%@\315\314\314\314\314\314%@\000\000\000\000\000\000&@333333&@ffffff&@\232\231\231\231\231\231&@\315\314\314\314\314\314&@\000\000\000\000\000\000\'@333333\'@ffffff\'@\232\231\231\231\231\231\'@\315\314\314\314\314\314\'@\000\000\000\000\000\000(@333333(@ffffff(@\232\231\231\231\231\231(@\315\314\314\314\314\314(@\000\000\000\000\000\000)@333333)@ffffff)@\232\231\231\231\231\231)@\315\314\314\314\314\314)@\000\000\000\000\000\000*@333333*@ffffff*@\232\231\231\231\231\231*@\315\314\314\314\314\314*@\000\000\000\000\000\000+@333333+@ffffff+@\232\231\231\231\231\231+@\315\314\314\314\314\314+@\000\000\000\000\000\000,@333333,@ffffff,@\232\231\231\231\231\231,@\315\314\314\314\314\314,@\000\000\000\000\000\000-@333333-@ffffff-@\232\231\231\231\231\231-@\315\314\314\314\314\314-@\000\000\000\000\000\000.@333333.@ffffff.@\232\231\231\231\231\231.@\315\314\314\314\314\314.@\000\000\000\000\000\000/@333333/@ffffff/@\232\231\231\231\231\231/@\315\314\314\314\314\314/@\000\000\000\000\000\0000@\232\231\231\231\231\0310@3333330@\315\314\314\314\314L0@ffffff0@\000\000\000\000\000\2000@\232\231\231\231\231\2310@33333\2630@\315\314\314\314\314\3140@fffff\3460@\000\000\000\000\000\0001@\232\231\231\231\231\0311@3333331@\315\314\314\314\314L1@ffffff1@\000\000\000\000\000\2001@\232\231\231\231\231\2311@33333\2631@\315\314\314\314\314\3141@fffff\3461@\000\000\000\000\000\0002@\232\231\231\231\231\0312@3333332@\315\314\314\314\314L2@ffffff2@\000\000\000\000\000\2002@\232\231\231\231\231\2312@33333\2632@\315\314\314\314\314\3142@fffff\3462@\000\000\000\000\000\0003@\232\231\231\231\231\0313@3333333@\315\314\314\314\314L3@ffffff3@\000\000\000\000\000\2003@\232\231\231\231\231\2313@33333\2633@\315\314\314\314\314\3143@fffff\3463@\000\000\000\000\000\0004@\232\231\231\231\231\0314@3333334@\315\314\314\314\314L4@ffffff4@\000\000\000\000\000\2004@\232\231\231\231\231\2314@33333\2634@\315\314\314\314\314\3144@fffff\3464@\000\000\000\000\000\0005@\232\231\231\231\231\0315@3333335@\315\314\314\314\314L5@ffffff5@\000\000\000\000\000\2005@\232\231\231\231\231\2315@33333\2635@\315\314\314\314\314\3145@fffff\3465@\000\000\000\000\000\0006@\232\231\231\231\231\0316@3333336@\315\314\314\314\314L6@ffffff6@\000\000\000\000\000\2006@\232\231\231\231\231\2316@33333\2636@\315\314\314\314\314\3146@fffff\3466@\000\000\000\000\000\0007@\232\231\231\231\231\0317@3333337@\315\314\314\314\314L7@ffffff7@\000\000\000\000\000\2007@\232\231\231\231\231\2317@33333\2637@\315\314\314\314\314\3147@fffff\3467@\000\000\000\000\000\0008@\232\231\231\231\231\0318@3333338@\315\314\314\314\314L8@ffffff8@\000\000\000\000\000\2008@\232\231\231\231\231\2318@33333\2638@\315\314\314\314\314\3148@fffff\3468@\000\000\000\000\000\0009@\232\231\231\231\231\0319@3333339@\315\314\314\314\314L9@ffffff9@\000\000\000\000\000\2009@\232\231\231\231\231\2319@33333\2639@\315\314\314\314\314\3149@fffff\3469@\000\000\000\000\000\000:@\232\231\231\231\231\031:@333333:@\315\314\314\314\314L:@ffffff:@\000\000\000\000\000\200:@\232\231\231\231\231\231:@33333\263:@\315\314\314\314\314\314:@fffff\346:@\000\000\000\000\000\000;@\232\231\231\231\231\031;@333333;@\315\314\314\314\314L;@ffffff;@\000\000\000\000\000\200;@\232\231\231\231\231\231;@33333\263;@\315\314\314\314\314\314;@fffff\346;@\000\000\000\000\000\000<@\232\231\231\231\231\031<@333333<@\315\314\314\314\314L<@ffffff<@\000\000\000\000\000\200<@\232\231\231\231\231\231<@33333\263<@\315\314\314\314\314\314<@fffff\346<@\000\000\000\000\000\000=@\232\231\231\231\231\031=@333333=@\315\314\314\314\314L=@ffffff=@\000\000\000\000\000\200=@\232\231\231\231\231\231=@33333\263=@\315\314\314\314\314\314=@fffff\346=@\000\000\000\000\000\000>@\232\231\231\231\231\031>@333333>@\315\314\314\314\314L>@ffffff>@\000\000\000\000\000\200>@\232\231\231\231\231\231>@33333\263>@\315\314\314\314\314\314>@fffff\346>@\000\000\000\000\000\000?@\232\231\231\231\231\031?@333333?@\315\314\314\314\314L?@ffffff?@\000\000\000\000\000\200?@\232\231\231\231\231\231?@33333\263?@\315\314\314\314\314\314?@fffff\346?@\000\000\000\000\000\000@@\315\314\314\314\314\014@@\232\231\231\231\231\031@@fffff&@@333333@@\000\000\000\000\000@@@\315\314\314\314\314L@@\232\231\231\231\231Y@@ffffff@@33333s@@\000\000\000\000\000\200@@\315\314\314\314\314\214@@\232\231\231\231\231\231@@fffff\246@@33333\263@@\000\000\000\000\000\300@@\315\314\314\314\314\314@@\232\231\231\231\231\331@@fffff\346@@33333\363@@\000\000\000\000\000\000A@\315\314\314\314\314\014A@\232\231\231\231\231\031A@fffff&A@333333A@\000\000\000\000\000@A@\315\314\314\314\314LA@\232\231\231\231\231YA@ffffffA@33333sA@\000\000\000\000\000\200A@\315\314\314\314\314\214A@\232\231\231\231\231\231A@fffff\246A@33333\263A@\000\000\000\000\000\300A@\315\314\314\314\314\314A@\232\231\231\231\231\331A@fffff\346A@33333\363A@\000\000\000\000\000\000B@\315\314\314\314\314\014B@\232\231\231\231\231\031B@fffff&B@333333B@\000\000\000\000\000@B@\315\314\314\314\314LB@\232\231\231\231\231YB@ffffffB@33333sB@\000\000\000\000\000\200B@\315\314\314\314\314\214B@\232\231\231\231\231\231B@fffff\246B@33333\263B@\000\000\000\000\000\300B@\315\314\314\314\314\314B@\232\231\231\231\231\331B@fffff\346B@33333\363B@\000\000\000\000\000\000C@\315\314\314\314\314\014C@\232\231\231\231\231\031C@fffff&C@333333C@\000\000\000\000\000@C@\315\314\314\314\314LC@\232\231\231\231\231YC@ffffffC@33333sC@\000\000\000\000\000\200C@\315\314\314\314\314\214C@\232\231\231\231\231\231C@fffff\246C@33333\263C@\000\000\000\000\000\300C@\315\314\314\314\314\314C@\232\231\231\231\231\331C@fffff\346C@33333\363C@\000\000\000\000\000\000D@\315\314\314\314\314\014D@\232\231\231\231\231\031D@fffff&D@333333D@\000\000\000\000\000@D@\315\314\314\314\314LD@\232\231\231\231\231YD@ffffffD@33333sD@\000\000\000\000\000\200D@\315\314\314\314\314\214D@\232\231\231\231\231\231D@fffff\246D@33333\263D@\000\000\000\000\000\300D@\315\314\314\314\314\314D@\232\231\231\231\231\331D@fffff\346D@33333\363D@\000\000\000\000\000\000E@\315\314\314\314\314\014E@\232\231\231\231\231\031E@fffff&E@333333E@\000\000\000\000\000@E@\315\314\314\314\314LE@\232\231\231\231\231YE@ffffffE@33333sE@\000\000\000\000\000\200E@\315\314\314\314\314\214E@\232\231\231\231\231\231E@fffff\246E@33333\263E@\000\000\000\000\000\300E@\315\314\314\314\314\314E@\232\231\231\231\231\331E@fffff\346E@33333\363E@\000\000\000\000\000\000F@\315\314\314\314\314\014F@\232\231\231\231\231\031F@fffff&F@333333F@\000\000\000\000\000@F@\315\314\314\314\314LF@\232\231\231\231\231YF@ffffffF@33333sF@\000\000\000\000\000\200F@\315\314\314\314\314\214F@\232\231\231\231\231\231F@fffff\246F@33333\263F@\000\000\000\000\000\300F@\315\314\314\314\314\314F@\232\231\231\231\231\331F@fffff\346F@33333\363F@\000\000\000\000\000\000G@\315\314\314\314\314\014G@\232\231\231\231\231\031G@fffff&G@333333G@\000\000\000\000\000@G@\315\314\314\314\314LG@\232\231\231\231\231YG@ffffffG@33333sG@\000\000\000\000\000\200G@\315\314\314\314\314\214G@\232\231\231\231\231\231G@fffff\246G@33333\263G@\000\000\000\000\000\300G@\315\314\314\314\314\314G@\232\231\231\231\231\331G@fffff\346G@33333\363G@\000\000\000\000\000\000H@\315\314\314\314\314\014H@\232\231\231\231\231\031H@fffff&H@333333H@\000\000\000\000\000@H@\315\314\314\314\314LH@\232\231\231\231\231YH@ffffffH@33333sH@\000\000\000\000\000\200H@\315\314\314\314\314\214H@\232\231\231\231\231\231H@fffff\246H@33333\263H@\000\000\000\000\000\300H@\315\314\314\314\314\314H@\232\231\231\231\231\331H@fffff\346H@33333\363H@\000\000\000\000\000\000I@\315\314\314\314\314\014I@\232\231\231\231\231\031I@fffff&I@333333I@\000\000\000\000\000@I@\315\314\314\314\314LI@\232\231\231\231\231YI@ffffffI@33333sI@\000\000\000\000\000\200I@\315\314\314\314\314\214I@\232\231\231\231\231\231I@fffff\246I@33333\263I@\000\000\000\000\000\300I@\315\314\314\314\314\314I@\232\231\231\231\231\331I@fffff\346I@33333\363I@\000\000\000\000\000\000J@\315\314\314\314\314\014J@\232\231\231\231\231\031J@fffff&J@333333J@\000\000\000\000\000@J@\315\314\314\314\314LJ@\232\231\231\231\231YJ@ffffffJ@33333sJ@\000\000\000\000\000\200J@\315\314\314\314\314\214J@\232\231\231\231\231\231J@fffff\246J@33333\263J@\000\000\000\000\000\300J@\315\314\314\314\314\314J@\232\231\231\231\231\331J@fffff\346J@33333\363J@\000\000\000\000\000\000K@\315\314\314\314\314\014K@\232\231\231\231\231\031K@fffff&K@333333K@\000\000\000\000\000@K@\315\314\314\314\314LK@\232\231\231\231\231YK@ffffffK@33333sK@\000\000\000\000\000\200K@\315\314\314\314\314\214K@\232\231\231\231\231\231K@fffff\246K@33333\263K@\000\000\000\000\000\300K@\315\314\314\314\314\314K@\232\231\231\231\231\331K@fffff\346K@33333\363K@\000\000\000\000\000\000L@\315\314\314\314\314\014L@\232\231\231\231\231\031L@fffff&L@333333L@\000\000\000\000\000@L@\315\314\314\314\314LL@\232\231\231\231\231YL@ffffffL@33333sL@\000\000\000\000\000\200L@\315\314\314\314\314\214L@\232\231\231\231\231\231L@fffff\246L@33333\263L@\000\000\000\000\000\300L@\315\314\314\314\314\314L@\232\231\231\231\231\331L@fffff\346L@33333\363L@\000\000\000\000\000\000M@\315\314\314\314\314\014M@\232\231\231\231\231\031M@fffff&M@333333M@\000\000\000\000\000@M@\315\314\314\314\314LM@\232\231\231\231\231YM@ffffffM@33333sM@\000\000\000\000\000\200M@\315\314\314\314\314\214M@\232\231\231\231\231\231M@fffff\246M@33333\263M@\000\000\000\000\000\300M@\315\314\314\314\314\314M@\232\231\231\231\231\331M@fffff\346M@33333\363M@\000\000\000\000\000\000N@\315\314\314\314\314\014N@\232\231\231\231\231\031N@fffff&N@333333N@\000\000\000\000\000@N@\315\314\314\314\314LN@\232\231\231\231\231YN@ffffffN@33333sN@\000\000\000\000\000\200N@\315\314\314\314\314\214N@\232\231\231\231\231\231N@fffff\246N@33333\263N@\000\000\000\000\000\300N@\315\314\314\314\314\314N@\232\231\231\231\231\331N@fffff\346N@33333\363N@\000\000\000\000\000\000O@\315\314\314\314\314\014O@\232\231\231\231\231\031O@fffff&O@333333O@\000\000\000\000\000@O@\315\314\314\314\314LO@\232\231\231\231\231YO@ffffffO@33333sO@\000\000\000\000\000\200O@\315\314\314\314\314\214O@\232\231\231\231\231\231O@fffff\246O@33333\263O@\000\000\000\000\000\300O@\315\314\314\314\314\314O@\232\231\231\231\231\331O@fffff\346O@33333\363O@\000\000\000\000\000\000P@fffff\006P@\315\314\314\314\314\014P@33333\023P@\232\231\231\231\231\031P@\000\000\000\000\000 P@fffff&P@\315\314\314\314\314,P@333333P@\232\231\231\231\2319P@\000\000\000\000\000@P@fffffFP@\315\314\314\314\314LP@33333SP@\232\231\231\231\231YP@\000\000\000\000\000`P@ffffffP@\315\314\314\314\314lP@33333sP@\232\231\231\231\231yP@\000\000\000\000\000\200P@fffff\206P@\315\314\314\314\314\214P@33333\223P@\232\231\231\231\231\231P@\000\000\000\000\000\240P@fffff\246P@\315\314\314\314\314\254P@33333\263P@\232\231\231\231\231\271P@\000\000\000\000\000\300P@fffff\306P@\315\314\314\314\314\314P@33333\323P@\232\231\231\231\231\331P@\000\000\000\000\000\340P@fffff\346P@\315\314\314\314\314\354P@33333\363P@\232\231\231\231\231\371P@\000\000\000\000\000\000Q@fffff\006Q@\315\314\314\314\314\014Q@33333\023Q@\232\231\231\231\231\031Q@\000\000\000\000\000 Q@fffff&Q@\315\314\314\314\314,Q@333333Q@\232\231\231\231\2319Q@\000\000\000\000\000@Q@fffffFQ@\315\314\314\314\314LQ@33333SQ@\232\231\231\231\231YQ@\000\000\000\000\000`Q@ffffffQ@\315\314\314\314\314lQ@33333sQ@\232\231\231\231\231yQ@\000\000\000\000\000\200Q@fffff\206Q@\315\314\314\314\314\214Q@33333\223Q@\232\231\231\231\231\231Q@\000\000\000\000\000\240Q@fffff\246Q@\315\314\314\314\314\254Q@33333\263Q@\232\231\231\231\231\271Q@\000\000\000\000\000\300Q@fffff\306Q@\315\314\314\314\314\314Q@33333\323Q@\232\231\231\231\231\331Q@\000\000\000\000\000\340Q@fffff\346Q@\315\314\314\314\314\354Q@33333\363Q@\232\231\231\231\231\371Q@\000\000\000\000\000\000R@fffff\006R@\315\314\314\314\314\014R@33333\023R@\232\231\231\231\231\031R@\000\000\000\000\000 R@fffff&R@\315\314\314\314\314,R@333333R@\232\231\231\231\2319R@\000\000\000\000\000@R@fffffFR@\315\314\314\314\314LR@33333SR@\232\231\231\231\231YR@\000\000\000\000\000`R@ffffffR@\315\314\314\314\314lR@33333sR@\232\231\231\231\231yR@\000\000\000\000\000\200R@fffff\206R@\315\314\314\314\314\214R@33333\223R@\232\231\231\231\231\231R@\000\000\000\000\000\240R@fffff\246R@\315\314\314\314\314\254R@33333\263R@\232\231\231\231\231\271R@\000\000\000\000\000\300R@fffff\306R@\315\314\314\314\314\314R@33333\323R@\232\231\231\231\231\331R@\000\000\000\000\000\340R@fffff\346R@\315\314\314\314\314\354R@33333\363R@\232\231\231\231\231\371R@\000\000\000\000\000\000S@fffff\006S@\315\314\314\314\314\014S@33333\023S@\232\231\231\231\231\031S@\000\000\000\000\000 S@fffff&S@\315\314\314\314\314,S@333333S@\232\231\231\231\2319S@\000\000\000\000\000@S@fffffFS@\315\314\314\314\314LS@33333SS@\232\231\231\231\231YS@\000\000\000\000\000`S@ffffffS@\315\314\314\314\314lS@33333sS@\232\231\231\231\231yS@\000\000\000\000\000\200S@fffff\206S@\315\314\314\314\314\214S@33333\223S@\232\231\231\231\231\231S@\000\000\000\000\000\240S@fffff\246S@\315\314\314\314\314\254S@33333\263S@\232\231\231\231\231\271S@\000\000\000\000\000\300S@fffff\306S@\315\314\314\314\314\314S@33333\323S@\232\231\231\231\231\331S@\000\000\000\000\000\340S@fffff\346S@\315\314\314\314\314\354S@33333\363S@\232\231\231\231\231\371S@\000\000\000\000\000\000T@fffff\006T@\315\314\314\314\314\014T@33333\023T@\232\231\231\231\231\031T@\000\000\000\000\000 T@fffff&T@\315\314\314\314\314,T@333333T@\232\231\231\231\2319T@\000\000\000\000\000@T@fffffFT@\315\314\314\314\314LT@33333ST@\232\231\231\231\231YT@\000\000\000\000\000`T@ffffffT@\315\314\314\314\314lT@33333sT@\232\231\231\231\231yT@\000\000\000\000\000\200T@fffff\206T@\315\314\314\314\314\214T@33333\223T@\232\231\231\231\231\231T@\000\000\000\000\000\240T@fffff\246T@\315\314\314\314\314\254T@33333\263T@\232\231\231\231\231\271T@\000\000\000\000\000\300T@fffff\306T@\315\314\314\314\314\314T@33333\323T@\232\231\231\231\231\331T@\000\000\000\000\000\340T@fffff\346T@\315\314\314\314\314\354T@33333\363T@\232\231\231\231\231\371T@\000\000\000\000\000\000U@fffff\006U@\315\314\314\314\314\014U@33333\023U@\232\231\231\231\231\031U@\000\000\000\000\000 U@fffff&U@\315\314\314\314\314,U@333333U@\232\231\231\231\2319U@\000\000\000\000\000@U@fffffFU@\315\314\314\314\314LU@33333SU@\232\231\231\231\231YU@\000\000\000\000\000`U@ffffffU@\315\314\314\314\314lU@33333sU@\232\231\231\231\231yU@\000\000\000\000\000\200U@fffff\206U@\315\314\314\314\314\214U@33333\223U@\232\231\231\231\231\231U@\000\000\000\000\000\240U@fffff\246U@\315\314\314\314\314\254U@33333\263U@\232\231\231\231\231\271U@\000\000\000\000\000\300U@fffff\306U@\315\314\314\314\314\314U@33333\323U@\232\231\231\231\231\331U@\000\000\000\000\000\340U@fffff\346U@\315\314\314\314\314\354U@33333\363U@\232\231\231\231\231\371U@\000\000\000\000\000\000V@fffff\006V@\315\314\314\314\314\014V@33333\023V@\232\231\231\231\231\031V@\000\000\000\000\000 V@fffff&V@\315\314\314\314\314,V@333333V@\232\231\231\231\2319V@\000\000\000\000\000@V@fffffFV@\315\314\314\314\314LV@33333SV@\232\231\231\231\231YV@\000\000\000\000\000`V@ffffffV@\315\314\314\314\314lV@33333sV@\232\231\231\231\231yV@\000\000\000\000\000\200V@fffff\206V@\315\314\314\314\314\214V@33333\223V@\232\231\231\231\231\231V@\000\000\000\000\000\240V@fffff\246V@\315\314\314\314\314\254V@33333\263V@\232\231\231\231\231\271V@\000\000\000\000\000\300V@fffff\306V@\315\314\314\314\314\314V@33333\323V@\232\231\231\231\231\331V@\000\000\000\000\000\340V@fffff\346V@\315\314\314\314\314\354V@33333\363V@\232\231\231\231\231\371V@\000\000\000\000\000\000W@fffff\006W@\315\314\314\314\314\014W@33333\023W@\232\231\231\231\231\031W@\000\000\000\000\000 W@fffff&W@\315\314\314\314\314,W@333333W@\232\231\231\231\2319W@\000\000\000\000\000@W@fffffFW@\315\314\314\314\314LW@33333SW@\232\231\231\231\231YW@\000\000\000\000\000`W@ffffffW@\315\314\314\314\314lW@33333sW@\232\231\231\231\231yW@\000\000\000\000\000\200W@fffff\206W@\315\314\314\314\314\214W@33333\223W@\232\231\231\231\231\231W@\000\000\000\000\000\240W@fffff\246W@\315\314\314\314\314\254W@33333\263W@\232\231\231\231\231\271W@\000\000\000\000\000\300W@fffff\306W@\315\314\314\314\314\314W@33333\323W@\232\231\231\231\231\331W@\000\000\000\000\000\340W@fffff\346W@\315\314\314\314\314\354W@33333\363W@\232\231\231\231\231\371W@\000\000\000\000\000\000X@fffff\006X@\315\314\314\314\314\014X@33333\023X@\232\231\231\231\231\031X@\000\000\000\000\000 X@fffff&X@\315\314\314\314\314,X@333333X@\232\231\231\231\2319X@\000\000\000\000\000@X@fffffFX@\315\314\314\314\314LX@33333SX@\232\231\231\231\231YX@\000\000\000\000\000`X@ffffffX@\315\314\314\314\314lX@33333sX@\232\231\231\231\231yX@\000\000\000\000\000\200X@fffff\206X@\315\314\314\314\314\214X@33333\223X@\232\231\231\231\231\231X@\000\000\000\000\000\240X@fffff\246X@\315\314\314\314\314\254X@33333\263X@\232\231\231\231\231\271X@\000\000\000\000\000\300X@fffff\306X@\315\314\314\314\314\314X@33333\323X@\232\231\231\231\231\331X@\000\000\000\000\000\340X@fffff\346X@\315\314\314\314\314\354X@33333\363X@\232\231\231\231\231\371X@\000\000\000\000\000\000Y@fffff\006Y@\315\314\314\314\314\014Y@33333\023Y@\232\231\231\231\231\031Y@\000\000\000\000\000 Y@fffff&Y@\315\314\314\314\314,Y@333333Y@\232\231\231\231\2319Y@\000\000\000\000\000@Y@fffffFY@\315\314\314\314\314LY@33333SY@\232\231\231\231\231YY@\000\000\000\000\000`Y@ffffffY@\315\314\314\314\314lY@33333sY@\232\231\231\231\231yY@\000\000\000\000\000\200Y@fffff\206Y@\315\314\314\314\314\214Y@33333\223Y@\232\231\231\231\231\231Y@\000\000\000\000\000\240Y@fffff\246Y@\315\314\314\314\314\254Y@33333\263Y@\232\231\231\231\231\271Y@\000\000\000\000\000\300Y@fffff\306Y@\315\314\314\314\314\314Y@33333\323Y@\232\231\231\231\231\331Y@\000\000\000\000\000\340Y@fffff\346Y@\315\314\314\314\314\354Y@33333\363Y@\232\231\231\231\231\371Y@\000\000\000\000\000\000Z@fffff\006Z@\315\314\314\314\314\014Z@33333\023Z@\232\231\231\231\231\031Z@\000\000\000\000\000 Z@fffff&Z@\315\314\314\314\314,Z@333333Z@\232\231\231\231\2319Z@\000\000\000\000\000@Z@fffffFZ@\315\314\314\314\314LZ@33333SZ@\232\231\231\231\231YZ@\000\000\000\000\000`Z@ffffffZ@\315\314\314\314\314lZ@33333sZ@\232\231\231\231\231yZ@\000\000\000\000\000\200Z@fffff\206Z@\315\314\314\314\314\214Z@33333\223Z@\232\231\231\231\231\231Z@\000\000\000\000\000\240Z@fffff\246Z@\315\314\314\314\314\254Z@33333\263Z@\232\231\231\231\231\271Z@\000\000\000\000\000\300Z@fffff\306Z@\315\314\314\314\314\314Z@33333\323Z@\232\231\231\231\231\331Z@\000\000\000\000\000\340Z@fffff\346Z@\315\314\314\314\314\354Z@33333\363Z@\232\231\231\231\231\371Z@\000\000\000\000\000\000[@fffff\006[@\315\314\314\314\314\014[@33333\023[@\232\231\231\231\231\031[@\000\000\000\000\000 [@fffff&[@\315\314\314\314\314,[@333333[@\232\231\231\231\2319[@\000\000\000\000\000@[@fffffF[@\315\314\314\314\314L[@33333S[@\232\231\231\231\231Y[@\000\000\000\000\000`[@ffffff[@\315\314\314\314\314l[@33333s[@\232\231\231\231\231y[@\000\000\000\000\000\200[@fffff\206[@\315\314\314\314\314\214[@33333\223[@\232\231\231\231\231\231[@\000\000\000\000\000\240[@fffff\246[@\315\314\314\314\314\254[@33333\263[@\232\231\231\231\231\271[@\000\000\000\000\000\300[@fffff\306[@\315\314\314\314\314\314[@33333\323[@\232\231\231\231\231\331[@\000\000\000\000\000\340[@fffff\346[@\315\314\314\314\314\354[@33333\363[@\232\231\231\231\231\371[@\000\000\000\000\000\000\\@fffff\006\\@\315\314\314\314\314\014\\@33333\023\\@\232\231\231\231\231\031\\@\000\000\000\000\000 \\@fffff&\\@\315\314\314\314\314,\\@333333\\@\232\231\231\231\2319\\@\000\000\000\000\000@\\@fffffF\\@\315\314\314\314\314L\\@33333S\\@\232\231\231\231\231Y\\@\000\000\000\000\000`\\@ffffff\\@\315\314\314\314\314l\\@33333s\\@\232\231\231\231\231y\\@\000\000\000\000\000\200\\@fffff\206\\@\315\314\314\314\314\214\\@33333\223\\@\232\231\231\231\231\231\\@\000\000\000\000\000\240\\@fffff\246\\@\315\314\314\314\314\254\\@33333\263\\@\232\231\231\231\231\271\\@\000\000\000\000\000\300\\@fffff\306\\@\315\314\314\314\314\314\\@33333\323\\@\232\231\231\231\231\331\\@\000\000\000\000\000\340\\@fffff\346\\@\315\314\314\314\314\354\\@33333\363\\@\232\231\231\231\231\371\\@\000\000\000\000\000\000]@fffff\006]@\315\314\314\314\314\014]@33333\023]@\232\231\231\231\231\031]@\000\000\000\000\000 ]@fffff&]@\315\314\314\314\314,]@333333]@\232\231\231\231\2319]@\000\000\000\000\000@]@fffffF]@\315\314\314\314\314L]@33333S]@\232\231\231\231\231Y]@\000\000\000\000\000`]@ffffff]@\315\314\314\314\314l]@33333s]@\232\231\231\231\231y]@\000\000\000\000\000\200]@fffff\206]@\315\314\314\314\314\214]@33333\223]@\232\231\231\231\231\231]@\000\000\000\000\000\240]@fffff\246]@\315\314\314\314\314\254]@33333\263]@\232\231\231\231\231\271]@\000\000\000\000\000\300]@fffff\306]@\315\314\314\314\314\314]@33333\323]@\232\231\231\231\231\331]@\000\000\000\000\000\340]@fffff\346]@\315\314\314\314\314\354]@33333\363]@\232\231\231\231\231\371]@\000\000\000\000\000\000^@fffff\006^@\315\314\314\314\314\014^@33333\023^@\232\231\231\231\231\031^@\000\000\000\000\000 ^@fffff&^@\315\314\314\314\314,^@333333^@\232\231\231\231\2319^@\000\000\000\000\000@^@fffffF^@\315\314\314\314\314L^@33333S^@\232\231\231\231\231Y^@\000\000\000\000\000`^@ffffff^@\315\314\314\314\314l^@33333s^@\232\231\231\231\231y^@\000\000\000\000\000\200^@fffff\206^@\315\314\314\314\314\214^@33333\223^@\232\231\231\231\231\231^@\000\000\000\000\000\240^@fffff\246^@\315\314\314\314\314\254^@33333\263^@\232\231\231\231\231\271^@\000\000\000\000\000\300^@fffff\306^@\315\314\314\314\314\314^@33333\323^@\232\231\231\231\231\331^@\000\000\000\000\000\340^@fffff\346^@\315\314\314\314\314\354^@33333\363^@\232\231\231\231\231\371^@\000\000\000\000\000\000_@fffff\006_@\315\314\314\314\314\014_@33333\023_@\232\231\231\231\231\031_@\000\000\000\000\000 _@fffff&_@\315\314\314\314\314,_@333333_@\232\231\231\231\2319_@\000\000\000\000\000@_@fffffF_@\315\314\314\314\314L_@33333S_@\232\231\231\231\231Y_@\000\000\000\000\000`_@ffffff_@\315\314\314\314\314l_@33333s_@\232\231\231\231\231y_@\000\000\000\000\000\200_@fffff\206_@\315\314\314\314\314\214_@33333\223_@\232\231\231\231\231\231_@\000\000\000\000\000\240_@fffff\246_@\315\314\314\314\314\254_@33333\263_@\232\231\231\231\231\271_@\000\000\000\000\000\300_@fffff\306_@\315\314\314\314\314\314_@33333\323_@\232\231\231\231\231\331_@\000\000\000\000\000\340_@fffff\346_@\315\314\314\314\314\354_@33333\363_@\232\231\231\231\231\371_@\000\000\000\000\000\000`@33333\003`@fffff\006`@\232\231\231\231\231\t`@\315\314\314\314\314\014`@\000\000\000\000\000\020`@33333\023`@fffff\026`@\232\231\231\231\231\031`@\315\314\314\314\314\034`@\000\000\000\000\000 `@33333#`@fffff&`@\232\231\231\231\231)`@\315\314\314\314\314,`@\000\000\000\000\0000`@333333`@fffff6`@\232\231\231\231\2319`@\315\314\314\314\314<`@\000\000\000\000\000@`@33333C`@fffffF`@\232\231\231\231\231I`@\315\314\314\314\314L`@\000\000\000\000\000P`@33333S`@fffffV`@\232\231\231\231\231Y`@\315\314\314\314\314\\`@\000\000\000\000\000``@33333c`@ffffff`@\232\231\231\231\231i`@\315\314\314\314\314l`@\000\000\000\000\000p`@33333s`@fffffv`@\232\231\231\231\231y`@\315\314\314\314\314|`@\000\000\000\000\000\200`@33333\203`@fffff\206`@\232\231\231\231\231\211`@\315\314\314\314\314\214`@\000\000\000\000\000\220`@33333\223`@fffff\226`@\232\231\231\231\231\231`@\315\314\314\314\314\234`@\000\000\000\000\000\240`@33333\243`@fffff\246`@\232\231\231\231\231\251`@\315\314\314\314\314\254`@\000\000\000\000\000\260`@33333\263`@fffff\266`@\232\231\231\231\231\271`@\315\314\314\314\314\274`@\000\000\000\000\000\300`@33333\303`@fffff\306`@\232\231\231\231\231\311`@\315\314\314\314\314\314`@\000\000\000\000\000\320`@33333\323`@fffff\326`@\232\231\231\231\231\331`@\315\314\314\314\314\334`@\000\000\000\000\000\340`@33333\343`@fffff\346`@\232\231\231\231\231\351`@\315\314\314\314\314\354`@\000\000\000\000\000\360`@33333\363`@fffff\366`@\232\231\231\231\231\371`@\315\314\314\314\314\374`@\000\000\000\000\000\000a@33333\003a@fffff\006a@\232\231\231\231\231\ta@\315\314\314\314\314\014a@\000\000\000\000\000\020a@33333\023a@fffff\026a@\232\231\231\231\231\031a@\315\314\314\314\314\034a@\000\000\000\000\000 a@33333#a@fffff&a@\232\231\231\231\231)a@\315\314\314\314\314,a@\000\000\000\000\0000a@333333a@fffff6a@\232\231\231\231\2319a@\315\314\314\314\314<a@\000\000\000\000\000@a@33333Ca@fffffFa@\232\231\231\231\231Ia@\315\314\314\314\314La@\000\000\000\000\000Pa@33333Sa@fffffVa@\232\231\231\231\231Ya@\315\314\314\314\314\\a@\000\000\000\000\000`a@33333ca@ffffffa@\232\231\231\231\231ia@\315\314\314\314\314la@\000\000\000\000\000pa@33333sa@fffffva@\232\231\231\231\231ya@\315\314\314\314\314|a@\000\000\000\000\000\200a@33333\203a@fffff\206a@\232\231\231\231\231\211a@\315\314\314\314\314\214a@\000\000\000\000\000\220a@33333\223a@fffff\226a@\232\231\231\231\231\231a@\315\314\314\314\314\234a@\000\000\000\000\000\240a@33333\243a@fffff\246a@\232\231\231\231\231\251a@\315\314\314\314\314\254a@\000\000\000\000\000\260a@33333\263a@fffff\266a@\232\231\231\231\231\271a@\315\314\314\314\314\274a@\000\000\000\000\000\300a@33333\303a@fffff\306a@\232\231\231\231\231\311a@\315\314\314\314\314\314a@\000\000\000\000\000\320a@33333\323a@fffff\326a@\232\231\231\231\231\331a@\315\314\314\314\314\334a@\000\000\000\000\000\340a@33333\343a@fffff\346a@\232\231\231\231\231\351a@\315\314\314\314\314\354a@\000\000\000\000\000\360a@33333\363a@fffff\366a@\232\231\231\231\231\371a@\315\314\314\314\314\374a@\000\000\000\000\000\000b@33333\003b@fffff\006b@\232\231\231\231\231\tb@\315\314\314\314\314\014b@\000\000\000\000\000\020b@33333\023b@fffff\026b@\232\231\231\231\231\031b@\315\314\314\314\314\034b@\000\000\000\000\000 b@33333#b@fffff&b@\232\231\231\231\231)b@\315\314\314\314\314,b@\000\000\000\000\0000b@333333b@fffff6b@\232\231\231\231\2319b@\315\314\314\314\314<b@\000\000\000\000\000@b@33333Cb@fffffFb@\232\231\231\231\231Ib@\315\314\314\314\314Lb@\000\000\000\000\000Pb@33333Sb@fffffVb@\232\231\231\231\231Yb@\315\314\314\314\314\\b@\000\000\000\000\000`b@33333cb@ffffffb@\232\231\231\231\231ib@\315\314\314\314\314lb@\000\000\000\000\000pb@33333sb@fffffvb@\232\231\231\231\231yb@\315\314\314\314\314|b@\000\000\000\000\000\200b@33333\203b@fffff\206b@\232\231\231\231\231\211b@\315\314\314\314\314\214b@\000\000\000\000\000\220b@33333\223b@fffff\226b@\232\231\231\231\231\231b@\315\314\314\314\314\234b@\000\000\000\000\000\240b@33333\243b@fffff\246b@\232\231\231\231\231\251b@\315\314\314\314\314\254b@\000\000\000\000\000\260b@33333\263b@fffff\266b@\232\231\231\231\231\271b@\315\314\314\314\314\274b@\000\000\000\000\000\300b@33333\303b@fffff\306b@\232\231\231\231\231\311b@\315\314\314\314\314\314b@\000\000\000\000\000\320b@33333\323b@fffff\326b@\232\231\231\231\231\331b@\315\314\314\314\314\334b@\000\000\000\000\000\340b@33333\343b@fffff\346b@\232\231\231\231\231\351b@\315\314\314\314\314\354b@\000\000\000\000\000\360b@33333\363b@fffff\366b@\232\231\231\231\231\371b@\315\314\314\314\314\374b@\000\000\000\000\000\000c@33333\003c@fffff\006c@\232\231\231\231\231\tc@\315\314\314\314\314\014c@\000\000\000\000\000\020c@33333\023c@fffff\026c@\232\231\231\231\231\031c@\315\314\314\314\314\034c@\000\000\000\000\000 c@33333#c@fffff&c@\232\231\231\231\231)c@\315\314\314\314\314,c@\000\000\000\000\0000c@333333c@fffff6c@\232\231\231\231\2319c@\315\314\314\314\314<c@\000\000\000\000\000@c@33333Cc@fffffFc@\232\231\231\231\231Ic@\315\314\314\314\314Lc@\000\000\000\000\000Pc@33333Sc@fffffVc@\232\231\231\231\231Yc@\315\314\314\314\314\\c@\000\000\000\000\000`c@33333cc@ffffffc@\232\231\231\231\231ic@\315\314\314\314\314lc@\000\000\000\000\000pc@33333sc@fffffvc@\232\231\231\231\231yc@\315\314\314\314\314|c@\000\000\000\000\000\200c@33333\203c@fffff\206c@\232\231\231\231\231\211c@\315\314\314\314\314\214c@\000\000\000\000\000\220c@33333\223c@fffff\226c@\232\231\231\231\231\231c@\315\314\314\314\314\234c@\000\000\000\000\000\240c@33333\243c@fffff\246c@\232\231\231\231\231\251c@\315\314\314\314\314\254c@\000\000\000\000\000\260c@33333\263c@fffff\266c@\232\231\231\231\231\271c@\315\314\314\314\314\274c@\000\000\000\000\000\300c@33333\303c@fffff\306c@\232\231\231\231\231\311c@\315\314\314\314\314\314c@\000\000\000\000\000\320c@33333\323c@fffff\326c@\232\231\231\231\231\331c@\315\314\314\314\314\334c@\000\000\000\000\000\340c@33333\343c@fffff\346c@\232\231\231\231\231\351c@\315\314\314\314\314\354c@\000\000\000\000\000\360c@33333\363c@fffff\366c@\232\231\231\231\231\371c@\315\314\314\314\314\374c@\000\000\000\000\000\000d@33333\003d@fffff\006d@\232\231\231\231\231\td@\315\314\314\314\314\014d@\000\000\000\000\000\020d@33333\023d@fffff\026d@\232\231\231\231\231\031d@\315\314\314\314\314\034d@\000\000\000\000\000 d@33333#d@fffff&d@\232\231\231\231\231)d@\315\314\314\314\314,d@\000\000\000\000\0000d@333333d@fffff6d@\232\231\231\231\2319d@\315\314\314\314\314<d@\000\000\000\000\000@d@33333Cd@fffffFd@\232\231\231\231\231Id@\315\314\314\314\314Ld@\000\000\000\000\000Pd@33333Sd@fffffVd@\232\231\231\231\231Yd@\315\314\314\314\314\\d@\000\000\000\000\000`d@33333cd@ffffffd@\232\231\231\231\231id@\315\314\314\314\314ld@\000\000\000\000\000pd@33333sd@fffffvd@\232\231\231\231\231yd@\315\314\314\314\314|d@\000\000\000\000\000\200d@33333\203d@fffff\206d@\232\231\231\231\231\211d@\315\314\314\314\314\214d@\000\000\000\000\000\220d@33333\223d@fffff\226d@\232\231\231\231\231\231d@\315\314\314\314\314\234d@\000\000\000\000\000\240d@33333\243d@fffff\246d@\232\231\231\231\231\251d@\315\314\314\314\314\254d@\000\000\000\000\000\260d@33333\263d@fffff\266d@\232\231\231\231\231\271d@\315\314\314\314\314\274d@\000\000\000\000\000\300d@33333\303d@fffff\306d@\232\231\231\231\231\311d@\315\314\314\314\314\314d@\000\000\000\000\000\320d@33333\323d@fffff\326d@\232\231\231\231\231\331d@\315\314\314\314\314\334d@\000\000\000\000\000\340d@33333\343d@fffff\346d@\232\231\231\231\231\351d@\315\314\314\314\314\354d@\000\000\000\000\000\360d@33333\363d@fffff\366d@\232\231\231\231\231\371d@\315\314\314\314\314\374d@\000\000\000\000\000\000e@33333\003e@fffff\006e@\232\231\231\231\231\te@\315\314\314\314\314\014e@\000\000\000\000\000\020e@33333\023e@fffff\026e@\232\231\231\231\231\031e@\315\314\314\314\314\034e@\000\000\000\000\000 e@33333#e@fffff&e@\232\231\231\231\231)e@\315\314\314\314\314,e@\000\000\000\000\0000e@333333e@fffff6e@\232\231\231\231\2319e@\315\314\314\314\314<e@\000\000\000\000\000@e@33333Ce@fffffFe@\232\231\231\231\231Ie@\315\314\314\314\314Le@\000\000\000\000\000Pe@33333Se@fffffVe@\232\231\231\231\231Ye@\315\314\314\314\314\\e@\000\000\000\000\000`e@33333ce@ffffffe@\232\231\231\231\231ie@\315\314\314\314\314le@\000\000\000\000\000pe@33333se@fffffve@\232\231\231\231\231ye@\315\314\314\314\314|e@\000\000\000\000\000\200e@33333\203e@fffff\206e@\232\231\231\231\231\211e@\315\314\314\314\314\214e@\000\000\000\000\000\220e@33333\223e@fffff\226e@\232\231\231\231\231\231e@\315\314\314\314\314\234e@\000\000\000\000\000\240e@33333\243e@fffff\246e@\232\231\231\231\231\251e@\315\314\314\314\314\254e@\000\000\000\000\000\260e@33333\263e@fffff\266e@\232\231\231\231\231\271e@\315\314\314\314\314\274e@\000\000\000\000\000\300e@33333\303e@fffff\306e@\232\231\231\231\231\311e@\315\314\314\314\314\314e@\000\000\000\000\000\320e@33333\323e@fffff\326e@\232\231\231\231\231\331e@\315\314\314\314\314\334e@\000\000\000\000\000\340e@33333\343e@fffff\346e@\232\231\231\231\231\351e@\315\314\314\314\314\354e@\000\000\000\000\000\360e@33333\363e@fffff\366e@\232\231\231\231\231\371e@\315\314\314\314\314\374e@\000\000\000\000\000\000f@33333\003f@fffff\006f@\232\231\231\231\231\tf@\315\314\314\314\314\014f@\000\000\000\000\000\020f@33333\023f@fffff\026f@\232\231\231\231\231\031f@\315\314\314\314\314\034f@\000\000\000\000\000 f@33333#f@fffff&f@\232\231\231\231\231)f@\315\314\314\314\314,f@\000\000\000\000\0000f@333333f@fffff6f@\232\231\231\231\2319f@\315\314\314\314\314<f@\000\000\000\000\000@f@33333Cf@fffffFf@\232\231\231\231\231If@\315\314\314\314\314Lf@\000\000\000\000\000Pf@33333Sf@fffffVf@\232\231\231\231\231Yf@\315\314\314\314\314\\f@\000\000\000\000\000`f@33333cf@fffffff@\232\231\231\231\231if@\315\314\314\314\314lf@\000\000\000\000\000pf@33333sf@fffffvf@\232\231\231\231\231yf@\315\314\314\314\314|f@\000\000\000\000\000\200f@33333\203f@fffff\206f@\232\231\231\231\231\211f@\315\314\314\314\314\214f@\000\000\000\000\000\220f@33333\223f@fffff\226f@\232\231\231\231\231\231f@\315\314\314\314\314\234f@\000\000\000\000\000\240f@33333\243f@fffff\246f@\232\231\231\231\231\251f@\315\314\314\314\314\254f@\000\000\000\000\000\260f@33333\263f@fffff\266f@\232\231\231\231\231\271f@\315\314\314\314\314\274f@\000\000\000\000\000\300f@33333\303f@fffff\306f@\232\231\231\231\231\311f@\315\314\314\314\314\314f@\000\000\000\000\000\320f@33333\323f@fffff\326f@\232\231\231\231\231\331f@\315\314\314\314\314\334f@\000\000\000\000\000\340f@33333\343f@fffff\346f@\232\231\231\231\231\351f@\315\314\314\314\314\354f@\000\000\000\000\000\360f@33333\363f@fffff\366f@\232\231\231\231\231\371f@\315\314\314\314\314\374f@\000\000\000\000\000\000g@33333\003g@fffff\006g@\232\231\231\231\231\tg@\315\314\314\314\314\014g@\000\000\000\000\000\020g@33333\023g@fffff\026g@\232\231\231\231\231\031g@\315\314\314\314\314\034g@\000\000\000\000\000 g@33333#g@fffff&g@\232\231\231\231\231)g@\315\314\314\314\314,g@\000\000\000\000\0000g@333333g@fffff6g@\232\231\231\231\2319g@\315\314\314\314\314<g@\000\000\000\000\000@g@33333Cg@fffffFg@\232\231\231\231\231Ig@\315\314\314\314\314Lg@\000\000\000\000\000Pg@33333Sg@fffffVg@\232\231\231\231\231Yg@\315\314\314\314\314\\g@\000\000\000\000\000`g@33333cg@ffffffg@\232\231\231\231\231ig@\315\314\314\314\314lg@\000\000\000\000\000pg@33333sg@fffffvg@\232\231\231\231\231yg@\315\314\314\314\314|g@\000\000\000\000\000\200g@33333\203g@fffff\206g@\232\231\231\231\231\211g@\315\314\314\314\314\214g@\000\000\000\000\000\220g@33333\223g@fffff\226g@\232\231\231\231\231\231g@\315\314\314\314\314\234g@\000\000\000\000\000\240g@33333\243g@fffff\246g@\232\231\231\231\231\251g@\315\314\314\314\314\254g@\000\000\000\000\000\260g@33333\263g@fffff\266g@\232\231\231\231\231\271g@\315\314\314\314\314\274g@\000\000\000\000\000\300g@33333\303g@fffff\306g@\232\231\231\231\231\311g@\315\314\314\314\314\314g@\000\000\000\000\000\320g@33333\323g@fffff\326g@\232\231\231\231\231\331g@\315\314\314\314\314\334g@\000\000\000\000\000\340g@33333\343g@fffff\346g@\232\231\231\231\231\351g@\315\314\314\314\314\354g@\000\000\000\000\000\360g@33333\363g@fffff\366g@\232\231\231\231\231\371g@\315\314\314\314\314\374g@\000\000\000\000\000\000h@33333\003h@fffff\006h@\232\231\231\231\231\th@\315\314\314\314\314\014h@\000\000\000\000\000\020h@33333\023h@fffff\026h@\232\231\231\231\231\031h@\315\314\314\314\314\034h@\000\000\000\000\000 h@33333#h@fffff&h@\232\231\231\231\231)h@\315\314\314\314\314,h@\000\000\000\000\0000h@333333h@fffff6h@\232\231\231\231\2319h@\315\314\314\314\314<h@\000\000\000\000\000@h@33333Ch@fffffFh@\232\231\231\231\231Ih@\315\314\314\314\314Lh@\000\000\000\000\000Ph@33333Sh@fffffVh@\232\231\231\231\231Yh@\315\314\314\314\314\\h@\000\000\000\000\000`h@33333ch@ffffffh@\232\231\231\231\231ih@\315\314\314\314\314lh@\000\000\000\000\000ph@33333sh@fffffvh@\232\231\231\231\231yh@\315\314\314\314\314|h@\000\000\000\000\000\200h@33333\203h@fffff\206h@\232\231\231\231\231\211h@\315\314\314\314\314\214h@\000\000\000\000\000\220h@33333\223h@fffff\226h@\232\231\231\231\231\231h@\315\314\314\314\314\234h@\000\000\000\000\000\240h@33333\243h@fffff\246h@\232\231\231\231\231\251h@\315\314\314\314\314\254h@\000\000\000\000\000\260h@33333\263h@fffff\266h@\232\231\231\231\231\271h@\315\314\314\314\314\274h@\000\000\000\000\000\300h@33333\303h@fffff\306h@\232\231\231\231\231\311h@\315\314\314\314\314\314h@\000\000\000\000\000\320h@33333\323h@fffff\326h@\232\231\231\231\231\331h@\315\314\314\314\314\334h@\000\000\000\000\000\340h@33333\343h@fffff\346h@\232\231\231\231\231\351h@\315\314\314\314\314\354h@\000\000\000\000\000\360h@33333\363h@fffff\366h@\232\231\231\231\231\371h@\315\314\314\314\314\374h@\000\000\000\000\000\000i@33333\003i@fffff\006i@\232\231\231\231\231\ti@\315\314\314\314\314\014i@\000\000\000\000\000\020i@33333\023i@fffff\026i@\232\231\231\231\231\031i@\315\314\314\314\314\034i@\000\000\000\000\000 i@33333#i@fffff&i@\232\231\231\231\231)i@\315\314\314\314\314,i@\000\000\000\000\0000i@333333i@fffff6i@\232\231\231\231\2319i@\315\314\314\314\314<i@\000\000\000\000\000@i@33333Ci@fffffFi@\232\231\231\231\231Ii@\315\314\314\314\314Li@\000\000\000\000\000Pi@33333Si@fffffVi@\232\231\231\231\231Yi@\315\314\314\314\314\\i@\000\000\000\000\000`i@33333ci@ffffffi@\232\231\231\231\231ii@\315\314\314\314\314li@\000\000\000\000\000pi@33333si@fffffvi@\232\231\231\231\231yi@\315\314\314\314\314|i@\000\000\000\000\000\200i@33333\203i@fffff\206i@\232\231\231\231\231\211i@\315\314\314\314\314\214i@\000\000\000\000\000\220i@33333\223i@fffff\226i@\232\231\231\231\231\231i@\315\314\314\314\314\234i@\000\000\000\000\000\240i@33333\243i@fffff\246i@\232\231\231\231\231\251i@\315\314\314\314\314\254i@\000\000\000\000\000\260i@33333\263i@fffff\266i@\232\231\231\231\231\271i@\315\314\314\314\314\274i@\000\000\000\000\000\300i@33333\303i@fffff\306i@\232\231\231\231\231\311i@\315\314\314\314\314\314i@\000\000\000\000\000\320i@33333\323i@fffff\326i@\232\231\231\231\231\331i@\315\314\314\314\314\334i@\000\000\000\000\000\340i@33333\343i@fffff\346i@\232\231\231\231\231\351i@\315\314\314\314\314\354i@\000\000\000\000\000\360i@33333\363i@fffff\366i@\232\231\231\231\231\371i@\315\314\314\314\314\374i@\000\000\000\000\000\000j@33333\003j@fffff\006j@\232\231\231\231\231\tj@\315\314\314\314\314\014j@\000\000\000\000\000\020j@33333\023j@fffff\026j@\232\231\231\231\231\031j@\315\314\314\314\314\034j@\000\000\000\000\000 j@33333#j@fffff&j@\232\231\231\231\231)j@\315\314\314\314\314,j@\000\000\000\000\0000j@333333j@fffff6j@\232\231\231\231\2319j@\315\314\314\314\314<j@\000\000\000\000\000@j@33333Cj@fffffFj@\232\231\231\231\231Ij@\315\314\314\314\314Lj@\000\000\000\000\000Pj@33333Sj@fffffVj@\232\231\231\231\231Yj@\315\314\314\314\314\\j@\000\000\000\000\000`j@33333cj@ffffffj@\232\231\231\231\231ij@\315\314\314\314\314lj@\000\000\000\000\000pj@33333sj@fffffvj@\232\231\231\231\231yj@\315\314\314\314\314|j@\000\000\000\000\000\200j@33333\203j@fffff\206j@\232\231\231\231\231\211j@\315\314\314\314\314\214j@\000\000\000\000\000\220j@33333\223j@fffff\226j@\232\231\231\231\231\231j@\315\314\314\314\314\234j@\000\000\000\000\000\240j@33333\243j@fffff\246j@\232\231\231\231\231\251j@\315\314\314\314\314\254j@\000\000\000\000\000\260j@33333\263j@fffff\266j@\232\231\231\231\231\271j@\315\314\314\314\314\274j@\000\000\000\000\000\300j@33333\303j@fffff\306j@\232\231\231\231\231\311j@\315\314\314\314\314\314j@\000\000\000\000\000\320j@33333\323j@fffff\326j@\232\231\231\231\231\331j@\315\314\314\314\314\334j@\000\000\000\000\000\340j@33333\343j@fffff\346j@\232\231\231\231\231\351j@\315\314\314\314\314\354j@\000\000\000\000\000\360j@33333\363j@fffff\366j@\232\231\231\231\231\371j@\315\314\314\314\314\374j@\000\000\000\000\000\000k@33333\003k@fffff\006k@\232\231\231\231\231\tk@\315\314\314\314\314\014k@\000\000\000\000\000\020k@33333\023k@fffff\026k@\232\231\231\231\231\031k@\315\314\314\314\314\034k@\000\000\000\000\000 k@33333#k@fffff&k@\232\231\231\231\231)k@\315\314\314\314\314,k@\000\000\000\000\0000k@333333k@fffff6k@\232\231\231\231\2319k@\315\314\314\314\314<k@\000\000\000\000\000@k@33333Ck@fffffFk@\232\231\231\231\231Ik@\315\314\314\314\314Lk@\000\000\000\000\000Pk@33333Sk@fffffVk@\232\231\231\231\231Yk@\315\314\314\314\314\\k@\000\000\000\000\000`k@33333ck@ffffffk@\232\231\231\231\231ik@\315\314\314\314\314lk@\000\000\000\000\000pk@33333sk@fffffvk@\232\231\231\231\231yk@\315\314\314\314\314|k@\000\000\000\000\000\200k@33333\203k@fffff\206k@\232\231\231\231\231\211k@\315\314\314\314\314\214k@\000\000\000\000\000\220k@33333\223k@fffff\226k@\232\231\231\231\231\231k@\315\314\314\314\314\234k@\000\000\000\000\000\240k@33333\243k@fffff\246k@\232\231\231\231\231\251k@\315\314\314\314\314\254k@\000\000\000\000\000\260k@33333\263k@fffff\266k@\232\231\231\231\231\271k@\315\314\314\314\314\274k@\000\000\000\000\000\300k@33333\303k@fffff\306k@\232\231\231\231\231\311k@\315\314\314\314\314\314k@\000\000\000\000\000\320k@33333\323k@fffff\326k@\232\231\231\231\231\331k@\315\314\314\314\314\334k@\000\000\000\000\000\340k@33333\343k@fffff\346k@\232\231\231\231\231\351k@\315\314\314\314\314\354k@\000\000\000\000\000\360k@33333\363k@fffff\366k@\232\231\231\231\231\371k@\315\314\314\314\314\374k@\000\000\000\000\000\000l@33333\003l@fffff\006l@\232\231\231\231\231\tl@\315\314\314\314\314\014l@\000\000\000\000\000\020l@33333\023l@fffff\026l@\232\231\231\231\231\031l@\315\314\314\314\314\034l@\000\000\000\000\000 l@33333#l@fffff&l@\232\231\231\231\231)l@\315\314\314\314\314,l@\000\000\000\000\0000l@333333l@fffff6l@\232\231\231\231\2319l@\315\314\314\314\314<l@\000\000\000\000\000@l@33333Cl@fffffFl@\232\231\231\231\231Il@\315\314\314\314\314Ll@\000\000\000\000\000Pl@33333Sl@fffffVl@\232\231\231\231\231Yl@\315\314\314\314\314\\l@\000\000\000\000\000`l@33333cl@ffffffl@\232\231\231\231\231il@\315\314\314\314\314ll@\000\000\000\000\000pl@33333sl@fffffvl@\232\231\231\231\231yl@\315\314\314\314\314|l@\000\000\000\000\000\200l@33333\203l@fffff\206l@\232\231\231\231\231\211l@\315\314\314\314\314\214l@\000\000\000\000\000\220l@33333\223l@fffff\226l@\232\231\231\231\231\231l@\315\314\314\314\314\234l@\000\000\000\000\000\240l@33333\243l@fffff\246l@\232\231\231\231\231\251l@\315\314\314\314\314\254l@\000\000\000\000\000\260l@33333\263l@fffff\266l@\232\231\231\231\231\271l@\315\314\314\314\314\274l@\000\000\000\000\000\300l@33333\303l@fffff\306l@\232\231\231\231\231\311l@\315\314\314\314\314\314l@\000\000\000\000\000\320l@33333\323l@fffff\326l@\232\231\231\231\231\331l@\315\314\314\314\314\334l@\000\000\000\000\000\340l@33333\343l@fffff\346l@\232\231\231\231\231\351l@\315\314\314\314\314\354l@\000\000\000\000\000\360l@33333\363l@fffff\366l@\232\231\231\231\231\371l@\315\314\314\314\314\374l@\000\000\000\000\000\000m@33333\003m@fffff\006m@\232\231\231\231\231\tm@\315\314\314\314\314\014m@\000\000\000\000\000\020m@33333\023m@fffff\026m@\232\231\231\231\231\031m@\315\314\314\314\314\034m@\000\000\000\000\000 m@33333#m@fffff&m@\232\231\231\231\231)m@\315\314\314\314\314,m@\000\000\000\000\0000m@333333m@fffff6m@\232\231\231\231\2319m@\315\314\314\314\314<m@\000\000\000\000\000@m@33333Cm@fffffFm@\232\231\231\231\231Im@\315\314\314\314\314Lm@\000\000\000\000\000Pm@33333Sm@fffffVm@\232\231\231\231\231Ym@\315\314\314\314\314\\m@\000\000\000\000\000`m@33333cm@ffffffm@\232\231\231\231\231im@\315\314\314\314\314lm@\000\000\000\000\000pm@33333sm@fffffvm@\232\231\231\231\231ym@\315\314\314\314\314|m@\000\000\000\000\000\200m@33333\203m@fffff\206m@\232\231\231\231\231\211m@\315\314\314\314\314\214m@\000\000\000\000\000\220m@33333\223m@fffff\226m@\232\231\231\231\231\231m@\315\314\314\314\314\234m@\000\000\000\000\000\240m@33333\243m@fffff\246m@\232\231\231\231\231\251m@\315\314\314\314\314\254m@\000\000\000\000\000\260m@33333\263m@fffff\266m@\232\231\231\231\231\271m@\315\314\314\314\314\274m@\000\000\000\000\000\300m@33333\303m@fffff\306m@\232\231\231\231\231\311m@\315\314\314\314\314\314m@\000\000\000\000\000\320m@33333\323m@fffff\326m@\232\231\231\231\231\331m@\315\314\314\314\314\334m@\000\000\000\000\000\340m@33333\343m@fffff\346m@\232\231\231\231\231\351m@\315\314\314\314\314\354m@\000\000\000\000\000\360m@33333\363m@fffff\366m@\232\231\231\231\231\371m@\315\314\314\314\314\374m@\000\000\000\000\000\000n@33333\003n@fffff\006n@\232\231\231\231\231\tn@\315\314\314\314\314\014n@\000\000\000\000\000\020n@33333\023n@fffff\026n@\232\231\231\231\231\031n@\315\314\314\314\314\034n@\000\000\000\000\000 n@33333#n@fffff&n@\232\231\231\231\231)n@\315\314\314\314\314,n@\000\000\000\000\0000n@333333n@fffff6n@\232\231\231\231\2319n@\315\314\314\314\314<n@\000\000\000\000\000@n@33333Cn@fffffFn@\232\231\231\231\231In@\315\314\314\314\314Ln@\000\000\000\000\000Pn@33333Sn@fffffVn@\232\231\231\231\231Yn@\315\314\314\314\314\\n@\000\000\000\000\000`n@33333cn@ffffffn@\232\231\231\231\231in@\315\314\314\314\314ln@\000\000\000\000\000pn@33333sn@fffffvn@\232\231\231\231\231yn@\315\314\314\314\314|n@\000\000\000\000\000\200n@33333\203n@fffff\206n@\232\231\231\231\231\211n@\315\314\314\314\314\214n@\000\000\000\000\000\220n@33333\223n@fffff\226n@\232\231\231\231\231\231n@\315\314\314\314\314\234n@\000\000\000\000\000\240n@33333\243n@fffff\246n@\232\231\231\231\231\251n@\315\314\314\314\314\254n@\000\000\000\000\000\260n@33333\263n@fffff\266n@\232\231\231\231\231\271n@\315\314\314\314\314\274n@\000\000\000\000\000\300n@33333\303n@fffff\306n@\232\231\231\231\231\311n@\315\314\314\314\314\314n@\000\000\000\000\000\320n@33333\323n@fffff\326n@\232\231\231\231\231\331n@\315\314\314\314\314\334n@\000\000\000\000\000\340n@33333\343n@fffff\346n@\232\231\231\231\231\351n@\315\314\314\314\314\354n@\000\000\000\000\000\360n@33333\363n@fffff\366n@\232\231\231\231\231\371n@\315\314\314\314\314\374n@\000\000\000\000\000\000o@33333\003o@fffff\006o@\232\231\231\231\231\to@\315\314\314\314\314\014o@\000\000\000\000\000\020o@33333\023o@fffff\026o@\232\231\231\231\231\031o@\315\314\314\314\314\034o@\000\000\000\000\000 o@33333#o@fffff&o@\232\231\231\231\231)o@\315\314\314\314\314,o@\000\000\000\000\0000o@333333o@fffff6o@\232\231\231\231\2319o@\315\314\314\314\314<o@\000\000\000\000\000@o@33333Co@fffffFo@\232\231\231\231\231Io@\315\314\314\314\314Lo@\000\000\000\000\000Po@33333So@fffffVo@\232\231\231\231\231Yo@\315\314\314\314\314\\o@\000\000\000\000\000`o@33333co@ffffffo@\232\231\231\231\231io@\315\314\314\314\314lo@\000\000\000\000\000po@33333so@fffffvo@\232\231\231\231\231yo@\315\314\314\314\314|o@\000\000\000\000\000\200o@33333\203o@fffff\206o@\232\231\231\231\231\211o@\315\314\314\314\314\214o@\000\000\000\000\000\220o@33333\223o@fffff\226o@\232\231\231\231\231\231o@\315\314\314\314\314\234o@\000\000\000\000\000\240o@33333\243o@fffff\246o@\232\231\231\231\231\251o@\315\314\314\314\314\254o@\000\000\000\000\000\260o@33333\263o@fffff\266o@\232\231\231\231\231\271o@\315\314\314\314\314\274o@\000\000\000\000\000\300o@33333\303o@fffff\306o@\232\231\231\231\231\311o@\315\314\314\314\314\314o@\000\000\000\000\000\320o@33333\323o@fffff\326o@\232\231\231\231\231\331o@\315\314\314\314\314\334o@\000\000\000\000\000\340o@33333\343o@fffff\346o@\232\231\231\231\231\351o@\315\314\314\314\314\354o@\000\000\000\000\000\360o@33333\363o@fffff\366o@\232\231\231\231\231\371o@\315\314\314\314\314\374o@\000\000\000\000\000\000p@\232\231\231\231\231\001p@33333\003p@\315\314\314\314\314\004p@fffff\006p@\000\000\000\000\000\010p@\232\231\231\231\231\tp@33333\013p@\315\314\314\314\314\014p@fffff\016p@\000\000\000\000\000\020p@\232\231\231\231\231\021p@33333\023p@\315\314\314\314\314\024p@fffff\026p@\000\000\000\000\000\030p@\232\231\231\231\231\031p@33333\033p@\315\314\314\314\314\034p@fffff\036p@\000\000\000\000\000 p@\232\231\231\231\231!p@33333#p@\315\314\314\314\314$p@fffff&p@\000\000\000\000\000(p@\232\231\231\231\231)p@33333+p@\315\314\314\314\314,p@fffff.p@\000\000\000\000\0000p@\232\231\231\231\2311p@333333p@\315\314\314\314\3144p@fffff6p@\000\000\000\000\0008p@\232\231\231\231\2319p@33333;p@\315\314\314\314\314<p@fffff>p@\000\000\000\000\000@p@\232\231\231\231\231Ap@33333Cp@\315\314\314\314\314Dp@fffffFp@\000\000\000\000\000Hp@\232\231\231\231\231Ip@33333Kp@\315\314\314\314\314Lp@fffffNp@\000\000\000\000\000Pp@\232\231\231\231\231Qp@33333Sp@\315\314\314\314\314Tp@fffffVp@\000\000\000\000\000Xp@\232\231\231\231\231Yp@33333[p@\315\314\314\314\314\\p@fffff^p@\000\000\000\000\000`p@\232\231\231\231\231ap@33333cp@\315\314\314\314\314dp@ffffffp@\000\000\000\000\000hp@\232\231\231\231\231ip@33333kp@\315\314\314\314\314lp@fffffnp@\000\000\000\000\000pp@\232\231\231\231\231qp@33333sp@\315\314\314\314\314tp@fffffvp@\000\000\000\000\000xp@\232\231\231\231\231yp@33333{p@\315\314\314\314\314|p@fffff~p@\000\000\000\000\000\200p@\232\231\231\231\231\201p@33333\203p@\315\314\314\314\314\204p@fffff\206p@\000\000\000\000\000\210p@\232\231\231\231\231\211p@33333\213p@\315\314\314\314\314\214p@fffff\216p@\000\000\000\000\000\220p@\232\231\231\231\231\221p@33333\223p@\315\314\314\314\314\224p@fffff\226p@\000\000\000\000\000\230p@\232\231\231\231\231\231p@33333\233p@\315\314\314\314\314\234p@fffff\236p@\000\000\000\000\000\240p@\232\231\231\231\231\241p@33333\243p@\315\314\314\314\314\244p@fffff\246p@\000\000\000\000\000\250p@\232\231\231\231\231\251p@33333\253p@\315\314\314\314\314\254p@fffff\256p@\000\000\000\000\000\260p@\232\231\231\231\231\261p@33333\263p@\315\314\314\314\314\264p@fffff\266p@\000\000\000\000\000\270p@\232\231\231\231\231\271p@33333\273p@\315\314\314\314\314\274p@fffff\276p@\000\000\000\000\000\300p@\232\231\231\231\231\301p@33333\303p@\315\314\314\314\314\304p@fffff\306p@\000\000\000\000\000\310p@\232\231\231\231\231\311p@33333\313p@\315\314\314\314\314\314p@fffff\316p@\000\000\000\000\000\320p@\232\231\231\231\231\321p@33333\323p@\315\314\314\314\314\324p@fffff\326p@\000\000\000\000\000\330p@\232\231\231\231\231\331p@33333\333p@\315\314\314\314\314\334p@fffff\336p@\000\000\000\000\000\340p@\232\231\231\231\231\341p@33333\343p@\315\314\314\314\314\344p@fffff\346p@\000\000\000\000\000\350p@\232\231\231\231\231\351p@33333\353p@\315\314\314\314\314\354p@fffff\356p@\000\000\000\000\000\360p@\232\231\231\231\231\361p@33333\363p@\315\314\314\314\314\364p@fffff\366p@\000\000\000\000\000\370p@\232\231\231\231\231\371p@33333\373p@\315\314\314\314\314\374p@fffff\376p@\000\000\000\000\000\000q@\232\231\231\231\231\001q@33333\003q@\315\314\314\314\314\004q@fffff\006q@\000\000\000\000\000\010q@\232\231\231\231\231\tq@33333\013q@\315\314\314\314\314\014q@fffff\016q@\000\000\000\000\000\020q@\232\231\231\231\231\021q@33333\023q@\315\314\314\314\314\024q@fffff\026q@\000\000\000\000\000\030q@\232\231\231\231\231\031q@33333\033q@\315\314\314\314\314\034q@fffff\036q@\000\000\000\000\000 q@\232\231\231\231\231!q@33333#q@\315\314\314\314\314$q@fffff&q@\000\000\000\000\000(q@\232\231\231\231\231)q@33333+q@\315\314\314\314\314,q@fffff.q@\000\000\000\000\0000q@\232\231\231\231\2311q@333333q@\315\314\314\314\3144q@fffff6q@\000\000\000\000\0008q@\232\231\231\231\2319q@33333;q@\315\314\314\314\314<q@fffff>q@\000\000\000\000\000@q@\232\231\231\231\231Aq@33333Cq@\315\314\314\314\314Dq@fffffFq@\000\000\000\000\000Hq@\232\231\231\231\231Iq@33333Kq@\315\314\314\314\314Lq@fffffNq@\000\000\000\000\000Pq@\232\231\231\231\231Qq@33333Sq@\315\314\314\314\314Tq@fffffVq@\000\000\000\000\000Xq@\232\231\231\231\231Yq@33333[q@\315\314\314\314\314\\q@fffff^q@\000\000\000\000\000`q@\232\231\231\231\231aq@33333cq@\315\314\314\314\314dq@ffffffq@\000\000\000\000\000hq@\232\231\231\231\231iq@33333kq@\315\314\314\314\314lq@fffffnq@\000\000\000\000\000pq@\232\231\231\231\231qq@33333sq@\315\314\314\314\314tq@fffffvq@\000\000\000\000\000xq@\232\231\231\231\231yq@33333{q@\315\314\314\314\314|q@fffff~q@\000\000\000\000\000\200q@\232\231\231\231\231\201q@33333\203q@\315\314\314\314\314\204q@fffff\206q@\000\000\000\000\000\210q@\232\231\231\231\231\211q@33333\213q@\315\314\314\314\314\214q@fffff\216q@\000\000\000\000\000\220q@\232\231\231\231\231\221q@33333\223q@\315\314\314\314\314\224q@fffff\226q@\000\000\000\000\000\230q@\232\231\231\231\231\231q@33333\233q@\315\314\314\314\314\234q@fffff\236q@\000\000\000\000\000\240q@\232\231\231\231\231\241q@33333\243q@\315\314\314\314\314\244q@fffff\246q@\000\000\000\000\000\250q@\232\231\231\231\231\251q@33333\253q@\315\314\314\314\314\254q@fffff\256q@\000\000\000\000\000\260q@\232\231\231\231\231\261q@33333\263q@\315\314\314\314\314\264q@fffff\266q@\000\000\000\000\000\270q@\232\231\231\231\231\271q@33333\273q@\315\314\314\314\314\274q@fffff\276q@\000\000\000\000\000\300q@\232\231\231\231\231\301q@33333\303q@\315\314\314\314\314\304q@fffff\306q@\000\000\000\000\000\310q@\232\231\231\231\231\311q@33333\313q@\315\314\314\314\314\314q@fffff\316q@\000\000\000\000\000\320q@\232\231\231\231\231\321q@33333\323q@\315\314\314\314\314\324q@fffff\326q@\000\000\000\000\000\330q@\232\231\231\231\231\331q@33333\333q@\315\314\314\314\314\334q@fffff\336q@\000\000\000\000\000\340q@\232\231\231\231\231\341q@33333\343q@\315\314\314\314\314\344q@fffff\346q@\000\000\000\000\000\350q@\232\231\231\231\231\351q@33333\353q@\315\314\314\314\314\354q@fffff\356q@\000\000\000\000\000\360q@\232\231\231\231\231\361q@33333\363q@\315\314\314\314\314\364q@fffff\366q@\000\000\000\000\000\370q@\232\231\231\231\231\371q@33333\373q@\315\314\314\314\314\374q@fffff\376q@\000\000\000\000\000\000r@\232\231\231\231\231\001r@33333\003r@\315\314\314\314\314\004r@fffff\006r@\000\000\000\000\000\010r@\232\231\231\231\231\tr@33333\013r@\315\314\314\314\314\014r@fffff\016r@\000\000\000\000\000\020r@\232\231\231\231\231\021r@33333\023r@\315\314\314\314\314\024r@fffff\026r@\000\000\000\000\000\030r@\232\231\231\231\231\031r@33333\033r@\315\314\314\314\314\034r@fffff\036r@\000\000\000\000\000 r@\232\231\231\231\231!r@33333#r@\315\314\314\314\314$r@fffff&r@\000\000\000\000\000(r@\232\231\231\231\231)r@33333+r@\315\314\314\314\314,r@fffff.r@\000\000\000\000\0000r@\232\231\231\231\2311r@333333r@\315\314\314\314\3144r@fffff6r@\000\000\000\000\0008r@\232\231\231\231\2319r@33333;r@\315\314\314\314\314<r@fffff>r@\000\000\000\000\000@r@\232\231\231\231\231Ar@33333Cr@\315\314\314\314\314Dr@fffffFr@\000\000\000\000\000Hr@\232\231\231\231\231Ir@33333Kr@\315\314\314\314\314Lr@fffffNr@\000\000\000\000\000Pr@\232\231\231\231\231Qr@33333Sr@\315\314\314\314\314Tr@fffffVr@\000\000\000\000\000Xr@\232\231\231\231\231Yr@33333[r@\315\314\314\314\314\\r@fffff^r@\000\000\000\000\000`r@\232\231\231\231\231ar@33333cr@\315\314\314\314\314dr@ffffffr@\000\000\000\000\000hr@\232\231\231\231\231ir@33333kr@\315\314\314\314\314lr@fffffnr@\000\000\000\000\000pr@\232\231\231\231\231qr@33333sr@\315\314\314\314\314tr@fffffvr@\000\000\000\000\000xr@\232\231\231\231\231yr@33333{r@\315\314\314\314\314|r@fffff~r@\000\000\000\000\000\200r@\232\231\231\231\231\201r@33333\203r@\315\314\314\314\314\204r@fffff\206r@\000\000\000\000\000\210r@\232\231\231\231\231\211r@33333\213r@\315\314\314\314\314\214r@fffff\216r@\000\000\000\000\000\220r@\232\231\231\231\231\221r@33333\223r@\315\314\314\314\314\224r@fffff\226r@\000\000\000\000\000\230r@\232\231\231\231\231\231r@33333\233r@\315\314\314\314\314\234r@fffff\236r@\000\000\000\000\000\240r@\232\231\231\231\231\241r@33333\243r@\315\314\314\314\314\244r@fffff\246r@\000\000\000\000\000\250r@\232\231\231\231\231\251r@33333\253r@\315\314\314\314\314\254r@fffff\256r@\000\000\000\000\000\260r@\232\231\231\231\231\261r@33333\263r@\315\314\314\314\314\264r@fffff\266r@\000\000\000\000\000\270r@\232\231\231\231\231\271r@33333\273r@\315\314\314\314\314\274r@fffff\276r@\000\000\000\000\000\300r@\232\231\231\231\231\301r@33333\303r@\315\314\314\314\314\304r@fffff\306r@\000\000\000\000\000\310r@\232\231\231\231\231\311r@33333\313r@\315\314\314\314\314\314r@fffff\316r@\000\000\000\000\000\320r@\232\231\231\231\231\321r@33333\323r@\315\314\314\314\314\324r@fffff\326r@\000\000\000\000\000\330r@\232\231\231\231\231\331r@33333\333r@\315\314\314\314\314\334r@fffff\336r@\000\000\000\000\000\340r@\232\231\231\231\231\341r@33333\343r@\315\314\314\314\314\344r@fffff\346r@\000\000\000\000\000\350r@\232\231\231\231\231\351r@33333\353r@\315\314\314\314\314\354r@fffff\356r@\000\000\000\000\000\360r@\232\231\231\231\231\361r@33333\363r@\315\314\314\314\314\364r@fffff\366r@\000\000\000\000\000\370r@\232\231\231\231\231\371r@33333\373r@\315\314\314\314\314\374r@fffff\376r@\000\000\000\000\000\000s@\232\231\231\231\231\001s@33333\003s@\315\314\314\314\314\004s@fffff\006s@\000\000\000\000\000\010s@\232\231\231\231\231\ts@33333\013s@\315\314\314\314\314\014s@fffff\016s@\000\000\000\000\000\020s@\232\231\231\231\231\021s@33333\023s@\315\314\314\314\314\024s@fffff\026s@\000\000\000\000\000\030s@\232\231\231\231\231\031s@33333\033s@\315\314\314\314\314\034s@fffff\036s@\000\000\000\000\000 s@\232\231\231\231\231!s@33333#s@\315\314\314\314\314$s@fffff&s@\000\000\000\000\000(s@\232\231\231\231\231)s@33333+s@\315\314\314\314\314,s@fffff.s@\000\000\000\000\0000s@\232\231\231\231\2311s@333333s@\315\314\314\314\3144s@fffff6s@\000\000\000\000\0008s@\232\231\231\231\2319s@33333;s@\315\314\314\314\314<s@fffff>s@\000\000\000\000\000@s@\232\231\231\231\231As@33333Cs@\315\314\314\314\314Ds@fffffFs@\000\000\000\000\000Hs@\232\231\231\231\231Is@33333Ks@\315\314\314\314\314Ls@fffffNs@\000\000\000\000\000Ps@\232\231\231\231\231Qs@33333Ss@\315\314\314\314\314Ts@fffffVs@\000\000\000\000\000Xs@\232\231\231\231\231Ys@33333[s@\315\314\314\314\314\\s@fffff^s@\000\000\000\000\000`s@\232\231\231\231\231as@33333cs@\315\314\314\314\314ds@ffffffs@\000\000\000\000\000hs@\232\231\231\231\231is@33333ks@\315\314\314\314\314ls@fffffns@\000\000\000\000\000ps@\232\231\231\231\231qs@33333ss@\315\314\314\314\314ts@fffffvs@\000\000\000\000\000xs@\232\231\231\231\231ys@33333{s@\315\314\314\314\314|s@fffff~s@\000\000\000\000\000\200s@\232\231\231\231\231\201s@33333\203s@\315\314\314\314\314\204s@fffff\206s@\000\000\000\000\000\210s@\232\231\231\231\231\211s@33333\213s@\315\314\314\314\314\214s@fffff\216s@\000\000\000\000\000\220s@\232\231\231\231\231\221s@33333\223s@\315\314\314\314\314\224s@fffff\226s@\000\000\000\000\000\230s@\232\231\231\231\231\231s@33333\233s@\315\314\314\314\314\234s@fffff\236s@\000\000\000\000\000\240s@\232\231\231\231\231\241s@33333\243s@\315\314\314\314\314\244s@fffff\246s@\000\000\000\000\000\250s@\232\231\231\231\231\251s@33333\253s@\315\314\314\314\314\254s@fffff\256s@\000\000\000\000\000\260s@\232\231\231\231\231\261s@33333\263s@\315\314\314\314\314\264s@fffff\266s@\000\000\000\000\000\270s@\232\231\231\231\231\271s@33333\273s@\315\314\314\314\314\274s@fffff\276s@\000\000\000\000\000\300s@\232\231\231\231\231\301s@33333\303s@\315\314\314\314\314\304s@fffff\306s@\000\000\000\000\000\310s@\232\231\231\231\231\311s@33333\313s@\315\314\314\314\314\314s@fffff\316s@\000\000\000\000\000\320s@\232\231\231\231\231\321s@33333\323s@\315\314\314\314\314\324s@fffff\326s@\000\000\000\000\000\330s@\232\231\231\231\231\331s@33333\333s@\315\314\314\314\314\334s@fffff\336s@\000\000\000\000\000\340s@\232\231\231\231\231\341s@33333\343s@\315\314\314\314\314\344s@fffff\346s@\000\000\000\000\000\350s@\232\231\231\231\231\351s@33333\353s@\315\314\314\314\314\354s@fffff\356s@\000\000\000\000\000\360s@\232\231\231\231\231\361s@33333\363s@\315\314\314\314\314\364s@fffff\366s@\000\000\000\000\000\370s@\232\231\231\231\231\371s@33333\373s@\315\314\314\314\314\374s@fffff\376s@\000\000\000\000\000\000t@\232\231\231\231\231\001t@33333\003t@\315\314\314\314\314\004t@fffff\006t@\000\000\000\000\000\010t@\232\231\231\231\231\tt@33333\013t@\315\314\314\314\314\014t@fffff\016t@\000\000\000\000\000\020t@\232\231\231\231\231\021t@33333\023t@\315\314\314\314\314\024t@fffff\026t@\000\000\000\000\000\030t@\232\231\231\231\231\031t@33333\033t@\315\314\314\314\314\034t@fffff\036t@\000\000\000\000\000 t@\232\231\231\231\231!t@33333#t@\315\314\314\314\314$t@fffff&t@\000\000\000\000\000(t@\232\231\231\231\231)t@33333+t@\315\314\314\314\314,t@fffff.t@\000\000\000\000\0000t@\232\231\231\231\2311t@333333t@\315\314\314\314\3144t@fffff6t@\000\000\000\000\0008t@\232\231\231\231\2319t@33333;t@\315\314\314\314\314<t@fffff>t@\000\000\000\000\000@t@\232\231\231\231\231At@33333Ct@\315\314\314\314\314Dt@fffffFt@\000\000\000\000\000Ht@\232\231\231\231\231It@33333Kt@\315\314\314\314\314Lt@fffffNt@\000\000\000\000\000Pt@\232\231\231\231\231Qt@33333St@\315\314\314\314\314Tt@fffffVt@\000\000\000\000\000Xt@\232\231\231\231\231Yt@33333[t@\315\314\314\314\314\\t@fffff^t@\000\000\000\000\000`t@\232\231\231\231\231at@33333ct@\315\314\314\314\314dt@fffffft@\000\000\000\000\000ht@\232\231\231\231\231it@33333kt@\315\314\314\314\314lt@fffffnt@\000\000\000\000\000pt@\232\231\231\231\231qt@33333st@\315\314\314\314\314tt@fffffvt@\000\000\000\000\000xt@\232\231\231\231\231yt@33333{t@\315\314\314\314\314|t@fffff~t@\000\000\000\000\000\200t@\232\231\231\231\231\201t@33333\203t@\315\314\314\314\314\204t@fffff\206t@\000\000\000\000\000\210t@\232\231\231\231\231\211t@33333\213t@\315\314\314\314\314\214t@fffff\216t@\000\000\000\000\000\220t@\232\231\231\231\231\221t@33333\223t@\315\314\314\314\314\224t@fffff\226t@\000\000\000\000\000\230t@\232\231\231\231\231\231t@33333\233t@\315\314\314\314\314\234t@fffff\236t@\000\000\000\000\000\240t@\232\231\231\231\231\241t@33333\243t@\315\314\314\314\314\244t@fffff\246t@\000\000\000\000\000\250t@\232\231\231\231\231\251t@33333\253t@\315\314\314\314\314\254t@fffff\256t@\000\000\000\000\000\260t@\232\231\231\231\231\261t@33333\263t@\315\314\314\314\314\264t@fffff\266t@\000\000\000\000\000\270t@\232\231\231\231\231\271t@33333\273t@\315\314\314\314\314\274t@fffff\276t@\000\000\000\000\000\300t@\232\231\231\231\231\301t@33333\303t@\315\314\314\314\314\304t@fffff\306t@\000\000\000\000\000\310t@\232\231\231\231\231\311t@33333\313t@\315\314\314\314\314\314t@fffff\316t@\000\000\000\000\000\320t@\232\231\231\231\231\321t@33333\323t@\315\314\314\314\314\324t@fffff\326t@\000\000\000\000\000\330t@\232\231\231\231\231\331t@33333\333t@\315\314\314\314\314\334t@fffff\336t@\000\000\000\000\000\340t@\232\231\231\231\231\341t@33333\343t@\315\314\314\314\314\344t@fffff\346t@\000\000\000\000\000\350t@\232\231\231\231\231\351t@33333\353t@\315\314\314\314\314\354t@fffff\356t@\000\000\000\000\000\360t@\232\231\231\231\231\361t@33333\363t@\315\314\314\314\314\364t@fffff\366t@\000\000\000\000\000\370t@\232\231\231\231\231\371t@33333\373t@\315\314\314\314\314\374t@fffff\376t@\000\000\000\000\000\000u@\232\231\231\231\231\001u@33333\003u@\315\314\314\314\314\004u@fffff\006u@\000\000\000\000\000\010u@\232\231\231\231\231\tu@33333\013u@\315\314\314\314\314\014u@fffff\016u@\000\000\000\000\000\020u@\232\231\231\231\231\021u@33333\023u@\315\314\314\314\314\024u@fffff\026u@\000\000\000\000\000\030u@\232\231\231\231\231\031u@33333\033u@\315\314\314\314\314\034u@fffff\036u@\000\000\000\000\000 u@\232\231\231\231\231!u@33333#u@\315\314\314\314\314$u@fffff&u@\000\000\000\000\000(u@\232\231\231\231\231)u@33333+u@\315\314\314\314\314,u@fffff.u@\000\000\000\000\0000u@\232\231\231\231\2311u@333333u@\315\314\314\314\3144u@fffff6u@\000\000\000\000\0008u@\232\231\231\231\2319u@33333;u@\315\314\314\314\314<u@fffff>u@\000\000\000\000\000@u@\232\231\231\231\231Au@33333Cu@\315\314\314\314\314Du@fffffFu@\000\000\000\000\000Hu@\232\231\231\231\231Iu@33333Ku@\315\314\314\314\314Lu@fffffNu@\000\000\000\000\000Pu@\232\231\231\231\231Qu@33333Su@\315\314\314\314\314Tu@fffffVu@\000\000\000\000\000Xu@\232\231\231\231\231Yu@33333[u@\315\314\314\314\314\\u@fffff^u@\000\000\000\000\000`u@\232\231\231\231\231au@33333cu@\315\314\314\314\314du@ffffffu@\000\000\000\000\000hu@\232\231\231\231\231iu@33333ku@\315\314\314\314\314lu@fffffnu@\000\000\000\000\000pu@\232\231\231\231\231qu@33333su@\315\314\314\314\314tu@fffffvu@\000\000\000\000\000xu@\232\231\231\231\231yu@33333{u@\315\314\314\314\314|u@fffff~u@\000\000\000\000\000\200u@\232\231\231\231\231\201u@33333\203u@\315\314\314\314\314\204u@fffff\206u@\000\000\000\000\000\210u@\232\231\231\231\231\211u@33333\213u@\315\314\314\314\314\214u@fffff\216u@\000\000\000\000\000\220u@\232\231\231\231\231\221u@33333\223u@\315\314\314\314\314\224u@fffff\226u@\000\000\000\000\000\230u@\232\231\231\231\231\231u@33333\233u@\315\314\314\314\314\234u@fffff\236u@\000\000\000\000\000\240u@\232\231\231\231\231\241u@33333\243u@\315\314\314\314\314\244u@fffff\246u@\000\000\000\000\000\250u@\232\231\231\231\231\251u@33333\253u@\315\314\314\314\314\254u@fffff\256u@\000\000\000\000\000\260u@\232\231\231\231\231\261u@33333\263u@\315\314\314\314\314\264u@fffff\266u@\000\000\000\000\000\270u@\232\231\231\231\231\271u@33333\273u@\315\314\314\314\314\274u@fffff\276u@\000\000\000\000\000\300u@\232\231\231\231\231\301u@33333\303u@\315\314\314\314\314\304u@fffff\306u@\000\000\000\000\000\310u@\232\231\231\231\231\311u@33333\313u@\315\314\314\314\314\314u@fffff\316u@\000\000\000\000\000\320u@\232\231\231\231\231\321u@33333\323u@\315\314\314\314\314\324u@fffff\326u@\000\000\000\000\000\330u@\232\231\231\231\231\331u@33333\333u@\315\314\314\314\314\334u@fffff\336u@\000\000\000\000\000\340u@\232\231\231\231\231\341u@33333\343u@\315\314\314\314\314\344u@fffff\346u@\000\000\000\000\000\350u@\232\231\231\231\231\351u@33333\353u@\315\314\314\314\314\354u@fffff\356u@\000\000\000\000\000\360u@\232\231\231\231\231\361u@33333\363u@\315\314\314\314\314\364u@fffff\366u@\000\000\000\000\000\370u@\232\231\231\231\231\371u@33333\373u@\315\314\314\314\314\374u@fffff\376u@\000\000\000\000\000\000v@\232\231\231\231\231\001v@33333\003v@\315\314\314\314\314\004v@fffff\006v@\000\000\000\000\000\010v@\232\231\231\231\231\tv@33333\013v@\315\314\314\314\314\014v@fffff\016v@\000\000\000\000\000\020v@\232\231\231\231\231\021v@33333\023v@\315\314\314\314\314\024v@fffff\026v@\000\000\000\000\000\030v@\232\231\231\231\231\031v@33333\033v@\315\314\314\314\314\034v@fffff\036v@\000\000\000\000\000 v@\232\231\231\231\231!v@33333#v@\315\314\314\314\314$v@fffff&v@\000\000\000\000\000(v@\232\231\231\231\231)v@33333+v@\315\314\314\314\314,v@fffff.v@\000\000\000\000\0000v@\232\231\231\231\2311v@333333v@\315\314\314\314\3144v@fffff6v@\000\000\000\000\0008v@\232\231\231\231\2319v@33333;v@\315\314\314\314\314<v@fffff>v@\000\000\000\000\000@v@\232\231\231\231\231Av@33333Cv@\315\314\314\314\314Dv@fffffFv@\000\000\000\000\000Hv@\232\231\231\231\231Iv@33333Kv@\315\314\314\314\314Lv@fffffNv@\000\000\000\000\000Pv@\232\231\231\231\231Qv@33333Sv@\315\314\314\314\314Tv@fffffVv@\000\000\000\000\000Xv@\232\231\231\231\231Yv@33333[v@\315\314\314\314\314\\v@fffff^v@\000\000\000\000\000`v@\232\231\231\231\231av@33333cv@\315\314\314\314\314dv@ffffffv@\000\000\000\000\000hv@\232\231\231\231\231iv@33333kv@\315\314\314\314\314lv@fffffnv@\000\000\000\000\000pv@\232\231\231\231\231qv@33333sv@\315\314\314\314\314tv@fffffvv@\000\000\000\000\000xv@\232\231\231\231\231yv@33333{v@\315\314\314\314\314|v@fffff~v@"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset/tensors/component_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 3599
              }
            }
            tensor_content: "}\303\344:h\303d;s\222\253;\016\303\344;\276\371\016<\330\221+<\321)H<\241\301d<\242\254\200<Y\370\216<\364C\235<p\217\253<\312\332\271<\376%\310<\nq\326<\354\273\344<\237\006\363<\221\250\000=\271\315\007=\306\362\016=\267\027\026=\211<\035=<a$=\316\205+=>\2522=\212\3169=\262\362@=\262\026H=\213:O=:^V=\277\201]=\027\245d=B\310k=>\353r=\t\016z=Q\230\200=\204)\204=\234\272\207=\232K\213={\334\216=@m\222=\350\375\225=r\216\231=\336\036\235=*\257\240=U?\244=a\317\247=J_\253=\021\357\256=\266~\262=7\016\266=\223\235\271=\312,\275=\334\273\300=\307J\304=\213\331\307=\'h\313=\233\366\316=\345\204\322=\005\023\326=\372\240\331=\304.\335=b\274\340=\323I\344=\026\327\347=+d\353=\021\361\356=\310}\362=N\n\366=\242\226\371=\305\"\375=[W\000>:\035\002>\376\342\003>\250\250\005>8n\007>\2553\t>\006\371\n>C\276\014>e\203\016>jH\020>R\r\022>\035\322\023>\312\226\025>Z[\027>\313\037\031>\036\344\032>R\250\034>fl\036>[0 >0\364!>\345\267#>y{%>\354>\'>=\002)>m\305*>{\210,>fK.>/\0160>\324\3201>V\2233>\264U5>\356\0277>\003\3328>\363\233:>\276]<>d\037>>\343\340?><\242A>ocC>{$E>_\345F>\033\246H>\260fJ>\034\'L>_\347M>y\247O>jgQ>1\'S>\315\346T>@\246V>\207eX>\243$Z>\224\343[>Y\242]>\361`_>]\037a>\234\335b>\256\233d>\222Yf>H\027h>\317\324i>)\222k>SOm>M\014o>\030\311p>\263\205r>\035Bt>W\376u>`\272w>7vy>\3341{>O\355|>\220\250~>\3171\200><\017\201>\220\354\201>\311\311\202>\351\246\203>\356\203\204>\331`\205>\251=\206>^\032\207>\371\366\207>x\323\210>\334\257\211>$\214\212>Qh\213>bD\214>W \215>0\374\215>\354\327\216>\214\263\217>\017\217\220>vj\221>\277E\222>\353 \223>\372\373\223>\353\326\224>\276\261\225>t\214\226>\014g\227>\205A\230>\340\033\231>\034\366\231>:\320\232>9\252\233>\030\204\234>\331]\235>z7\236>\373\020\237>]\352\237>\237\303\240>\300\234\241>\302u\242>\242N\243>c\'\244>\002\000\245>\201\330\245>\336\260\246>\033\211\247>6a\250>/9\251>\006\021\252>\274\350\252>O\300\253>\300\227\254>\017o\255>:F\256>D\035\257>*\364\257>\355\312\260>\215\241\261>\tx\262>bN\263>\227$\264>\250\372\264>\224\320\265>]\246\266>\001|\267>\200Q\270>\333&\271>\021\374\271>!\321\272>\014\246\273>\322z\274>rO\275>\355#\276>A\370\276>o\314\277>w\240\300>Yt\301>\024H\302>\250\033\303>\025\357\303>[\302\304>z\225\305>qh\306>A;\307>\351\r\310>i\340\310>\301\262\311>\361\204\312>\370V\313>\327(\314>\214\372\314>\031\314\315>}\235\316>\270n\317>\311?\320>\261\020\321>o\341\321>\003\262\322>m\202\323>\254R\324>\302\"\325>\254\362\325>l\302\326>\002\222\327>la\330>\2530\331>\276\377\331>\246\316\332>c\235\333>\363k\334>X:\335>\220\010\336>\234\326\336>|\244\337>/r\340>\265?\341>\016\r\342>:\332\342>9\247\343>\nt\344>\256@\345>$\r\346>l\331\346>\206\245\347>qq\350>/=\351>\275\010\352>\035\324\352>N\237\353>Pj\354>#5\355>\307\377\355>;\312\356>\177\224\357>\224^\360>x(\361>-\362\361>\261\273\362>\004\205\363>\'N\364>\031\027\365>\333\337\365>k\250\366>\312p\367>\3678\370>\363\000\371>\276\310\371>V\220\372>\275W\373>\361\036\374>\363\345\374>\302\254\375>_s\376>\3119\377>\000\000\000?\002c\000?\352\305\000?\271(\001?n\213\001?\t\356\001?\212P\002?\361\262\002?>\025\003?qw\003?\211\331\003?\207;\004?k\235\004?4\377\004?\343`\005?w\302\005?\361#\006?O\205\006?\223\346\006?\274G\007?\312\250\007?\275\t\010?\224j\010?Q\313\010?\362+\t?x\214\t?\342\354\t?1M\n?d\255\n?{\r\013?wm\013?W\315\013?\032-\014?\302\214\014?N\354\014?\276K\r?\022\253\r?I\n\016?di\016?b\310\016?D\'\017?\n\206\017?\262\344\017?>C\020?\255\241\020?\000\000\021?5^\021?N\274\021?I\032\022?\'x\022?\350\325\022?\2133\023?\021\221\023?z\356\023?\305K\024?\363\250\024?\003\006\025?\365b\025?\311\277\025?\200\034\026?\030y\026?\223\325\026?\3571\027?-\216\027?M\352\027?NF\030?2\242\030?\366\375\030?\234Y\031?$\265\031?\215\020\032?\327k\032?\002\307\032?\016\"\033?\374|\033?\312\327\033?y2\034?\t\215\034?z\347\034?\313A\035?\376\233\035?\020\366\035?\003P\036?\327\251\036?\212\003\037?\037]\037?\223\266\037?\347\017 ?\033i ?0\302 ?$\033!?\370s!?\254\314!?@%\"?\263}\"?\006\326\"?8.#?J\206#?;\336#?\0136$?\273\215$?I\345$?\267<%?\004\224%?0\353%?:B&?$\231&?\354\357&?\223F\'?\030\235\'?|\363\'?\276I(?\337\237(?\337\365(?\274K)?x\241)?\021\367)?\211L*?\337\241*?\023\367*?%L+?\024\241+?\341\365+?\214J,?\025\237,?{\363,?\276G-?\337\233-?\336\357-?\271C.?r\227.?\010\353.?{>/?\313\221/?\370\344/?\00180?\350\2120?\253\3350?L01?\310\2021?\"\3251?W\'2?jy2?X\3132?#\0353?\312n3?M\3003?\255\0214?\350b4?\000\2644?\363\0045?\302U5?n\2465?\364\3665?WG6?\225\2276?\256\3476?\24477?t\2077? \3277?\247&8?\nv8?G\3058?`\0249?Tc9?#\2629?\314\000:?QO:?\260\235:?\352\353:?\3779;?\356\207;?\270\325;?]#<?\334p<?5\276<?i\013=?wX=?_\245=?!\362=?\275>>?4\213>?\204\327>?\256#??\262o??\220\273??G\007@?\331R@?C\236@?\210\351@?\2464A?\235\177A?n\312A?\030\025B?\233_B?\367\251B?-\364B?;>C?#\210C?\344\321C?}\033D?\357dD?;\256D?_\367D?[@E?0\211E?\336\321E?d\032F?\303bF?\372\252F?\n\363F?\361:G?\261\202G?J\312G?\272\021H?\002YH?\"\240H?\033\347H?\353-I?\223tI?\023\273I?j\001J?\231GJ?\240\215J?~\323J?4\031K?\302^K?&\244K?b\351K?v.L?`sL?\"\270L?\273\374L?+AM?r\205M?\220\311M?\205\rN?QQN?\363\224N?m\330N?\275\033O?\344^O?\341\241O?\265\344O?_\'P?\340iP?7\254P?e\356P?h0Q?CrQ?\363\263Q?y\365Q?\3266R?\010xR?\021\271R?\357\371R?\243:S?.{S?\215\273S?\303\373S?\316;T?\257{T?f\273T?\362\372T?T:U?\213yU?\227\270U?y\367U?06V?\274tV?\035\263V?T\361V?_/W?@mW?\366\252W?\200\350W?\340%X?\024cX?\036\240X?\373\334X?\256\031Y?5VY?\221\222Y?\302\316Y?\307\nZ?\240FZ?N\202Z?\320\275Z?\'\371Z?R4[?Qo[?$\252[?\314\344[?G\037\\?\227Y\\?\273\223\\?\262\315\\?~\007]?\035A]?\220z]?\327\263]?\362\354]?\340%^?\243^^?8\227^?\242\317^?\336\007_?\357?_?\322w_?\211\257_?\024\347_?q\036`?\242U`?\247\214`?~\303`?)\372`?\2460a?\367fa?\032\235a?\021\323a?\332\010b?w>b?\346sb?(\251b?=\336b?$\023c?\336Gc?k|c?\313\260c?\375\344c?\001\031d?\330Ld?\201\200d?\375\263d?K\347d?k\032e?^Me?\"\200e?\271\262e?#\345e?^\027f?kIf?J{f?\374\254f?\177\336f?\324\017g?\373@g?\364qg?\277\242g?[\323g?\312\003h?\t4h?\033dh?\376\223h?\263\303h?9\363h?\220\"i?\272Qi?\264\200i?\200\257i?\035\336i?\214\014j?\314:j?\335hj?\277\226j?s\304j?\370\361j?M\037k?tLk?lyk?5\246k?\317\322k?9\377k?u+l?\201Wl?^\203l?\r\257l?\213\332l?\333\005m?\3730m?\354[m?\255\206m??\261m?\242\333m?\325\005n?\331/n?\255Yn?Q\203n?\306\254n?\013\326n? \377n?\006(o?\274Po?Cyo?\231\241o?\300\311o?\266\361o?}\031p?\024Ap?{hp?\262\217p?\271\266p?\220\335p?7\004q?\255*q?\364Pq?\nwq?\360\234q?\246\302q?,\350q?\201\rr?\2462r?\233Wr?_|r?\363\240r?W\305r?\212\351r?\214\rs?^1s?\000Us?qxs?\261\233s?\300\276s?\237\341s?N\004t?\313&t?\030It?4kt?\037\215t?\332\256t?c\320t?\274\361t?\344\022u?\3333u?\241Tu?6uu?\232\225u?\315\265u?\317\325u?\237\365u??\025v?\2564v?\353Sv?\367rv?\322\221v?|\260v?\365\316v?<\355v?R\013w?7)w?\352Fw?ldw?\275\201w?\334\236w?\312\273w?\206\330w?\021\365w?j\021x?\222-x?\210Ix?Mex?\340\200x?B\234x?q\267x?p\322x?<\355x?\327\007y?@\"y?x<y?}Vy?Qpy?\363\211y?c\243y?\242\274y?\256\325y?\211\356y?2\007z?\251\037z?\3567z?\001Pz?\342gz?\221\177z?\016\227z?Y\256z?r\305z?X\334z?\r\363z?\220\t{?\341\037{?\3775{?\353K{?\245a{?-w{?\203\214{?\247\241{?\230\266{?W\313{?\344\337{?>\364{?g\010|?\\\034|? 0|?\261C|?\020W|?<j|?7}|?\376\217|?\224\242|?\366\264|?\'\307|?%\331|?\360\352|?\211\374|?\357\r}?#\037}?%0}?\364@}?\220Q}?\372a}?1r}?5\202}?\007\222}?\247\241}?\023\261}?M\300}?U\317}?)\336}?\313\354}?;\373}?w\t~?\201\027~?X%~?\3752~?o@~?\255M~?\272Z~?\223g~?:t~?\255\200~?\356\214~?\375\230~?\330\244~?\201\260~?\366\273~?9\307~?I\322~?&\335~?\320\347~?H\362~?\214\374~?\236\006\177?|\020\177?(\032\177?\241#\177?\347,\177?\3715\177?\331>\177?\206G\177?\000P\177?GX\177?\\`\177?=h\177?\353o\177?fw\177?\256~\177?\303\205\177?\245\214\177?T\223\177?\320\231\177?\031\240\177?/\246\177?\022\254\177?\302\261\177??\267\177?\211\274\177?\240\301\177?\204\306\177?4\313\177?\262\317\177?\374\323\177?\024\330\177?\370\333\177?\251\337\177?(\343\177?s\346\177?\213\351\177?p\354\177?\"\357\177?\240\361\177?\354\363\177?\005\366\177?\352\367\177?\235\371\177?\034\373\177?h\374\177?\201\375\177?g\376\177?\032\377\177?\232\377\177?\346\377\177?\000\000\200?\346\377\177?\232\377\177?\032\377\177?g\376\177?\201\375\177?h\374\177?\034\373\177?\235\371\177?\352\367\177?\005\366\177?\354\363\177?\240\361\177?\"\357\177?p\354\177?\213\351\177?s\346\177?(\343\177?\251\337\177?\370\333\177?\024\330\177?\374\323\177?\262\317\177?4\313\177?\204\306\177?\240\301\177?\211\274\177??\267\177?\302\261\177?\022\254\177?/\246\177?\031\240\177?\320\231\177?T\223\177?\245\214\177?\303\205\177?\256~\177?fw\177?\353o\177?=h\177?\\`\177?GX\177?\000P\177?\206G\177?\331>\177?\3715\177?\347,\177?\241#\177?(\032\177?|\020\177?\236\006\177?\214\374~?H\362~?\320\347~?&\335~?I\322~?9\307~?\366\273~?\201\260~?\330\244~?\375\230~?\356\214~?\255\200~?:t~?\223g~?\272Z~?\255M~?o@~?\3752~?X%~?\201\027~?w\t~?;\373}?\313\354}?)\336}?U\317}?M\300}?\023\261}?\247\241}?\007\222}?5\202}?1r}?\372a}?\220Q}?\364@}?%0}?#\037}?\357\r}?\211\374|?\360\352|?%\331|?\'\307|?\366\264|?\224\242|?\376\217|?7}|?<j|?\020W|?\261C|? 0|?\\\034|?g\010|?>\364{?\344\337{?W\313{?\230\266{?\247\241{?\203\214{?-w{?\245a{?\353K{?\3775{?\341\037{?\220\t{?\r\363z?X\334z?r\305z?Y\256z?\016\227z?\221\177z?\342gz?\001Pz?\3567z?\251\037z?2\007z?\211\356y?\256\325y?\242\274y?c\243y?\363\211y?Qpy?}Vy?x<y?@\"y?\327\007y?<\355x?p\322x?q\267x?B\234x?\340\200x?Mex?\210Ix?\222-x?j\021x?\021\365w?\206\330w?\312\273w?\334\236w?\275\201w?ldw?\352Fw?7)w?R\013w?<\355v?\365\316v?|\260v?\322\221v?\367rv?\353Sv?\2564v??\025v?\237\365u?\317\325u?\315\265u?\232\225u?6uu?\241Tu?\3333u?\344\022u?\274\361t?c\320t?\332\256t?\037\215t?4kt?\030It?\313&t?N\004t?\237\341s?\300\276s?\261\233s?qxs?\000Us?^1s?\214\rs?\212\351r?W\305r?\363\240r?_|r?\233Wr?\2462r?\201\rr?,\350q?\246\302q?\360\234q?\nwq?\364Pq?\255*q?7\004q?\220\335p?\271\266p?\262\217p?{hp?\024Ap?}\031p?\266\361o?\300\311o?\231\241o?Cyo?\274Po?\006(o? \377n?\013\326n?\306\254n?Q\203n?\255Yn?\331/n?\325\005n?\242\333m??\261m?\255\206m?\354[m?\3730m?\333\005m?\213\332l?\r\257l?^\203l?\201Wl?u+l?9\377k?\317\322k?5\246k?lyk?tLk?M\037k?\370\361j?s\304j?\277\226j?\335hj?\314:j?\214\014j?\035\336i?\200\257i?\264\200i?\272Qi?\220\"i?9\363h?\263\303h?\376\223h?\033dh?\t4h?\312\003h?[\323g?\277\242g?\364qg?\373@g?\324\017g?\177\336f?\374\254f?J{f?kIf?^\027f?#\345e?\271\262e?\"\200e?^Me?k\032e?K\347d?\375\263d?\201\200d?\330Ld?\001\031d?\375\344c?\313\260c?k|c?\336Gc?$\023c?=\336b?(\251b?\346sb?w>b?\332\010b?\021\323a?\032\235a?\367fa?\2460a?)\372`?~\303`?\247\214`?\242U`?q\036`?\024\347_?\211\257_?\322w_?\357?_?\336\007_?\242\317^?8\227^?\243^^?\340%^?\362\354]?\327\263]?\220z]?\035A]?~\007]?\262\315\\?\273\223\\?\227Y\\?G\037\\?\314\344[?$\252[?Qo[?R4[?\'\371Z?\320\275Z?N\202Z?\240FZ?\307\nZ?\302\316Y?\221\222Y?5VY?\256\031Y?\373\334X?\036\240X?\024cX?\340%X?\200\350W?\366\252W?@mW?_/W?T\361V?\035\263V?\274tV?06V?y\367U?\227\270U?\213yU?T:U?\362\372T?f\273T?\257{T?\316;T?\303\373S?\215\273S?.{S?\243:S?\357\371R?\021\271R?\010xR?\3266R?y\365Q?\363\263Q?CrQ?h0Q?e\356P?7\254P?\340iP?_\'P?\265\344O?\341\241O?\344^O?\275\033O?m\330N?\363\224N?QQN?\205\rN?\220\311M?r\205M?+AM?\273\374L?\"\270L?`sL?v.L?b\351K?&\244K?\302^K?4\031K?~\323J?\240\215J?\231GJ?j\001J?\023\273I?\223tI?\353-I?\033\347H?\"\240H?\002YH?\272\021H?J\312G?\261\202G?\361:G?\n\363F?\372\252F?\303bF?d\032F?\336\321E?0\211E?[@E?_\367D?;\256D?\357dD?}\033D?\344\321C?#\210C?;>C?-\364B?\367\251B?\233_B?\030\025B?n\312A?\235\177A?\2464A?\210\351@?C\236@?\331R@?G\007@?\220\273??\262o??\256#??\204\327>?4\213>?\275>>?!\362=?_\245=?wX=?i\013=?5\276<?\334p<?]#<?\270\325;?\356\207;?\3779;?\352\353:?\260\235:?QO:?\314\000:?#\2629?Tc9?`\0249?G\3058?\nv8?\247&8? \3277?t\2077?\24477?\256\3476?\225\2276?WG6?\364\3665?n\2465?\302U5?\363\0045?\000\2644?\350b4?\255\0214?M\3003?\312n3?#\0353?X\3132?jy2?W\'2?\"\3251?\310\2021?L01?\253\3350?\350\2120?\00180?\370\344/?\313\221/?{>/?\010\353.?r\227.?\271C.?\336\357-?\337\233-?\276G-?{\363,?\025\237,?\214J,?\341\365+?\024\241+?%L+?\023\367*?\337\241*?\211L*?\021\367)?x\241)?\274K)?\337\365(?\337\237(?\276I(?|\363\'?\030\235\'?\223F\'?\354\357&?$\231&?:B&?0\353%?\004\224%?\267<%?I\345$?\273\215$?\0136$?;\336#?J\206#?8.#?\006\326\"?\263}\"?@%\"?\254\314!?\370s!?$\033!?0\302 ?\033i ?\347\017 ?\223\266\037?\037]\037?\212\003\037?\327\251\036?\003P\036?\020\366\035?\376\233\035?\313A\035?z\347\034?\t\215\034?y2\034?\312\327\033?\374|\033?\016\"\033?\002\307\032?\327k\032?\215\020\032?$\265\031?\234Y\031?\366\375\030?2\242\030?NF\030?M\352\027?-\216\027?\3571\027?\223\325\026?\030y\026?\200\034\026?\311\277\025?\365b\025?\003\006\025?\363\250\024?\305K\024?z\356\023?\021\221\023?\2133\023?\350\325\022?\'x\022?I\032\022?N\274\021?5^\021?\000\000\021?\255\241\020?>C\020?\262\344\017?\n\206\017?D\'\017?b\310\016?di\016?I\n\016?\022\253\r?\276K\r?N\354\014?\302\214\014?\032-\014?W\315\013?wm\013?{\r\013?d\255\n?1M\n?\342\354\t?x\214\t?\362+\t?Q\313\010?\224j\010?\275\t\010?\312\250\007?\274G\007?\223\346\006?O\205\006?\361#\006?w\302\005?\343`\005?4\377\004?k\235\004?\207;\004?\211\331\003?qw\003?>\025\003?\361\262\002?\212P\002?\t\356\001?n\213\001?\271(\001?\352\305\000?\002c\000?\000\000\000?\3119\377>_s\376>\302\254\375>\363\345\374>\361\036\374>\275W\373>V\220\372>\276\310\371>\363\000\371>\3678\370>\312p\367>k\250\366>\333\337\365>\031\027\365>\'N\364>\004\205\363>\261\273\362>-\362\361>x(\361>\224^\360>\177\224\357>;\312\356>\307\377\355>#5\355>Pj\354>N\237\353>\035\324\352>\275\010\352>/=\351>qq\350>\206\245\347>l\331\346>$\r\346>\256@\345>\nt\344>9\247\343>:\332\342>\016\r\342>\265?\341>/r\340>|\244\337>\234\326\336>\220\010\336>X:\335>\363k\334>c\235\333>\246\316\332>\276\377\331>\2530\331>la\330>\002\222\327>l\302\326>\254\362\325>\302\"\325>\254R\324>m\202\323>\003\262\322>o\341\321>\261\020\321>\311?\320>\270n\317>}\235\316>\031\314\315>\214\372\314>\327(\314>\370V\313>\361\204\312>\301\262\311>i\340\310>\351\r\310>A;\307>qh\306>z\225\305>[\302\304>\025\357\303>\250\033\303>\024H\302>Yt\301>w\240\300>o\314\277>A\370\276>\355#\276>rO\275>\322z\274>\014\246\273>!\321\272>\021\374\271>\333&\271>\200Q\270>\001|\267>]\246\266>\224\320\265>\250\372\264>\227$\264>bN\263>\tx\262>\215\241\261>\355\312\260>*\364\257>D\035\257>:F\256>\017o\255>\300\227\254>O\300\253>\274\350\252>\006\021\252>/9\251>6a\250>\033\211\247>\336\260\246>\201\330\245>\002\000\245>c\'\244>\242N\243>\302u\242>\300\234\241>\237\303\240>]\352\237>\373\020\237>z7\236>\331]\235>\030\204\234>9\252\233>:\320\232>\034\366\231>\340\033\231>\205A\230>\014g\227>t\214\226>\276\261\225>\353\326\224>\372\373\223>\353 \223>\277E\222>vj\221>\017\217\220>\214\263\217>\354\327\216>0\374\215>W \215>bD\214>Qh\213>$\214\212>\334\257\211>x\323\210>\371\366\207>^\032\207>\251=\206>\331`\205>\356\203\204>\351\246\203>\311\311\202>\220\354\201><\017\201>\3171\200>\220\250~>O\355|>\3341{>7vy>`\272w>W\376u>\035Bt>\263\205r>\030\311p>M\014o>SOm>)\222k>\317\324i>H\027h>\222Yf>\256\233d>\234\335b>]\037a>\361`_>Y\242]>\224\343[>\243$Z>\207eX>@\246V>\315\346T>1\'S>jgQ>y\247O>_\347M>\034\'L>\260fJ>\033\246H>_\345F>{$E>ocC><\242A>\343\340?>d\037>>\276]<>\363\233:>\003\3328>\356\0277>\264U5>V\2233>\324\3201>/\0160>fK.>{\210,>m\305*>=\002)>\354>\'>y{%>\345\267#>0\364!>[0 >fl\036>R\250\034>\036\344\032>\313\037\031>Z[\027>\312\226\025>\035\322\023>R\r\022>jH\020>e\203\016>C\276\014>\006\371\n>\2553\t>8n\007>\250\250\005>\376\342\003>:\035\002>[W\000>\305\"\375=\242\226\371=N\n\366=\310}\362=\021\361\356=+d\353=\026\327\347=\323I\344=b\274\340=\304.\335=\372\240\331=\005\023\326=\345\204\322=\233\366\316=\'h\313=\213\331\307=\307J\304=\334\273\300=\312,\275=\223\235\271=7\016\266=\266~\262=\021\357\256=J_\253=a\317\247=U?\244=*\257\240=\336\036\235=r\216\231=\350\375\225=@m\222={\334\216=\232K\213=\234\272\207=\204)\204=Q\230\200=\t\016z=>\353r=B\310k=\027\245d=\277\201]=:^V=\213:O=\262\026H=\262\362@=\212\3169=>\2522=\316\205+=<a$=\211<\035=\267\027\026=\306\362\016=\271\315\007=\221\250\000=\237\006\363<\354\273\344<\nq\326<\376%\310<\312\332\271<p\217\253<\364C\235<Y\370\216<\242\254\200<\241\301d<\321)H<\330\221+<\276\371\016<\016\303\344;s\222\253;h\303d;}\303\344:tF\351)}\303\344\272h\303d\273s\222\253\273\016\303\344\273\276\371\016\274\330\221+\274\321)H\274\241\301d\274\242\254\200\274Y\370\216\274\364C\235\274p\217\253\274\312\332\271\274\376%\310\274\nq\326\274\354\273\344\274\237\006\363\274\221\250\000\275\271\315\007\275\306\362\016\275\267\027\026\275\211<\035\275<a$\275\316\205+\275>\2522\275\212\3169\275\262\362@\275\262\026H\275\213:O\275:^V\275\277\201]\275\027\245d\275B\310k\275>\353r\275\t\016z\275Q\230\200\275\204)\204\275\234\272\207\275\232K\213\275{\334\216\275@m\222\275\350\375\225\275r\216\231\275\336\036\235\275*\257\240\275U?\244\275a\317\247\275J_\253\275\021\357\256\275\266~\262\2757\016\266\275\223\235\271\275\312,\275\275\334\273\300\275\307J\304\275\213\331\307\275\'h\313\275\233\366\316\275\345\204\322\275\005\023\326\275\372\240\331\275\304.\335\275b\274\340\275\323I\344\275\026\327\347\275+d\353\275\021\361\356\275\310}\362\275N\n\366\275\242\226\371\275\305\"\375\275[W\000\276:\035\002\276\376\342\003\276\250\250\005\2768n\007\276\2553\t\276\006\371\n\276C\276\014\276e\203\016\276jH\020\276R\r\022\276\035\322\023\276\312\226\025\276Z[\027\276\313\037\031\276\036\344\032\276R\250\034\276fl\036\276[0 \2760\364!\276\345\267#\276y{%\276\354>\'\276=\002)\276m\305*\276{\210,\276fK.\276/\0160\276\324\3201\276V\2233\276\264U5\276\356\0277\276\003\3328\276\363\233:\276\276]<\276d\037>\276\343\340?\276<\242A\276ocC\276{$E\276_\345F\276\033\246H\276\260fJ\276\034\'L\276_\347M\276y\247O\276jgQ\2761\'S\276\315\346T\276@\246V\276\207eX\276\243$Z\276\224\343[\276Y\242]\276\361`_\276]\037a\276\234\335b\276\256\233d\276\222Yf\276H\027h\276\317\324i\276)\222k\276SOm\276M\014o\276\030\311p\276\263\205r\276\035Bt\276W\376u\276`\272w\2767vy\276\3341{\276O\355|\276\220\250~\276\3171\200\276<\017\201\276\220\354\201\276\311\311\202\276\351\246\203\276\356\203\204\276\331`\205\276\251=\206\276^\032\207\276\371\366\207\276x\323\210\276\334\257\211\276$\214\212\276Qh\213\276bD\214\276W \215\2760\374\215\276\354\327\216\276\214\263\217\276\017\217\220\276vj\221\276\277E\222\276\353 \223\276\372\373\223\276\353\326\224\276\276\261\225\276t\214\226\276\014g\227\276\205A\230\276\340\033\231\276\034\366\231\276:\320\232\2769\252\233\276\030\204\234\276\331]\235\276z7\236\276\373\020\237\276]\352\237\276\237\303\240\276\300\234\241\276\302u\242\276\242N\243\276c\'\244\276\002\000\245\276\201\330\245\276\336\260\246\276\033\211\247\2766a\250\276/9\251\276\006\021\252\276\274\350\252\276O\300\253\276\300\227\254\276\017o\255\276:F\256\276D\035\257\276*\364\257\276\355\312\260\276\215\241\261\276\tx\262\276bN\263\276\227$\264\276\250\372\264\276\224\320\265\276]\246\266\276\001|\267\276\200Q\270\276\333&\271\276\021\374\271\276!\321\272\276\014\246\273\276\322z\274\276rO\275\276\355#\276\276A\370\276\276o\314\277\276w\240\300\276Yt\301\276\024H\302\276\250\033\303\276\025\357\303\276[\302\304\276z\225\305\276qh\306\276A;\307\276\351\r\310\276i\340\310\276\301\262\311\276\361\204\312\276\370V\313\276\327(\314\276\214\372\314\276\031\314\315\276}\235\316\276\270n\317\276\311?\320\276\261\020\321\276o\341\321\276\003\262\322\276m\202\323\276\254R\324\276\302\"\325\276\254\362\325\276l\302\326\276\002\222\327\276la\330\276\2530\331\276\276\377\331\276\246\316\332\276c\235\333\276\363k\334\276X:\335\276\220\010\336\276\234\326\336\276|\244\337\276/r\340\276\265?\341\276\016\r\342\276:\332\342\2769\247\343\276\nt\344\276\256@\345\276$\r\346\276l\331\346\276\206\245\347\276qq\350\276/=\351\276\275\010\352\276\035\324\352\276N\237\353\276Pj\354\276#5\355\276\307\377\355\276;\312\356\276\177\224\357\276\224^\360\276x(\361\276-\362\361\276\261\273\362\276\004\205\363\276\'N\364\276\031\027\365\276\333\337\365\276k\250\366\276\312p\367\276\3678\370\276\363\000\371\276\276\310\371\276V\220\372\276\275W\373\276\361\036\374\276\363\345\374\276\302\254\375\276_s\376\276\3119\377\276\000\000\000\277\002c\000\277\352\305\000\277\271(\001\277n\213\001\277\t\356\001\277\212P\002\277\361\262\002\277>\025\003\277qw\003\277\211\331\003\277\207;\004\277k\235\004\2774\377\004\277\343`\005\277w\302\005\277\361#\006\277O\205\006\277\223\346\006\277\274G\007\277\312\250\007\277\275\t\010\277\224j\010\277Q\313\010\277\362+\t\277x\214\t\277\342\354\t\2771M\n\277d\255\n\277{\r\013\277wm\013\277W\315\013\277\032-\014\277\302\214\014\277N\354\014\277\276K\r\277\022\253\r\277I\n\016\277di\016\277b\310\016\277D\'\017\277\n\206\017\277\262\344\017\277>C\020\277\255\241\020\277\000\000\021\2775^\021\277N\274\021\277I\032\022\277\'x\022\277\350\325\022\277\2133\023\277\021\221\023\277z\356\023\277\305K\024\277\363\250\024\277\003\006\025\277\365b\025\277\311\277\025\277\200\034\026\277\030y\026\277\223\325\026\277\3571\027\277-\216\027\277M\352\027\277NF\030\2772\242\030\277\366\375\030\277\234Y\031\277$\265\031\277\215\020\032\277\327k\032\277\002\307\032\277\016\"\033\277\374|\033\277\312\327\033\277y2\034\277\t\215\034\277z\347\034\277\313A\035\277\376\233\035\277\020\366\035\277\003P\036\277\327\251\036\277\212\003\037\277\037]\037\277\223\266\037\277\347\017 \277\033i \2770\302 \277$\033!\277\370s!\277\254\314!\277@%\"\277\263}\"\277\006\326\"\2778.#\277J\206#\277;\336#\277\0136$\277\273\215$\277I\345$\277\267<%\277\004\224%\2770\353%\277:B&\277$\231&\277\354\357&\277\223F\'\277\030\235\'\277|\363\'\277\276I(\277\337\237(\277\337\365(\277\274K)\277x\241)\277\021\367)\277\211L*\277\337\241*\277\023\367*\277%L+\277\024\241+\277\341\365+\277\214J,\277\025\237,\277{\363,\277\276G-\277\337\233-\277\336\357-\277\271C.\277r\227.\277\010\353.\277{>/\277\313\221/\277\370\344/\277\00180\277\350\2120\277\253\3350\277L01\277\310\2021\277\"\3251\277W\'2\277jy2\277X\3132\277#\0353\277\312n3\277M\3003\277\255\0214\277\350b4\277\000\2644\277\363\0045\277\302U5\277n\2465\277\364\3665\277WG6\277\225\2276\277\256\3476\277\24477\277t\2077\277 \3277\277\247&8\277\nv8\277G\3058\277`\0249\277Tc9\277#\2629\277\314\000:\277QO:\277\260\235:\277\352\353:\277\3779;\277\356\207;\277\270\325;\277]#<\277\334p<\2775\276<\277i\013=\277wX=\277_\245=\277!\362=\277\275>>\2774\213>\277\204\327>\277\256#?\277\262o?\277\220\273?\277G\007@\277\331R@\277C\236@\277\210\351@\277\2464A\277\235\177A\277n\312A\277\030\025B\277\233_B\277\367\251B\277-\364B\277;>C\277#\210C\277\344\321C\277}\033D\277\357dD\277;\256D\277_\367D\277[@E\2770\211E\277\336\321E\277d\032F\277\303bF\277\372\252F\277\n\363F\277\361:G\277\261\202G\277J\312G\277\272\021H\277\002YH\277\"\240H\277\033\347H\277\353-I\277\223tI\277\023\273I\277j\001J\277\231GJ\277\240\215J\277~\323J\2774\031K\277\302^K\277&\244K\277b\351K\277v.L\277`sL\277\"\270L\277\273\374L\277+AM\277r\205M\277\220\311M\277\205\rN\277QQN\277\363\224N\277m\330N\277\275\033O\277\344^O\277\341\241O\277\265\344O\277_\'P\277\340iP\2777\254P\277e\356P\277h0Q\277CrQ\277\363\263Q\277y\365Q\277\3266R\277\010xR\277\021\271R\277\357\371R\277\243:S\277.{S\277\215\273S\277\303\373S\277\316;T\277\257{T\277f\273T\277\362\372T\277T:U\277\213yU\277\227\270U\277y\367U\27706V\277\274tV\277\035\263V\277T\361V\277_/W\277@mW\277\366\252W\277\200\350W\277\340%X\277\024cX\277\036\240X\277\373\334X\277\256\031Y\2775VY\277\221\222Y\277\302\316Y\277\307\nZ\277\240FZ\277N\202Z\277\320\275Z\277\'\371Z\277R4[\277Qo[\277$\252[\277\314\344[\277G\037\\\277\227Y\\\277\273\223\\\277\262\315\\\277~\007]\277\035A]\277\220z]\277\327\263]\277\362\354]\277\340%^\277\243^^\2778\227^\277\242\317^\277\336\007_\277\357?_\277\322w_\277\211\257_\277\024\347_\277q\036`\277\242U`\277\247\214`\277~\303`\277)\372`\277\2460a\277\367fa\277\032\235a\277\021\323a\277\332\010b\277w>b\277\346sb\277(\251b\277=\336b\277$\023c\277\336Gc\277k|c\277\313\260c\277\375\344c\277\001\031d\277\330Ld\277\201\200d\277\375\263d\277K\347d\277k\032e\277^Me\277\"\200e\277\271\262e\277#\345e\277^\027f\277kIf\277J{f\277\374\254f\277\177\336f\277\324\017g\277\373@g\277\364qg\277\277\242g\277[\323g\277\312\003h\277\t4h\277\033dh\277\376\223h\277\263\303h\2779\363h\277\220\"i\277\272Qi\277\264\200i\277\200\257i\277\035\336i\277\214\014j\277\314:j\277\335hj\277\277\226j\277s\304j\277\370\361j\277M\037k\277tLk\277lyk\2775\246k\277\317\322k\2779\377k\277u+l\277\201Wl\277^\203l\277\r\257l\277\213\332l\277\333\005m\277\3730m\277\354[m\277\255\206m\277?\261m\277\242\333m\277\325\005n\277\331/n\277\255Yn\277Q\203n\277\306\254n\277\013\326n\277 \377n\277\006(o\277\274Po\277Cyo\277\231\241o\277\300\311o\277\266\361o\277}\031p\277\024Ap\277{hp\277\262\217p\277\271\266p\277\220\335p\2777\004q\277\255*q\277\364Pq\277\nwq\277\360\234q\277\246\302q\277,\350q\277\201\rr\277\2462r\277\233Wr\277_|r\277\363\240r\277W\305r\277\212\351r\277\214\rs\277^1s\277\000Us\277qxs\277\261\233s\277\300\276s\277\237\341s\277N\004t\277\313&t\277\030It\2774kt\277\037\215t\277\332\256t\277c\320t\277\274\361t\277\344\022u\277\3333u\277\241Tu\2776uu\277\232\225u\277\315\265u\277\317\325u\277\237\365u\277?\025v\277\2564v\277\353Sv\277\367rv\277\322\221v\277|\260v\277\365\316v\277<\355v\277R\013w\2777)w\277\352Fw\277ldw\277\275\201w\277\334\236w\277\312\273w\277\206\330w\277\021\365w\277j\021x\277\222-x\277\210Ix\277Mex\277\340\200x\277B\234x\277q\267x\277p\322x\277<\355x\277\327\007y\277@\"y\277x<y\277}Vy\277Qpy\277\363\211y\277c\243y\277\242\274y\277\256\325y\277\211\356y\2772\007z\277\251\037z\277\3567z\277\001Pz\277\342gz\277\221\177z\277\016\227z\277Y\256z\277r\305z\277X\334z\277\r\363z\277\220\t{\277\341\037{\277\3775{\277\353K{\277\245a{\277-w{\277\203\214{\277\247\241{\277\230\266{\277W\313{\277\344\337{\277>\364{\277g\010|\277\\\034|\277 0|\277\261C|\277\020W|\277<j|\2777}|\277\376\217|\277\224\242|\277\366\264|\277\'\307|\277%\331|\277\360\352|\277\211\374|\277\357\r}\277#\037}\277%0}\277\364@}\277\220Q}\277\372a}\2771r}\2775\202}\277\007\222}\277\247\241}\277\023\261}\277M\300}\277U\317}\277)\336}\277\313\354}\277;\373}\277w\t~\277\201\027~\277X%~\277\3752~\277o@~\277\255M~\277\272Z~\277\223g~\277:t~\277\255\200~\277\356\214~\277\375\230~\277\330\244~\277\201\260~\277\366\273~\2779\307~\277I\322~\277&\335~\277\320\347~\277H\362~\277\214\374~\277\236\006\177\277|\020\177\277(\032\177\277\241#\177\277\347,\177\277\3715\177\277\331>\177\277\206G\177\277\000P\177\277GX\177\277\\`\177\277=h\177\277\353o\177\277fw\177\277\256~\177\277\303\205\177\277\245\214\177\277T\223\177\277\320\231\177\277\031\240\177\277/\246\177\277\022\254\177\277\302\261\177\277?\267\177\277\211\274\177\277\240\301\177\277\204\306\177\2774\313\177\277\262\317\177\277\374\323\177\277\024\330\177\277\370\333\177\277\251\337\177\277(\343\177\277s\346\177\277\213\351\177\277p\354\177\277\"\357\177\277\240\361\177\277\354\363\177\277\005\366\177\277\352\367\177\277\235\371\177\277\034\373\177\277h\374\177\277\201\375\177\277g\376\177\277\032\377\177\277\232\377\177\277\346\377\177\277\000\000\200\277\346\377\177\277\232\377\177\277\032\377\177\277g\376\177\277\201\375\177\277h\374\177\277\034\373\177\277\235\371\177\277\352\367\177\277\005\366\177\277\354\363\177\277\240\361\177\277\"\357\177\277p\354\177\277\213\351\177\277s\346\177\277(\343\177\277\251\337\177\277\370\333\177\277\024\330\177\277\374\323\177\277\262\317\177\2774\313\177\277\204\306\177\277\240\301\177\277\211\274\177\277?\267\177\277\302\261\177\277\022\254\177\277/\246\177\277\031\240\177\277\320\231\177\277T\223\177\277\245\214\177\277\303\205\177\277\256~\177\277fw\177\277\353o\177\277=h\177\277\\`\177\277GX\177\277\000P\177\277\206G\177\277\331>\177\277\3715\177\277\347,\177\277\241#\177\277(\032\177\277|\020\177\277\236\006\177\277\214\374~\277H\362~\277\320\347~\277&\335~\277I\322~\2779\307~\277\366\273~\277\201\260~\277\330\244~\277\375\230~\277\356\214~\277\255\200~\277:t~\277\223g~\277\272Z~\277\255M~\277o@~\277\3752~\277X%~\277\201\027~\277w\t~\277;\373}\277\313\354}\277)\336}\277U\317}\277M\300}\277\023\261}\277\247\241}\277\007\222}\2775\202}\2771r}\277\372a}\277\220Q}\277\364@}\277%0}\277#\037}\277\357\r}\277\211\374|\277\360\352|\277%\331|\277\'\307|\277\366\264|\277\224\242|\277\376\217|\2777}|\277<j|\277\020W|\277\261C|\277 0|\277\\\034|\277g\010|\277>\364{\277\344\337{\277W\313{\277\230\266{\277\247\241{\277\203\214{\277-w{\277\245a{\277\353K{\277\3775{\277\341\037{\277\220\t{\277\r\363z\277X\334z\277r\305z\277Y\256z\277\016\227z\277\221\177z\277\342gz\277\001Pz\277\3567z\277\251\037z\2772\007z\277\211\356y\277\256\325y\277\242\274y\277c\243y\277\363\211y\277Qpy\277}Vy\277x<y\277@\"y\277\327\007y\277<\355x\277p\322x\277q\267x\277B\234x\277\340\200x\277Mex\277\210Ix\277\222-x\277j\021x\277\021\365w\277\206\330w\277\312\273w\277\334\236w\277\275\201w\277ldw\277\352Fw\2777)w\277R\013w\277<\355v\277\365\316v\277|\260v\277\322\221v\277\367rv\277\353Sv\277\2564v\277?\025v\277\237\365u\277\317\325u\277\315\265u\277\232\225u\2776uu\277\241Tu\277\3333u\277\344\022u\277\274\361t\277c\320t\277\332\256t\277\037\215t\2774kt\277\030It\277\313&t\277N\004t\277\237\341s\277\300\276s\277\261\233s\277qxs\277\000Us\277^1s\277\214\rs\277\212\351r\277W\305r\277\363\240r\277_|r\277\233Wr\277\2462r\277\201\rr\277,\350q\277\246\302q\277\360\234q\277\nwq\277\364Pq\277\255*q\2777\004q\277\220\335p\277\271\266p\277\262\217p\277{hp\277\024Ap\277}\031p\277\266\361o\277\300\311o\277\231\241o\277Cyo\277\274Po\277\006(o\277 \377n\277\013\326n\277\306\254n\277Q\203n\277\255Yn\277\331/n\277\325\005n\277\242\333m\277?\261m\277\255\206m\277\354[m\277\3730m\277\333\005m\277\213\332l\277\r\257l\277^\203l\277\201Wl\277u+l\2779\377k\277\317\322k\2775\246k\277lyk\277tLk\277M\037k\277\370\361j\277s\304j\277\277\226j\277\335hj\277\314:j\277\214\014j\277\035\336i\277\200\257i\277\264\200i\277\272Qi\277\220\"i\2779\363h\277\263\303h\277\376\223h\277\033dh\277\t4h\277\312\003h\277[\323g\277\277\242g\277\364qg\277\373@g\277\324\017g\277\177\336f\277\374\254f\277J{f\277kIf\277^\027f\277#\345e\277\271\262e\277\"\200e\277^Me\277k\032e\277K\347d\277\375\263d\277\201\200d\277\330Ld\277\001\031d\277\375\344c\277\313\260c\277k|c\277\336Gc\277$\023c\277=\336b\277(\251b\277\346sb\277w>b\277\332\010b\277\021\323a\277\032\235a\277\367fa\277\2460a\277)\372`\277~\303`\277\247\214`\277\242U`\277q\036`\277\024\347_\277\211\257_\277\322w_\277\357?_\277\336\007_\277\242\317^\2778\227^\277\243^^\277\340%^\277\362\354]\277\327\263]\277\220z]\277\035A]\277~\007]\277\262\315\\\277\273\223\\\277\227Y\\\277G\037\\\277\314\344[\277$\252[\277Qo[\277R4[\277\'\371Z\277\320\275Z\277N\202Z\277\240FZ\277\307\nZ\277\302\316Y\277\221\222Y\2775VY\277\256\031Y\277\373\334X\277\036\240X\277\024cX\277\340%X\277\200\350W\277\366\252W\277@mW\277_/W\277T\361V\277\035\263V\277\274tV\27706V\277y\367U\277\227\270U\277\213yU\277T:U\277\362\372T\277f\273T\277\257{T\277\316;T\277\303\373S\277\215\273S\277.{S\277\243:S\277\357\371R\277\021\271R\277\010xR\277\3266R\277y\365Q\277\363\263Q\277CrQ\277h0Q\277e\356P\2777\254P\277\340iP\277_\'P\277\265\344O\277\341\241O\277\344^O\277\275\033O\277m\330N\277\363\224N\277QQN\277\205\rN\277\220\311M\277r\205M\277+AM\277\273\374L\277\"\270L\277`sL\277v.L\277b\351K\277&\244K\277\302^K\2774\031K\277~\323J\277\240\215J\277\231GJ\277j\001J\277\023\273I\277\223tI\277\353-I\277\033\347H\277\"\240H\277\002YH\277\272\021H\277J\312G\277\261\202G\277\361:G\277\n\363F\277\372\252F\277\303bF\277d\032F\277\336\321E\2770\211E\277[@E\277_\367D\277;\256D\277\357dD\277}\033D\277\344\321C\277#\210C\277;>C\277-\364B\277\367\251B\277\233_B\277\030\025B\277n\312A\277\235\177A\277\2464A\277\210\351@\277C\236@\277\331R@\277G\007@\277\220\273?\277\262o?\277\256#?\277\204\327>\2774\213>\277\275>>\277!\362=\277_\245=\277wX=\277i\013=\2775\276<\277\334p<\277]#<\277\270\325;\277\356\207;\277\3779;\277\352\353:\277\260\235:\277QO:\277\314\000:\277#\2629\277Tc9\277`\0249\277G\3058\277\nv8\277\247&8\277 \3277\277t\2077\277\24477\277\256\3476\277\225\2276\277WG6\277\364\3665\277n\2465\277\302U5\277\363\0045\277\000\2644\277\350b4\277\255\0214\277M\3003\277\312n3\277#\0353\277X\3132\277jy2\277W\'2\277\"\3251\277\310\2021\277L01\277\253\3350\277\350\2120\277\00180\277\370\344/\277\313\221/\277{>/\277\010\353.\277r\227.\277\271C.\277\336\357-\277\337\233-\277\276G-\277{\363,\277\025\237,\277\214J,\277\341\365+\277\024\241+\277%L+\277\023\367*\277\337\241*\277\211L*\277\021\367)\277x\241)\277\274K)\277\337\365(\277\337\237(\277\276I(\277|\363\'\277\030\235\'\277\223F\'\277\354\357&\277$\231&\277:B&\2770\353%\277\004\224%\277\267<%\277I\345$\277\273\215$\277\0136$\277;\336#\277J\206#\2778.#\277\006\326\"\277\263}\"\277@%\"\277\254\314!\277\370s!\277$\033!\2770\302 \277\033i \277\347\017 \277\223\266\037\277\037]\037\277\212\003\037\277\327\251\036\277\003P\036\277\020\366\035\277\376\233\035\277\313A\035\277z\347\034\277\t\215\034\277y2\034\277\312\327\033\277\374|\033\277\016\"\033\277\002\307\032\277\327k\032\277\215\020\032\277$\265\031\277\234Y\031\277\366\375\030\2772\242\030\277NF\030\277M\352\027\277-\216\027\277\3571\027\277\223\325\026\277\030y\026\277\200\034\026\277\311\277\025\277\365b\025\277\003\006\025\277\363\250\024\277\305K\024\277z\356\023\277\021\221\023\277\2133\023\277\350\325\022\277\'x\022\277I\032\022\277N\274\021\2775^\021\277\000\000\021\277\255\241\020\277>C\020\277\262\344\017\277\n\206\017\277D\'\017\277b\310\016\277di\016\277I\n\016\277\022\253\r\277\276K\r\277N\354\014\277\302\214\014\277\032-\014\277W\315\013\277wm\013\277{\r\013\277d\255\n\2771M\n\277\342\354\t\277x\214\t\277\362+\t\277Q\313\010\277\224j\010\277\275\t\010\277\312\250\007\277\274G\007\277\223\346\006\277O\205\006\277\361#\006\277w\302\005\277\343`\005\2774\377\004\277k\235\004\277\207;\004\277\211\331\003\277qw\003\277>\025\003\277\361\262\002\277\212P\002\277\t\356\001\277n\213\001\277\271(\001\277\352\305\000\277\002c\000\277\000\000\000\277\3119\377\276_s\376\276\302\254\375\276\363\345\374\276\361\036\374\276\275W\373\276V\220\372\276\276\310\371\276\363\000\371\276\3678\370\276\312p\367\276k\250\366\276\333\337\365\276\031\027\365\276\'N\364\276\004\205\363\276\261\273\362\276-\362\361\276x(\361\276\224^\360\276\177\224\357\276;\312\356\276\307\377\355\276#5\355\276Pj\354\276N\237\353\276\035\324\352\276\275\010\352\276/=\351\276qq\350\276\206\245\347\276l\331\346\276$\r\346\276\256@\345\276\nt\344\2769\247\343\276:\332\342\276\016\r\342\276\265?\341\276/r\340\276|\244\337\276\234\326\336\276\220\010\336\276X:\335\276\363k\334\276c\235\333\276\246\316\332\276\276\377\331\276\2530\331\276la\330\276\002\222\327\276l\302\326\276\254\362\325\276\302\"\325\276\254R\324\276m\202\323\276\003\262\322\276o\341\321\276\261\020\321\276\311?\320\276\270n\317\276}\235\316\276\031\314\315\276\214\372\314\276\327(\314\276\370V\313\276\361\204\312\276\301\262\311\276i\340\310\276\351\r\310\276A;\307\276qh\306\276z\225\305\276[\302\304\276\025\357\303\276\250\033\303\276\024H\302\276Yt\301\276w\240\300\276o\314\277\276A\370\276\276\355#\276\276rO\275\276\322z\274\276\014\246\273\276!\321\272\276\021\374\271\276\333&\271\276\200Q\270\276\001|\267\276]\246\266\276\224\320\265\276\250\372\264\276\227$\264\276bN\263\276\tx\262\276\215\241\261\276\355\312\260\276*\364\257\276D\035\257\276:F\256\276\017o\255\276\300\227\254\276O\300\253\276\274\350\252\276\006\021\252\276/9\251\2766a\250\276\033\211\247\276\336\260\246\276\201\330\245\276\002\000\245\276c\'\244\276\242N\243\276\302u\242\276\300\234\241\276\237\303\240\276]\352\237\276\373\020\237\276z7\236\276\331]\235\276\030\204\234\2769\252\233\276:\320\232\276\034\366\231\276\340\033\231\276\205A\230\276\014g\227\276t\214\226\276\276\261\225\276\353\326\224\276\372\373\223\276\353 \223\276\277E\222\276vj\221\276\017\217\220\276\214\263\217\276\354\327\216\2760\374\215\276W \215\276bD\214\276Qh\213\276$\214\212\276\334\257\211\276x\323\210\276\371\366\207\276^\032\207\276\251=\206\276\331`\205\276\356\203\204\276\351\246\203\276\311\311\202\276\220\354\201\276<\017\201\276\3171\200\276\220\250~\276O\355|\276\3341{\2767vy\276`\272w\276W\376u\276\035Bt\276\263\205r\276\030\311p\276M\014o\276SOm\276)\222k\276\317\324i\276H\027h\276\222Yf\276\256\233d\276\234\335b\276]\037a\276\361`_\276Y\242]\276\224\343[\276\243$Z\276\207eX\276@\246V\276\315\346T\2761\'S\276jgQ\276y\247O\276_\347M\276\034\'L\276\260fJ\276\033\246H\276_\345F\276{$E\276ocC\276<\242A\276\343\340?\276d\037>\276\276]<\276\363\233:\276\003\3328\276\356\0277\276\264U5\276V\2233\276\324\3201\276/\0160\276fK.\276{\210,\276m\305*\276=\002)\276\354>\'\276y{%\276\345\267#\2760\364!\276[0 \276fl\036\276R\250\034\276\036\344\032\276\313\037\031\276Z[\027\276\312\226\025\276\035\322\023\276R\r\022\276jH\020\276e\203\016\276C\276\014\276\006\371\n\276\2553\t\2768n\007\276\250\250\005\276\376\342\003\276:\035\002\276[W\000\276\305\"\375\275\242\226\371\275N\n\366\275\310}\362\275\021\361\356\275+d\353\275\026\327\347\275\323I\344\275b\274\340\275\304.\335\275\372\240\331\275\005\023\326\275\345\204\322\275\233\366\316\275\'h\313\275\213\331\307\275\307J\304\275\334\273\300\275\312,\275\275\223\235\271\2757\016\266\275\266~\262\275\021\357\256\275J_\253\275a\317\247\275U?\244\275*\257\240\275\336\036\235\275r\216\231\275\350\375\225\275@m\222\275{\334\216\275\232K\213\275\234\272\207\275\204)\204\275Q\230\200\275\t\016z\275>\353r\275B\310k\275\027\245d\275\277\201]\275:^V\275\213:O\275\262\026H\275\262\362@\275\212\3169\275>\2522\275\316\205+\275<a$\275\211<\035\275\267\027\026\275\306\362\016\275\271\315\007\275\221\250\000\275\237\006\363\274\354\273\344\274\nq\326\274\376%\310\274\312\332\271\274p\217\253\274\364C\235\274Y\370\216\274\242\254\200\274\241\301d\274\321)H\274\330\221+\274\276\371\016\274\016\303\344\273s\222\253\273h\303d\273}\303\344\272"
          }
        }
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "TensorSliceDataset/tensors/component_0:output:0"
      input: "TensorSliceDataset/tensors/component_1:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/buffer_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 5000
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset/seed2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node_def {
      name: "ShuffleDataset"
      op: "ShuffleDataset"
      input: "TensorSliceDataset:handle:0"
      input: "ShuffleDataset/buffer_size:output:0"
      input: "ShuffleDataset/seed:output:0"
      input: "ShuffleDataset/seed2:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "reshuffle_each_iteration"
        value {
          b: true
        }
      }
    }
    node_def {
      name: "BatchDataset/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 100
          }
        }
      }
    }
    node_def {
      name: "BatchDataset"
      op: "BatchDataset"
      input: "ShuffleDataset:handle:0"
      input: "BatchDataset/batch_size:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "BatchDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_DOUBLE
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "repeatdataset"
      value: "RepeatDataset:handle:0"
    }
  }
}
versions {
  producer: 26
  min_consumer: 12
}
